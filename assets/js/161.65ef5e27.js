(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{557:function(e,n,t){"use strict";t.r(n);var a=t(56),v=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_8-1-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-数组"}},[e._v("#")]),e._v(" 8.1 数组")]),e._v(" "),t("p",[e._v("对数组的大多数必要的介绍已在第4章的最后一节进行。通过那里的学习，大家已知道自己该如何定义及初始化一个数组。对象的容纳是本章的重点，而数组只是容纳对象的一种方式。但由于还有其他大量方法可容纳数组，所以是哪些地方使数组显得如此特别呢？")]),e._v(" "),t("p",[e._v("有两方面的问题将数组与其他集合类型区分开来：效率和类型。对于Java来说，为保存和访问一系列对象（实际是对象的引用）数组，最有效的方法莫过于数组。数组实际代表一个简单的线性序列，它使得元素的访问速度非常快，但我们却要为这种速度付出代价：创建一个数组对象时，它的大小是固定的，而且不可在那个数组对象的“存在时间”内发生改变。可创建特定大小的一个数组，然后假如用光了存储空间，就再创建一个新数组，将所有引用从旧数组移到新数组。这属于“向量”（"),t("code",[e._v("Vector")]),e._v("）类的行为，本章稍后还会详细讨论它。然而，由于为这种大小的灵活性要付出较大的代价，所以我们认为向量的效率并没有数组高。")]),e._v(" "),t("p",[e._v("C++的向量类知道自己容纳的是什么类型的对象，但同Java的数组相比，它却有一个明显的缺点：C++向量类的"),t("code",[e._v("operator[]")]),e._v("不能进行范围检查，所以很容易超出边界（然而，它可以查询"),t("code",[e._v("vector")]),e._v("有多大，而且"),t("code",[e._v("at()")]),e._v("方法确实能进行范围检查）。在Java中，无论使用的是数组还是集合，都会进行范围检查——若超过边界，就会获得一个"),t("code",[e._v("RuntimeException")]),e._v("（运行期异常）错误。正如大家在第9章会学到的那样，这类异常指出的是一个程序员错误，所以不需要在代码中检查它。在另一方面，由于C++的"),t("code",[e._v("vector")]),e._v("不进行范围检查，所以访问速度较快——在Java中，由于对数组和集合都要进行范围检查，所以对性能有一定的影响。")]),e._v(" "),t("p",[e._v("本章还要学习另外几种常见的集合类："),t("code",[e._v("Vector")]),e._v("（向量）、"),t("code",[e._v("Stack")]),e._v("（栈）以及"),t("code",[e._v("Hashtable")]),e._v("（散列表）。这些类都涉及对对象的处理——好象它们没有特定的类型。换言之，它们将其当作"),t("code",[e._v("Object")]),e._v("类型处理（"),t("code",[e._v("Object")]),e._v("类型是Java中所有类的“根”类）。从某个角度看，这种处理方法是非常合理的：我们仅需构建一个集合，然后任何Java对象都可以进入那个集合（除基本数据类型外——可用Java的基本类型封装类将其作为常数置入集合，或者将其封装到自己的类内，作为可以变化的值使用）。这再一次反映了数组优于常规集合：创建一个数组时，可令其容纳一种特定的类型。这意味着可进行编译期类型检查，预防自己设置了错误的类型，或者错误指定了准备提取的类型。当然，在编译期或者运行期，Java会防止我们将不当的消息发给一个对象。所以我们不必考虑自己的哪种做法更加危险，只要编译器能及时地指出错误，同时在运行期间加快速度，目的也就达到了。此外，用户很少会对一次异常事件感到非常惊讶的。")]),e._v(" "),t("p",[e._v("考虑到执行效率和类型检查，应尽可能地采用数组。然而，当我们试图解决一个更常规的问题时，数组的局限也可能显得非常明显。在研究过数组以后，本章剩余的部分将把重点放到Java提供的集合类身上。")]),e._v(" "),t("h2",{attrs:{id:"_8-1-1-数组和第一类对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-1-数组和第一类对象"}},[e._v("#")]),e._v(" 8.1.1 数组和第一类对象")]),e._v(" "),t("p",[e._v("无论使用的数组属于什么类型，数组标识符实际都是指向真实对象的一个引用。那些对象本身是在内存“堆”里创建的。堆对象既可“隐式”创建（即默认产生），亦可“显式”创建（即明确指定，用一个"),t("code",[e._v("new")]),e._v("表达式）。堆对象的一部分（实际是我们能访问的唯一字段或方法）是只读的"),t("code",[e._v("length")]),e._v("（长度）成员，它告诉我们那个数组对象里最多能容纳多少元素。对于数组对象，"),t("code",[e._v("[]")]),e._v("语法是我们能采用的唯一另类访问方法。")]),e._v(" "),t("p",[e._v("下面这个例子展示了对数组进行初始化的不同方式，以及如何将数组引用分配给不同的数组对象。它也揭示出对象数组和基本数据类型数组在使用方法上几乎是完全一致的。唯一的差别在于对象数组容纳的是引用，而基本数据类型数组容纳的是具体的数值（若在执行此程序时遇到困难，请参考第3章的“赋值”小节）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: ArraySize.java\n// Initialization & re-assignment of arrays\npackage c08;\n\nclass Weeble {} // A small mythical creature\n\npublic class ArraySize {\n  public static void main(String[] args) {\n    // Arrays of objects:\n    Weeble[] a; // Null handle\n    Weeble[] b = new Weeble[5]; // Null handles\n    Weeble[] c = new Weeble[4];\n    for(int i = 0; i < c.length; i++)\n      c[i] = new Weeble();\n    Weeble[] d = {\n      new Weeble(), new Weeble(), new Weeble()\n    };\n    // Compile error: variable a not initialized:\n    //!System.out.println("a.length=" + a.length);\n    System.out.println("b.length = " + b.length);\n    // The handles inside the array are\n    // automatically initialized to null:\n    for(int i = 0; i < b.length; i++)\n      System.out.println("b[" + i + "]=" + b[i]);\n    System.out.println("c.length = " + c.length);\n    System.out.println("d.length = " + d.length);\n    a = d;\n    System.out.println("a.length = " + a.length);\n    // Java 1.1 initialization syntax:\n    a = new Weeble[] {\n      new Weeble(), new Weeble()\n    };\n    System.out.println("a.length = " + a.length);\n\n    // Arrays of primitives:\n    int[] e; // Null handle\n    int[] f = new int[5];\n    int[] g = new int[4];\n    for(int i = 0; i < g.length; i++)\n      g[i] = i*i;\n    int[] h = { 11, 47, 93 };\n    // Compile error: variable e not initialized:\n    //!System.out.println("e.length=" + e.length);\n    System.out.println("f.length = " + f.length);\n    // The primitives inside the array are\n    // automatically initialized to zero:\n    for(int i = 0; i < f.length; i++)\n      System.out.println("f[" + i + "]=" + f[i]);\n    System.out.println("g.length = " + g.length);\n    System.out.println("h.length = " + h.length);\n    e = h;\n    System.out.println("e.length = " + e.length);\n    // Java 1.1 initialization syntax:\n    e = new int[] { 1, 2 };\n    System.out.println("e.length = " + e.length);\n  }\n} ///:~\nHere’s the output from the program:\n\nb.length = 5\nb[0]=null\nb[1]=null\nb[2]=null\nb[3]=null\nb[4]=null\nc.length = 4\nd.length = 3\na.length = 3\na.length = 2\nf.length = 5\nf[0]=0\nf[1]=0\nf[2]=0\nf[3]=0\nf[4]=0\ng.length = 4\nh.length = 3\ne.length = 3\ne.length = 2\n')])])]),t("p",[e._v("其中，数组"),t("code",[e._v("a")]),e._v("只是初始化成一个"),t("code",[e._v("null")]),e._v("引用。此时，编译器会禁止我们对这个引用作任何实际操作，除非已正确地初始化了它。数组"),t("code",[e._v("b")]),e._v("被初始化成指向由"),t("code",[e._v("Weeble")]),e._v("引用构成的一个数组，但那个数组里实际并未放置任何"),t("code",[e._v("Weeble")]),e._v("对象。然而，我们仍然可以查询那个数组的大小，因为"),t("code",[e._v("b")]),e._v("指向的是一个合法对象。这也为我们带来了一个难题：不可知道那个数组里实际包含了多少个元素，因为"),t("code",[e._v("length")]),e._v("只告诉我们可将多少元素置入那个数组。换言之，我们只知道数组对象的大小或容量，不知其实际容纳了多少个元素。尽管如此，由于数组对象在创建之初会自动初始化成"),t("code",[e._v("null")]),e._v("，所以可检查它是否为"),t("code",[e._v("null")]),e._v("，判断一个特定的数组“空位”是否容纳一个对象。类似地，由基本数据类型构成的数组会自动初始化成零（针对数值类型）、"),t("code",[e._v("null")]),e._v("（字符类型）或者"),t("code",[e._v("false")]),e._v("（布尔类型）。")]),e._v(" "),t("p",[e._v("数组"),t("code",[e._v("c")]),e._v("显示出我们首先创建一个数组对象，再将"),t("code",[e._v("Weeble")]),e._v("对象赋给那个数组的所有“空位”。数组"),t("code",[e._v("d")]),e._v("揭示出“集合初始化”语法，从而创建数组对象（用"),t("code",[e._v("new")]),e._v("命令明确进行，类似于数组"),t("code",[e._v("c")]),e._v("），然后用"),t("code",[e._v("Weeble")]),e._v("对象进行初始化，全部工作在一条语句里完成。\n下面这个表达式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("a = d;\n")])])]),t("p",[e._v("向我们展示了如何取得同一个数组对象连接的引用，然后将其赋给另一个数组对象，就象我们针对对象引用的其他任何类型做的那样。现在，"),t("code",[e._v("a")]),e._v("和"),t("code",[e._v("d")]),e._v("都指向内存堆内同样的数组对象。")]),e._v(" "),t("p",[e._v("Java 1.1加入了一种新的数组初始化语法，可将其想象成“动态集合初始化”。由"),t("code",[e._v("d")]),e._v("采用的Java 1.0集合初始化方法则必须在定义"),t("code",[e._v("d")]),e._v("的同时进行。但若采用Java 1.1的语法，却可以在任何地方创建和初始化一个数组对象。例如，假设"),t("code",[e._v("hide()")]),e._v("方法用于取得一个"),t("code",[e._v("Weeble")]),e._v("对象数组，那么调用它时传统的方法是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("hide(d);\n")])])]),t("p",[e._v("但在Java 1.1中，亦可动态创建想作为参数传递的数组，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("hide(new Weeble[] {new Weeble(), new Weeble() });\n")])])]),t("p",[e._v("这一新式语法使我们在某些场合下写代码更方便了。")]),e._v(" "),t("p",[e._v("上述例子的第二部分揭示出这样一个问题：对于由基本数据类型构成的数组，它们的运作方式与对象数组极为相似，只是前者直接包容了基本类型的数据值。")]),e._v(" "),t("p",[e._v("(1) 基本数据类型集合")]),e._v(" "),t("p",[e._v("集合类只能容纳对象引用。但对一个数组，却既可令其直接容纳基本类型的数据，亦可容纳指向对象的引用。利用象"),t("code",[e._v("Integer")]),e._v("、"),t("code",[e._v("Double")]),e._v("之类的“包装器”类，可将基本数据类型的值置入一个集合里。但正如本章后面会在"),t("code",[e._v("WordCount.java")]),e._v("例子中讲到的那样，用于基本数据类型的包装器类只是在某些场合下才能发挥作用。无论将基本类型的数据置入数组，还是将其封装进入位于集合的一个类内，都涉及到执行效率的问题。显然，若能创建和访问一个基本数据类型数组，那么比起访问一个封装数据的集合，前者的效率会高出许多。")]),e._v(" "),t("p",[e._v("当然，假如准备一种基本数据类型，同时又想要集合的灵活性（在需要的时候可自动扩展，腾出更多的空间），就不宜使用数组，必须使用由封装的数据构成的一个集合。大家或许认为针对每种基本数据类型，都应有一种特殊类型的"),t("code",[e._v("Vector")]),e._v("。但Java并未提供这一特性。某些形式的建模机制或许会在某一天帮助Java更好地解决这个问题（注释①）。")]),e._v(" "),t("p",[e._v("①：这儿是C++比Java做得好的一个地方，因为C++通过"),t("code",[e._v("template")]),e._v("关键字提供了对“参数化类型”的支持。")]),e._v(" "),t("h2",{attrs:{id:"_8-1-2-数组的返回"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-2-数组的返回"}},[e._v("#")]),e._v(" 8.1.2 数组的返回")]),e._v(" "),t("p",[e._v("假定我们现在想写一个方法，同时不希望它仅仅返回一样东西，而是想返回一系列东西。此时，象C和C++这样的语言会使问题复杂化，因为我们不能返回一个数组，只能返回指向数组的一个指针。这样就非常麻烦，因为很难控制数组的“存在时间”，它很容易造成内存“漏洞”的出现。")]),e._v(" "),t("p",[e._v("Java采用的是类似的方法，但我们能“返回一个数组”。当然，此时返回的实际仍是指向数组的指针。但在Java里，我们永远不必担心那个数组的是否可用——只要需要，它就会自动存在。而且垃圾收集器会在我们完成后自动将其清除。\n作为一个例子，请思考如何返回一个字符串数组：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: IceCream.java\n// Returning arrays from methods\n\npublic class IceCream {\n  static String[] flav = {\n    "Chocolate", "Strawberry",\n    "Vanilla Fudge Swirl", "Mint Chip",\n    "Mocha Almond Fudge", "Rum Raisin",\n    "Praline Cream", "Mud Pie"\n  };\n  static String[] flavorSet(int n) {\n    // Force it to be positive & within bounds:\n    n = Math.abs(n) % (flav.length + 1);\n    String[] results = new String[n];\n    int[] picks = new int[n];\n    for(int i = 0; i < picks.length; i++)\n      picks[i] = -1;\n    for(int i = 0; i < picks.length; i++) {\n      retry:\n      while(true) {\n        int t =\n          (int)(Math.random() * flav.length);\n        for(int j = 0; j < i; j++)\n          if(picks[j] == t) continue retry;\n        picks[i] = t;\n        results[i] = flav[t];\n        break;\n      }\n    }\n    return results;\n  }\n  public static void main(String[] args) {\n    for(int i = 0; i < 20; i++) {\n      System.out.println(\n        "flavorSet(" + i + ") = ");\n      String[] fl = flavorSet(flav.length);\n      for(int j = 0; j < fl.length; j++)\n        System.out.println("\\t" + fl[j]);\n    }\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("flavorSet()")]),e._v("方法创建了一个名为"),t("code",[e._v("results")]),e._v("的"),t("code",[e._v("String")]),e._v("数组。该数组的大小为"),t("code",[e._v("n")]),e._v("——具体数值取决于我们传递给方法的参数。随后，它从数组"),t("code",[e._v("flav")]),e._v("里随机挑选一些“香料”（"),t("code",[e._v("Flavor")]),e._v("），并将它们置入"),t("code",[e._v("results")]),e._v("里，并最终返回"),t("code",[e._v("results")]),e._v("。返回数组与返回其他任何对象没什么区别——最终返回的都是一个引用。至于数组到底是在"),t("code",[e._v("flavorSet()")]),e._v("里创建的，还是在其他什么地方创建的，这个问题并不重要，因为反正返回的仅是一个引用。一旦我们的操作完成，垃圾收集器会自动关照数组的清除工作。而且只要我们需要数组，它就会乖乖地听候调遣。")]),e._v(" "),t("p",[e._v("另一方面，注意当"),t("code",[e._v("flavorSet()")]),e._v("随机挑选香料的时候，它需要保证以前出现过的一次随机选择不会再次出现。为达到这个目的，它使用了一个无限"),t("code",[e._v("while")]),e._v("循环，不断地作出随机选择，直到发现未在"),t("code",[e._v("picks")]),e._v("数组里出现过的一个元素为止（当然，也可以进行字符串比较，检查随机选择是否在"),t("code",[e._v("results")]),e._v("数组里出现过，但字符串比较的效率比较低）。若成功，就添加这个元素，并中断循环（"),t("code",[e._v("break")]),e._v("），再查找下一个（"),t("code",[e._v("i")]),e._v("值会递增）。但假若"),t("code",[e._v("t")]),e._v("是一个已在"),t("code",[e._v("picks")]),e._v("里出现过的数组，就用标签式的"),t("code",[e._v("continue")]),e._v("往回跳两级，强制选择一个新"),t("code",[e._v("t")]),e._v("。用一个调试程序可以很清楚地看到这个过程。")]),e._v(" "),t("p",[t("code",[e._v("main()")]),e._v("能显示出20个完整的香料集合，所以我们看到"),t("code",[e._v("flavorSet()")]),e._v("每次都用一个随机顺序选择香料。为体会这一点，最简单的方法就是将输出重导向进入一个文件，然后直接观看这个文件的内容。")])])}),[],!1,null,null,null);n.default=v.exports}}]);