(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{453:function(e,n,t){"use strict";t.r(n);var i=t(56),o=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_13-16-新型awt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-新型awt"}},[e._v("#")]),e._v(" 13.16 新型AWT")]),e._v(" "),t("p",[e._v("在Java 1.1中一个显著的改变就是完善了新AWT的创新。大多数的改变围绕在Java 1.1中使用的新事件模型：老的事件模型是糟糕的、笨拙的、非面向对象的，而新的事件模型可能是我所见过的最优秀的。难以理解一个如此糟糕的（老的AWT）和一个如此优秀的（新的事件模型）程序语言居然出自同一个集团之手。新的考虑事件的方法看来中止了，因此争议不再变成障碍，从而轻易进入我们的意识里；相反，它是一个帮助我们设计系统的工具。它同样是Java Beans的精华，我们会在本章后面部分进入讲述。")]),e._v(" "),t("p",[e._v("新的方法设计对象做为“事件源”和“事件接收器”以代替老AWT的非面向对象串联的条件语句。正象我们将看到的内部类的用途是集成面向对象的原始状态的新事件。另外，事件现在被描绘为在一个类体系以取代单一的类并且我们可以创建自己的事件类型。")]),e._v(" "),t("p",[e._v("我们同样会发现，如果我们采用老的AWT编程，Java 1.1版会产生一些看起来不合理的名字转换。例如，"),t("code",[e._v("setsize()")]),e._v("改成"),t("code",[e._v("resize()")]),e._v("。当我们学习Java Beans时这会变得更加的合理，因为Beans使用一个独特的命名协议。名字必须被修改以在Beans中产生新的标准AWT组件。")]),e._v(" "),t("p",[e._v("剪贴板操作在Java 1.1版中也得到支持，尽管拖放操作“将在新版本中被支持”。我们可能访问桌面色彩组织，所以我们的Java可以同其余桌面保持一致。可以利用弹出式菜单，并且为图像和图形作了改进。也同样支持鼠标操作。还有简单的为打印的API以及简单地支持滚动。")]),e._v(" "),t("h2",{attrs:{id:"_13-16-1-新的事件模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-1-新的事件模型"}},[e._v("#")]),e._v(" 13.16.1 新的事件模型")]),e._v(" "),t("p",[e._v("在新的事件模型的组件可以开始一个事件。每种类型的事件被一个个别的类所描绘。当事件开始后，它受理一个或更多事件指明“接收器”。因此，事件源和处理事件的地址可以被分离。")]),e._v(" "),t("p",[e._v("每个事件接收器都是执行特定的接收器类型接口的类对象。因此作为一个程序开发者，我们所要做的是创建接收器对象并且在被激活事件的组件中进行注册。"),t("code",[e._v("event-firing")]),e._v("组件调用一个"),t("code",[e._v("addXXXListener()")]),e._v("方法来完成注册，以描述"),t("code",[e._v("XXX")]),e._v("事件类型接受。我们可以容易地了解到以"),t("code",[e._v("addListened")]),e._v("名的方法通知我们任何的事件类型都可以被处理，如果我们试图接收事件我们会发现编译时我们的错误。Java Beans同样使用这种"),t("code",[e._v("addListener")]),e._v("名的方法去判断那一个程序可以运行。")]),e._v(" "),t("p",[e._v("我们所有的事件逻辑将装入到一个接收器类中。当我们创建一个接收器类时唯一的一点限制是必须执行专用的接口。我们可以创建一个全局接收器类，这种情况在内部类中有助于被很好地使用，不仅仅是因为它们提供了一个理论上的接收器类组到它们服务的UI或业务逻辑类中，但因为（正像我们将会在本章后面看到的）事实是一个内部类维持一个引用到它的父对象，提供了一个很好的通过类和子系统边界的调用方法。")]),e._v(" "),t("p",[e._v("一个简单的例子将使这一切变得清晰明确。同时思考本章前部"),t("code",[e._v("Button2.java")]),e._v("例子与这个例子的差异。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Button2New.java\n// Capturing button presses\nimport java.awt.*;\nimport java.awt.event.*; // Must add this\nimport java.applet.*;\n\npublic class Button2New extends Applet {\n  Button\n    b1 = new Button("Button 1"),\n    b2 = new Button("Button 2");\n  public void init() {\n    b1.addActionListener(new B1());\n    b2.addActionListener(new B2());\n    add(b1);\n    add(b2);\n  }\n  class B1 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      getAppletContext().showStatus("Button 1");\n    }\n  }\n  class B2 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      getAppletContext().showStatus("Button 2");\n    }\n  }\n  /* The old way:\n  public boolean action(Event evt, Object arg) {\n    if(evt.target.equals(b1))\n      getAppletContext().showStatus("Button 1");\n    else if(evt.target.equals(b2))\n      getAppletContext().showStatus("Button 2");\n    // Let the base class handle it:\n    else\n      return super.action(evt, arg);\n    return true; // We\'ve handled it here\n  }\n  */\n} ///:~\n')])])]),t("p",[e._v("我们可比较两种方法，老的代码在左面作为注解。在"),t("code",[e._v("init()")]),e._v("方法里，只有一个改变就是增加了下面的两行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("b1.addActionListener(new B1());\nb2.addActionListener(new B2());\n")])])]),t("p",[e._v("按钮按下时，"),t("code",[e._v("addActionListener()")]),e._v("通知按钮对象被激活。"),t("code",[e._v("B1")]),e._v("和"),t("code",[e._v("B2")]),e._v("类都是执行接口"),t("code",[e._v("ActionListener")]),e._v("的内部类。这个接口包括一个单一的方法"),t("code",[e._v("actionPerformed()")]),e._v("（这意味着当事件激活时，这个动作将被执行）。注意"),t("code",[e._v("actionPreformed()")]),e._v("方法不是一个普通事件，说得更恰当些是一个特殊类型的事件，"),t("code",[e._v("ActionEvent")]),e._v("。如果我们想提取特殊"),t("code",[e._v("ActionEvent")]),e._v("的信息，因此我们不需要故意去测试和向下转换参数。")]),e._v(" "),t("p",[e._v("对编程者来说一个最好的事便是"),t("code",[e._v("actionPerformed()")]),e._v("十分的简单易用。它是一个可以调用的方法。同老的"),t("code",[e._v("action()")]),e._v("方法比较，老的方法我们必须指出发生了什么和适当的动作，同样，我们会担心调用基类"),t("code",[e._v("action()")]),e._v("的版本并且返回一个值去指明是否被处理。在新的事件模型中，我们知道所有事件测试推理自动进行，因此我们不必指出发生了什么；我们刚刚表示发生了什么，它就自动地完成了。如果我们还没有提出用新的方法覆盖老的方法，我们会很快提出。")]),e._v(" "),t("h2",{attrs:{id:"_13-16-2-事件和接收者类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-2-事件和接收者类型"}},[e._v("#")]),e._v(" 13.16.2 事件和接收者类型")]),e._v(" "),t("p",[e._v("所有AWT组件都被改变成包含"),t("code",[e._v("addXXXListener()")]),e._v("和"),t("code",[e._v("removeXXXListener()")]),e._v("方法，因此特定的接收器类型可从每个组件中增加和删除。我们会注意到"),t("code",[e._v("XXX")]),e._v("在每个场合中同样表示参数的方法，例如，"),t("code",[e._v("addFooListener(FooListener fl)")]),e._v("。下面这张表格总结了通过提供"),t("code",[e._v("addXXXListener()")]),e._v("和"),t("code",[e._v("removeXXXListener()")]),e._v("方法，从而支持那些特定事件的相关事件、接收器、方法以及组件。")]),e._v(" "),t("ul",[t("li",[e._v("事件，接收器接口及添加和删除方法\n"),t("ul",[t("li",[e._v("支持这个事件的组件")])])]),e._v(" "),t("li",[t("code",[e._v("ActionEvent")])]),e._v(" "),t("li",[t("code",[e._v("ActionListener")])]),e._v(" "),t("li",[t("code",[e._v("addActionListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeActionListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Button")]),e._v(", "),t("code",[e._v("List")]),e._v(", "),t("code",[e._v("TextField")]),e._v(", "),t("code",[e._v("MenuItem")]),e._v(", and its derivatives including "),t("code",[e._v("CheckboxMenuItem")]),e._v(", "),t("code",[e._v("Menu")]),e._v(", and "),t("code",[e._v("PopupMenu")])])])]),e._v(" "),t("li",[t("code",[e._v("AdjustmentEvent")])]),e._v(" "),t("li",[t("code",[e._v("AdjustmentListener")])]),e._v(" "),t("li",[t("code",[e._v("addAdjustmentListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeAdjustmentListener( )")])]),e._v(" "),t("li",[t("code",[e._v("Scrollbar")]),e._v(" "),t("ul",[t("li",[e._v("Anything you create that implements the "),t("code",[e._v("Adjustable")]),e._v(" interface")])])]),e._v(" "),t("li",[t("code",[e._v("ComponentEvent")])]),e._v(" "),t("li",[t("code",[e._v("ComponentListener")])]),e._v(" "),t("li",[t("code",[e._v("addComponentListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeComponentListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Component")]),e._v(" and its derivatives, including "),t("code",[e._v("Button")]),e._v(", "),t("code",[e._v("Canvas")]),e._v(", "),t("code",[e._v("Checkbox")]),e._v(", "),t("code",[e._v("Choice")]),e._v(", "),t("code",[e._v("Container")]),e._v(", "),t("code",[e._v("Panel")]),e._v(", "),t("code",[e._v("Applet")]),e._v(", "),t("code",[e._v("ScrollPane")]),e._v(", "),t("code",[e._v("Window")]),e._v(", "),t("code",[e._v("Dialog")]),e._v(", "),t("code",[e._v("FileDialog")]),e._v(", "),t("code",[e._v("Frame")]),e._v(", "),t("code",[e._v("Label")]),e._v(", "),t("code",[e._v("List")]),e._v(", "),t("code",[e._v("Scrollbar")]),e._v(", "),t("code",[e._v("TextArea")]),e._v(", and "),t("code",[e._v("TextField")])])])]),e._v(" "),t("li",[t("code",[e._v("ContainerEvent")])]),e._v(" "),t("li",[t("code",[e._v("ContainerListener")])]),e._v(" "),t("li",[t("code",[e._v("addContainerListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeContainerListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Container")]),e._v(" and its derivatives, including "),t("code",[e._v("Panel")]),e._v(", "),t("code",[e._v("Applet")]),e._v(", "),t("code",[e._v("ScrollPane")]),e._v(", "),t("code",[e._v("Window")]),e._v(", "),t("code",[e._v("Dialog")]),e._v(", "),t("code",[e._v("FileDialog")]),e._v(", and "),t("code",[e._v("Frame")])])])]),e._v(" "),t("li",[t("code",[e._v("FocusEvent")])]),e._v(" "),t("li",[t("code",[e._v("FocusListener")])]),e._v(" "),t("li",[t("code",[e._v("addFocusListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeFocusListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Component")]),e._v(" and its derivatives, including "),t("code",[e._v("Button")]),e._v(", "),t("code",[e._v("Canvas")]),e._v(", "),t("code",[e._v("Checkbox")]),e._v(", "),t("code",[e._v("Choice")]),e._v(", "),t("code",[e._v("Container")]),e._v(", "),t("code",[e._v("Panel")]),e._v(", "),t("code",[e._v("Applet")]),e._v(", "),t("code",[e._v("ScrollPane")]),e._v(", "),t("code",[e._v("Window")]),e._v(", "),t("code",[e._v("Dialog")]),e._v(", "),t("code",[e._v("FileDialog")]),e._v(", "),t("code",[e._v("Frame ``Label")]),e._v(", "),t("code",[e._v("List")]),e._v(", "),t("code",[e._v("Scrollbar")]),e._v(", "),t("code",[e._v("TextArea")]),e._v(", "),t("code",[e._v("and ``TextField")])])])]),e._v(" "),t("li",[t("code",[e._v("KeyEvent")])]),e._v(" "),t("li",[t("code",[e._v("KeyListener")])]),e._v(" "),t("li",[t("code",[e._v("addKeyListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeKeyListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Component")]),e._v(" and its derivatives, including "),t("code",[e._v("Button")]),e._v(", "),t("code",[e._v("Canvas")]),e._v(", "),t("code",[e._v("Checkbox")]),e._v(", "),t("code",[e._v("Choice")]),e._v(", "),t("code",[e._v("Container")]),e._v(", "),t("code",[e._v("Panel")]),e._v(", "),t("code",[e._v("Applet")]),e._v(", "),t("code",[e._v("ScrollPane")]),e._v(", "),t("code",[e._v("Window")]),e._v(", "),t("code",[e._v("Dialog")]),e._v(", "),t("code",[e._v("FileDialog")]),e._v(", "),t("code",[e._v("Frame")]),e._v(", "),t("code",[e._v("Label")]),e._v(", "),t("code",[e._v("List")]),e._v(", "),t("code",[e._v("Scrollbar")]),e._v(", "),t("code",[e._v("TextArea")]),e._v(", and "),t("code",[e._v("TextField")])])])]),e._v(" "),t("li",[t("code",[e._v("MouseEvent")]),e._v("("),t("code",[e._v("for ``both ``clicks ``and ``motion")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("MouseListener")])]),e._v(" "),t("li",[t("code",[e._v("addMouseListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeMouseListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Component")]),e._v(" and its derivatives, including "),t("code",[e._v("Button")]),e._v(", "),t("code",[e._v("Canvas")]),e._v(", "),t("code",[e._v("Checkbox")]),e._v(", "),t("code",[e._v("Choice")]),e._v(", "),t("code",[e._v("Container")]),e._v(", "),t("code",[e._v("Panel")]),e._v(", "),t("code",[e._v("Applet")]),e._v(", "),t("code",[e._v("ScrollPane")]),e._v(", "),t("code",[e._v("Window")]),e._v(", "),t("code",[e._v("Dialog")]),e._v(", "),t("code",[e._v("FileDialog")]),e._v(", "),t("code",[e._v("Frame")]),e._v(", "),t("code",[e._v("Label")]),e._v(", "),t("code",[e._v("List")]),e._v(", "),t("code",[e._v("Scrollbar")]),e._v(", "),t("code",[e._v("TextArea")]),e._v(", and "),t("code",[e._v("TextField")])])])]),e._v(" "),t("li",[t("code",[e._v("MouseEvent")]),e._v("["),t("code",[e._v("55")]),e._v("] ("),t("code",[e._v("for ``both ``clicks ``and ``motion")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("MouseMotionListener")])]),e._v(" "),t("li",[t("code",[e._v("addMouseMotionListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeMouseMotionListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Component")]),e._v(" and its derivatives, including "),t("code",[e._v("Button")]),e._v(", "),t("code",[e._v("Canvas")]),e._v(", "),t("code",[e._v("Checkbox")]),e._v(", "),t("code",[e._v("Choice")]),e._v(", "),t("code",[e._v("Container")]),e._v(", "),t("code",[e._v("Panel")]),e._v(", "),t("code",[e._v("Applet")]),e._v(", "),t("code",[e._v("ScrollPane")]),e._v(", "),t("code",[e._v("Window")]),e._v(", "),t("code",[e._v("Dialog")]),e._v(", "),t("code",[e._v("FileDialog")]),e._v(", "),t("code",[e._v("Frame")]),e._v(", "),t("code",[e._v("Label")]),e._v(", "),t("code",[e._v("List")]),e._v(", "),t("code",[e._v("Scrollbar")]),e._v(", "),t("code",[e._v("TextArea")]),e._v(", and "),t("code",[e._v("TextField")])])])]),e._v(" "),t("li",[t("code",[e._v("WindowEvent")])]),e._v(" "),t("li",[t("code",[e._v("WindowListener")])]),e._v(" "),t("li",[t("code",[e._v("addWindowListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeWindowListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Window")]),e._v(" and its derivatives, including "),t("code",[e._v("Dialog")]),e._v(", "),t("code",[e._v("FileDialog")]),e._v(", and "),t("code",[e._v("Frame")])])])]),e._v(" "),t("li",[t("code",[e._v("ItemEvent")])]),e._v(" "),t("li",[t("code",[e._v("ItemListener")])]),e._v(" "),t("li",[t("code",[e._v("addItemListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeItemListener( )")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Checkbox")]),e._v(", "),t("code",[e._v("CheckboxMenuItem")]),e._v(", "),t("code",[e._v("Choice")]),e._v(", "),t("code",[e._v("List")]),e._v(", and anything that implements the "),t("code",[e._v("ItemSelectable")]),e._v(" interface")])])]),e._v(" "),t("li",[t("code",[e._v("TextEvent")])]),e._v(" "),t("li",[t("code",[e._v("TextListener")])]),e._v(" "),t("li",[t("code",[e._v("addTextListener( )")])]),e._v(" "),t("li",[t("code",[e._v("removeTextListener( )")]),e._v(" "),t("ul",[t("li",[e._v("Anything derived from "),t("code",[e._v("TextComponent")]),e._v(", including "),t("code",[e._v("TextArea")]),e._v(" and "),t("code",[e._v("TextField")])])])])]),e._v(" "),t("p",[e._v("⑤：即使表面上如此，但实际上并没有"),t("code",[e._v("MouseMotiionEvent")]),e._v("（鼠标运动事件）。单击和运动都组合到"),t("code",[e._v("MouseEvent")]),e._v("里，所以"),t("code",[e._v("MouseEvent")]),e._v("在表格中的这种另类行为并非一个错误。")]),e._v(" "),t("p",[e._v("可以看到，每种类型的组件只为特定类型的事件提供了支持。这有助于我们发现由每种组件支持的事件，如下表所示：")]),e._v(" "),t("ul",[t("li",[e._v("组件类型\n"),t("ul",[t("li",[e._v("支持的事件")])])]),e._v(" "),t("li",[t("code",[e._v("Adjustable")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("AdjustmentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Applet")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Button")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ActionEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Canvas")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Checkbox")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ItemEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("CheckboxMenuItem")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ActionEvent")]),e._v(", "),t("code",[e._v("ItemEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Choice")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ItemEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Component")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Container")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Dialog")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("WindowEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("FileDialog")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("WindowEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Frame")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("WindowEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Label")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("List")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ActionEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ItemEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Menu")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ActionEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("MenuItem")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ActionEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Panel")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("PopupMenu")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ActionEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Scrollbar")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("AdjustmentEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("ScrollPane")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("TextArea")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TextEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("TextComponent")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TextEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("TextField")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ActionEvent")]),e._v(", "),t("code",[e._v("TextEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])]),e._v(" "),t("li",[t("code",[e._v("Window")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ContainerEvent")]),e._v(", "),t("code",[e._v("WindowEvent")]),e._v(", "),t("code",[e._v("FocusEvent")]),e._v(", "),t("code",[e._v("KeyEvent")]),e._v(", "),t("code",[e._v("MouseEvent")]),e._v(", "),t("code",[e._v("ComponentEvent")])])])])]),e._v(" "),t("p",[e._v("一旦知道了一个特定的组件支持哪些事件，就不必再去寻找任何东西来响应那个事件。只需简单地：")]),e._v(" "),t("p",[e._v("(1) 取得事件类的名字，并删掉其中的"),t("code",[e._v("Event")]),e._v("字样。在剩下的部分加入"),t("code",[e._v("Listener")]),e._v("字样。这就是在我们的内部类里需要实现的接收器接口。")]),e._v(" "),t("p",[e._v("(2) 实现上面的接口，针对想要捕获的事件编写方法代码。例如，假设我们想捕获鼠标的移动，所以需要为"),t("code",[e._v("MouseMotiionListener")]),e._v("接口的"),t("code",[e._v("mouseMoved()")]),e._v("方法编写代（当然还必须实现其他一些方法，但这里有捷径可循，马上就会讲到这个问题）。")]),e._v(" "),t("p",[e._v("(3) 为步骤2中的接收器类创建一个对象。随自己的组件和方法完成对它的注册，方法是在接收器的名字里加入一个前缀"),t("code",[e._v("add")]),e._v("。比如"),t("code",[e._v("addMouseMotionListener()")]),e._v("。")]),e._v(" "),t("p",[e._v("下表是对接收器接口的一个总结：")]),e._v(" "),t("ul",[t("li",[e._v("接收器接口\n"),t("ul",[t("li",[e._v("接口中的方法")])])]),e._v(" "),t("li",[t("code",[e._v("ActionListener")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("actionPerformed(ActionEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("AdjustmentListener")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("adjustmentValueChanged(AdjustmentEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("ComponentListener")])]),e._v(" "),t("li",[t("code",[e._v("ComponentAdapter")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("componentHidden(ComponentEvent)")])]),e._v(" "),t("li",[t("code",[e._v("componentShown(ComponentEvent)")])]),e._v(" "),t("li",[t("code",[e._v("componentMoved(ComponentEvent)")])]),e._v(" "),t("li",[t("code",[e._v("componentResized(ComponentEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("ContainerListener")])]),e._v(" "),t("li",[t("code",[e._v("ContainerAdapter")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("componentAdded(ContainerEvent)")])]),e._v(" "),t("li",[t("code",[e._v("componentRemoved(ContainerEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("FocusListener")])]),e._v(" "),t("li",[t("code",[e._v("FocusAdapter")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("focusGained(FocusEvent)")])]),e._v(" "),t("li",[t("code",[e._v("focusLost(FocusEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("KeyListener")])]),e._v(" "),t("li",[t("code",[e._v("KeyAdapter")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("keyPressed(KeyEvent)")])]),e._v(" "),t("li",[t("code",[e._v("keyReleased(KeyEvent)")])]),e._v(" "),t("li",[t("code",[e._v("keyTyped(KeyEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("MouseListener")])]),e._v(" "),t("li",[t("code",[e._v("MouseAdapter")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("mouseClicked(MouseEvent)")])]),e._v(" "),t("li",[t("code",[e._v("mouseEntered(MouseEvent)")])]),e._v(" "),t("li",[t("code",[e._v("mouseExited(MouseEvent)")])]),e._v(" "),t("li",[t("code",[e._v("mousePressed(MouseEvent)")])]),e._v(" "),t("li",[t("code",[e._v("mouseReleased(MouseEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("MouseMotionListener")])]),e._v(" "),t("li",[t("code",[e._v("MouseMotionAdapter")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("mouseDragged(MouseEvent)")])]),e._v(" "),t("li",[t("code",[e._v("mouseMoved(MouseEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("WindowListener")])]),e._v(" "),t("li",[t("code",[e._v("WindowAdapter")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("windowOpened(WindowEvent)")])]),e._v(" "),t("li",[t("code",[e._v("windowClosing(WindowEvent)")])]),e._v(" "),t("li",[t("code",[e._v("windowClosed(WindowEvent)")])]),e._v(" "),t("li",[t("code",[e._v("windowActivated(WindowEvent)")])]),e._v(" "),t("li",[t("code",[e._v("windowDeactivated(WindowEvent)")])]),e._v(" "),t("li",[t("code",[e._v("windowIconified(WindowEvent)")])]),e._v(" "),t("li",[t("code",[e._v("windowDeiconified(WindowEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("ItemListener")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("itemStateChanged(ItemEvent)")])])])]),e._v(" "),t("li",[t("code",[e._v("TextListener")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("textValueChanged(TextEvent)")])])])])]),e._v(" "),t("p",[e._v("(1) 用接收器适配器简化操作")]),e._v(" "),t("p",[e._v("在上面的表格中，我们可以注意到一些接收器接口只有唯一的一个方法。它们的执行是无轻重的，因为我们仅当需要书写特殊方法时才会执行它们。然而，接收器接口拥有多个方法，使用起来却不太友好。例如，我们必须一直运行某些事物，当我们创建一个应用程序时对帧提供一个"),t("code",[e._v("WindowListener")]),e._v("，以便当我们得到"),t("code",[e._v("windowClosing()")]),e._v("事件时可以调用"),t("code",[e._v("System.exit(0)")]),e._v("以退出应用程序。但因为"),t("code",[e._v("WindowListener")]),e._v("是一个接口，我们必须执行其它所有的方法即使它们不运行任何事件。这真令人讨厌。")]),e._v(" "),t("p",[e._v("为了解决这个问题，每个拥有超过一个方法的接收器接口都可拥有适配器，它们的名我们可以在上面的表格中看到。每个适配器为每个接口方法提供默认的方法。（"),t("code",[e._v("WindowAdapter")]),e._v("的默认方法不是"),t("code",[e._v("windowClosing()")]),e._v("，而是"),t("code",[e._v("System.exit(0)")]),e._v("方法。）此外我们所要做的就是从适配器处继承并重载唯一的需要变更的方法。例如，典型的"),t("code",[e._v("WindowListener")]),e._v("我们会像下面这样的使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class MyWindowListener extends WindowAdapter {\n  public void windowClosing(WindowEvent e) {\n    System.exit(0);\n  }\n}\n")])])]),t("p",[e._v("适配器的全部宗旨就是使接收器的创建变得更加简便。\n但所谓的“适配器”也有一个缺点，而且较难发觉。假定我们象上面那样写一个"),t("code",[e._v("WindowAdapter")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class MyWindowListener extends WindowAdapter {\n  public void WindowClosing(WindowEvent e) {\n    System.exit(0);\n  }\n}\n")])])]),t("p",[e._v("表面上一切正常，但实际没有任何效果。每个事件的编译和运行都很正常——只是关闭窗口不会退出程序。您注意到问题在哪里吗？在方法的名字里：是"),t("code",[e._v("WindowClosing()")]),e._v("，而不是"),t("code",[e._v("windowClosing()")]),e._v("。大小写的一个简单失误就会造成一个崭新的方法。但是，这并非我们关闭窗口时调用的方法，所以当然没有任何效果。")]),e._v(" "),t("h2",{attrs:{id:"_13-16-3-用java-1-1-awt制作窗口和程序片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-3-用java-1-1-awt制作窗口和程序片"}},[e._v("#")]),e._v(" 13.16.3 用Java 1.1 AWT制作窗口和程序片")]),e._v(" "),t("p",[e._v("我们经常都需要创建一个类，使其既可作为一个窗口调用，亦可作为一个程序片调用。为做到这一点，只需为程序片简单地加入一个m"),t("code",[e._v("ain()")]),e._v("即可，令其在一个"),t("code",[e._v("Frame")]),e._v("（帧）里构建程序片的一个实例。作为一个简单的示例，下面让我们来看看如何对"),t("code",[e._v("Button2New.java")]),e._v("作一番修改，使其能同时作为应用程序和程序片使用：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Button2NewB.java\n// An application and an applet\nimport java.awt.*;\nimport java.awt.event.*; // Must add this\nimport java.applet.*;\n\npublic class Button2NewB extends Applet {\n  Button\n    b1 = new Button("Button 1"),\n    b2 = new Button("Button 2");\n  TextField t = new TextField(20);\n  public void init() {\n    b1.addActionListener(new B1());\n    b2.addActionListener(new B2());\n    add(b1);\n    add(b2);\n    add(t);\n  }\n  class B1 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t.setText("Button 1");\n    }\n  }\n  class B2 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t.setText("Button 2");\n    }\n  }\n  // To close the application:\n  static class WL extends WindowAdapter {\n    public void windowClosing(WindowEvent e) {\n      System.exit(0);\n    }\n  }\n  // A main() for the application:\n  public static void main(String[] args) {\n    Button2NewB applet = new Button2NewB();\n    Frame aFrame = new Frame("Button2NewB");\n    aFrame.addWindowListener(new WL());\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("内部类"),t("code",[e._v("WL")]),e._v("和"),t("code",[e._v("main()")]),e._v("方法是加入程序片的唯一两个元素，程序片剩余的部分则原封未动。事实上，我们通常将"),t("code",[e._v("WL")]),e._v("类和"),t("code",[e._v("main()")]),e._v("方法做一结小的改进复制和粘贴到我们自己的程序片里（请记住创建内部类时通常需要一个外部类来处理它，形成它静态地消除这个需要）。我们可以看到在"),t("code",[e._v("main()")]),e._v("方法里，程序片明确地初始化和开始，因为在这个例子里浏览器不能为我们有效地运行它。当然，这不会提供全部的浏览器调用"),t("code",[e._v("stop()")]),e._v("和"),t("code",[e._v("destroy()")]),e._v("的行为，但对大多数的情况而言它都是可接受的。如果它变成一个麻烦，我们可以：")]),e._v(" "),t("p",[e._v("(1) 使程序片引用为一个静态类（以代替局部可变的"),t("code",[e._v("main()")]),e._v("），然后：")]),e._v(" "),t("p",[e._v("(2) 在我们调用"),t("code",[e._v("System.exit()")]),e._v("之前在"),t("code",[e._v("WindowAdapter.windowClosing()")]),e._v("中调用"),t("code",[e._v("applet.stop()")]),e._v("和"),t("code",[e._v("applet.destroy()")]),e._v("。")]),e._v(" "),t("p",[e._v("注意最后一行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("aFrame.setVisible(true);\n")])])]),t("p",[e._v("这是Java 1.1 AWT的一个改变。"),t("code",[e._v("show()")]),e._v("方法不再被支持，而"),t("code",[e._v("setVisible(true)")]),e._v("则取代了"),t("code",[e._v("show()")]),e._v("方法。当我们在本章后面部分学习Java Beans时，这些表面上易于改变的方法将会变得更加的合理。")]),e._v(" "),t("p",[e._v("这个例子同样被使用"),t("code",[e._v("TextField")]),e._v("修改而不是显示到控制台或浏览器状态行上。在开发程序时有一个限制条件就是程序片和应用程序我们都必须根据它们的运行情况选择输入和输出结构。")]),e._v(" "),t("p",[e._v("这里展示了Java 1.1 AWT的其它小的新功能。我们不再需要去使用有错误倾向的利用字符串指定"),t("code",[e._v("BorderLayout")]),e._v("定位的方法。当我们增加一个元素到Java 1.1版的"),t("code",[e._v("BorderLayout")]),e._v("中时，我们可以这样写：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("aFrame.add(applet, BorderLayout.CENTER);\n")])])]),t("p",[e._v("我们对位置规定一个"),t("code",[e._v("BorderLayout")]),e._v("的常数，以使它能在编译时被检验（而不是对老的结构悄悄地做不合适的事）。这是一个显著的改善，并且将在这本书的余下部分大量地使用。")]),e._v(" "),t("p",[e._v("(2) 将窗口接收器变成匿名类")]),e._v(" "),t("p",[e._v("任何一个接收器类都可作为一个匿名类执行，但这一直有个意外，那就是我们可能需要在其它场合使用它们的功能。但是，窗口接收器在这里仅作为关闭应用程序窗口来使用，因此我们可以安全地制造一个匿名类。然后，"),t("code",[e._v("main()")]),e._v("中的下面这行代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("aFrame.addWindowListener(new WL());\n")])])]),t("p",[e._v("会变成：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("aFrame.addWindowListener(\n  new WindowAdapter() {\n    public void windowClosing(WindowEvent e) {\n      System.exit(0);\n    }\n  });\n")])])]),t("p",[e._v("这有一个优点就是它不需要其它的类名。我们必须对自己判断是否它使代码变得易于理解或者更难。不过，对本书余下部分而言，匿名内部类将通常被使用在窗口接收器中。")]),e._v(" "),t("p",[e._v("(3) 将程序片封装到JAR文件里")]),e._v(" "),t("p",[e._v("一个重要的JAR应用就是完善程序片的装载。在Java 1.0版中，人们倾向于试法将它们的代码填入到单个的程序片类里，因此客户只需要单个的服务器就可适合下载程序片代码。但这不仅使结果凌乱，难以阅读（当然维护也然）程序，但类文件一直不能压缩，因此下载从来没有快过。")]),e._v(" "),t("p",[e._v("JAR文件将我们所有的被压缩的类文件打包到一个单个儿的文件中，再被浏览器下载。现在我们不需要创建一个糟糕的设计以最小化我们创建的类，并且用户将得到更快地下载速度。")]),e._v(" "),t("p",[e._v("仔细想想上面的例子，这个例子看起来像"),t("code",[e._v("Button2NewB")]),e._v("，是一个单类，但事实上它包含三个内部类，因此共有四个。每当我们编译程序，我会用这行代码打包它到一个JAR文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("jar cf Button2NewB.jar *.class\n")])])]),t("p",[e._v("这是假定只有一个类文件在当前目录中，其中之一来自"),t("code",[e._v("Button2NewB.java")]),e._v("（否则我们会得到特别的打包）。")]),e._v(" "),t("p",[e._v("现在我们可以创建一个使用新文件标签来指定JAR文件的HTML页，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<head><title>Button2NewB Example Applet\n</title></head>\n<body>\n<applet code="Button2NewB.class"\n        archive="Button2NewB.jar"\n        width=200 height=150>\n</applet>\n</body>\n')])])]),t("p",[e._v("与HTML文件中的程序片标记有关的其他任何内容都保持不变。")]),e._v(" "),t("h2",{attrs:{id:"_13-16-4-再研究一下以前的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-4-再研究一下以前的例子"}},[e._v("#")]),e._v(" 13.16.4 再研究一下以前的例子")]),e._v(" "),t("p",[e._v("为注意到一些利用新事件模型的例子和为学习程序从老到新事件模型改变的方法，下面的例子回到在本章第一部分利用事件模型来证明的一些争议。另外，每个程序包括程序片和应用程序现在都可以借助或不借助浏览器来运行。")]),e._v(" "),t("p",[e._v("(1) 文本字段")]),e._v(" "),t("p",[e._v("这个例子同"),t("code",[e._v("TextField1.java")]),e._v("相似，但它增加了显然额外的行为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: TextNew.java\n// Text fields with Java 1.1 events\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class TextNew extends Applet {\n  Button\n    b1 = new Button("Get Text"),\n    b2 = new Button("Set Text");\n  TextField\n    t1 = new TextField(30),\n    t2 = new TextField(30),\n    t3 = new TextField(30);\n  String s = new String();\n  public void init() {\n    b1.addActionListener(new B1());\n    b2.addActionListener(new B2());\n    t1.addTextListener(new T1());\n    t1.addActionListener(new T1A());\n    t1.addKeyListener(new T1K());\n    add(b1);\n    add(b2);\n    add(t1);\n    add(t2);\n    add(t3);\n  }\n  class T1 implements TextListener {\n    public void textValueChanged(TextEvent e) {\n      t2.setText(t1.getText());\n    }\n  }\n  class T1A implements ActionListener {\n    private int count = 0;\n    public void actionPerformed(ActionEvent e) {\n      t3.setText("t1 Action Event " + count++);\n    }\n  }\n  class T1K extends KeyAdapter {\n    public void keyTyped(KeyEvent e) {\n      String ts = t1.getText();\n      if(e.getKeyChar() ==\n          KeyEvent.VK_BACK_SPACE) {\n        // Ensure it\'s not empty:\n        if( ts.length() > 0) {\n          ts = ts.substring(0, ts.length() - 1);\n          t1.setText(ts);\n        }\n      }\n      else\n        t1.setText(\n          t1.getText() +\n            Character.toUpperCase(\n              e.getKeyChar()));\n      t1.setCaretPosition(\n        t1.getText().length());\n      // Stop regular character from appearing:\n      e.consume();\n    }\n  }\n  class B1 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      s = t1.getSelectedText();\n      if(s.length() == 0) s = t1.getText();\n      t1.setEditable(true);\n    }\n  }\n  class B2 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t1.setText("Inserted by Button 2: " + s);\n      t1.setEditable(false);\n    }\n  }\n  public static void main(String[] args) {\n    TextNew applet = new TextNew();\n    Frame aFrame = new Frame("TextNew");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("当"),t("code",[e._v("TextField t1")]),e._v("的动作接收器被激活时，"),t("code",[e._v("TextField t3")]),e._v("就是一个需要报告的场所。我们注意到仅当我们按下"),t("code",[e._v("enter")]),e._v("键时，动作接收器才会为"),t("code",[e._v("TextField")]),e._v("所激活。")]),e._v(" "),t("p",[t("code",[e._v("TextField t1")]),e._v("附有几个接收器。"),t("code",[e._v("T1")]),e._v("接收器从"),t("code",[e._v("t1")]),e._v("复制所有文字到"),t("code",[e._v("t2")]),e._v("，强制所有字符串转换成大写。我们会发现这两个工作同是进行的，并且如果我们增加"),t("code",[e._v("T1K")]),e._v("接收器后我们再增加"),t("code",[e._v("T1")]),e._v("接收器，它就不那么重要：在文字字段内的所有的字符串将一直被强制变为大写。这看起来键盘事件一直在文字组件事件前被激活，并且如果我们需要保留"),t("code",[e._v("t2")]),e._v("的字符串原来输入时的样子，我们就必须做一些特别的工作。")]),e._v(" "),t("p",[t("code",[e._v("T1K")]),e._v("有着其它的一些有趣的活动。我们必须测试"),t("code",[e._v("backspace")]),e._v("（因为我们现在控制着每一个事件）并执行删除。"),t("code",[e._v("caret")]),e._v("必须被明确地设置到字段的结尾；否则它不会像我们希望的运行。最后，为了防止原来的字符串被默认的机制所处理，事件必须利用为事件对象而存在的"),t("code",[e._v("consume()")]),e._v("方法所“耗尽”。这会通知系统停止激活其余特殊事件的事件处理器。")]),e._v(" "),t("p",[e._v("这个例子同样无声地证明了设计内部类的带来的诸多优点。注意下面的内部类：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  class T1 implements TextListener {\n    public void textValueChanged(TextEvent e) {\n      t2.setText(t1.getText());\n    }\n  }\n")])])]),t("p",[t("code",[e._v("t1")]),e._v("和"),t("code",[e._v("t2")]),e._v("不属于"),t("code",[e._v("T1")]),e._v("的一部分，并且到目前为止它们都是很容易理解的，没有任何的特殊限制。这是因为一个内部类的对象能自动地捕捉一个引用到外部的创建它的对象那里，因此我们可以处理封装类对象的方法和内容。正像我们看到的，这十分方便（注释⑥）。")]),e._v(" "),t("p",[e._v("⑥：它也解决了“回调”的问题，不必为Java加入任何令人恼火的“方法指针”特性。")]),e._v(" "),t("p",[e._v("(2) 文本区域")]),e._v(" "),t("p",[e._v("Java 1.1版中"),t("code",[e._v("Text Area")]),e._v("最重要的改变就滚动条。对于"),t("code",[e._v("TextArea")]),e._v("的构造器而言，我们可以立即控制"),t("code",[e._v("TextArea")]),e._v("是否会拥有滚动条：水平的，垂直的，两者都有或者都没有。这个例子更正了前面Java 1.0版"),t("code",[e._v("TextArea1.java")]),e._v("程序片，演示了Java 1.1版的滚动条构造器：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: TextAreaNew.java\n// Controlling scrollbars with the TextArea\n// component in Java 1.1\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class TextAreaNew extends Applet {\n  Button b1 = new Button("Text Area 1");\n  Button b2 = new Button("Text Area 2");\n  Button b3 = new Button("Replace Text");\n  Button b4 = new Button("Insert Text");\n  TextArea t1 = new TextArea("t1", 1, 30);\n  TextArea t2 = new TextArea("t2", 4, 30);\n  TextArea t3 = new TextArea("t3", 1, 30,\n    TextArea.SCROLLBARS_NONE);\n  TextArea t4 = new TextArea("t4", 10, 10,\n    TextArea.SCROLLBARS_VERTICAL_ONLY);\n  TextArea t5 = new TextArea("t5", 4, 30,\n    TextArea.SCROLLBARS_HORIZONTAL_ONLY);\n  TextArea t6 = new TextArea("t6", 10, 10,\n    TextArea.SCROLLBARS_BOTH);\n  public void init() {\n    b1.addActionListener(new B1L());\n    add(b1);\n    add(t1);\n    b2.addActionListener(new B2L());\n    add(b2);\n    add(t2);\n    b3.addActionListener(new B3L());\n    add(b3);\n    b4.addActionListener(new B4L());\n    add(b4);\n    add(t3); add(t4); add(t5); add(t6);\n  }\n  class B1L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t5.append(t1.getText() + "\\n");\n    }\n  }\n  class B2L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t2.setText("Inserted by Button 2");\n      t2.append(": " + t1.getText());\n      t5.append(t2.getText() + "\\n");\n    }\n  }\n  class B3L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      String s = " Replacement ";\n      t2.replaceRange(s, 3, 3 + s.length());\n    }\n  }\n  class B4L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t2.insert(" Inserted ", 10);\n    }\n  }\n  public static void main(String[] args) {\n    TextAreaNew applet = new TextAreaNew();\n    Frame aFrame = new Frame("TextAreaNew");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,725);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("我们发现只能在构造"),t("code",[e._v("TextArea")]),e._v("时能够控制滚动条。同样，即使"),t("code",[e._v("TE AR")]),e._v("没有滚动条，我们滚动光标也将被制止（可通过运行这个例子中验证这种行为）。")]),e._v(" "),t("p",[e._v("(3) 复选框和单选钮")]),e._v(" "),t("p",[e._v("正如早先指出的那样，复选框和单选钮都是同一个类建立的。单选钮和复选框略有不同，它是复选框安置到"),t("code",[e._v("CheckboxGroup")]),e._v("中构成的。在其中任一种情况下，有趣的"),t("code",[e._v("ItemEvent")]),e._v("事件为我们创建一个"),t("code",[e._v("ItemListener")]),e._v("项目接收器。")]),e._v(" "),t("p",[e._v("当处理一组复选框或者单选钮时，我们有一个不错的选择。我们可以创建一个新的内部类去为每个复选框处理事件，或者创建一个内部类判断哪个复选框被单击并注册一个内部类单独的对象为每个复选对象。下面的例子演示了两种方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: RadioCheckNew.java\n// Radio buttons and Check Boxes in Java 1.1\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class RadioCheckNew extends Applet {\n  TextField t = new TextField(30);\n  Checkbox[] cb = {\n    new Checkbox("Check Box 1"),\n    new Checkbox("Check Box 2"),\n    new Checkbox("Check Box 3") };\n  CheckboxGroup g = new CheckboxGroup();\n  Checkbox\n    cb4 = new Checkbox("four", g, false),\n    cb5 = new Checkbox("five", g, true),\n    cb6 = new Checkbox("six", g, false);\n  public void init() {\n    t.setEditable(false);\n    add(t);\n    ILCheck il = new ILCheck();\n    for(int i = 0; i < cb.length; i++) {\n      cb[i].addItemListener(il);\n      add(cb[i]);\n    }\n    cb4.addItemListener(new IL4());\n    cb5.addItemListener(new IL5());\n    cb6.addItemListener(new IL6());\n    add(cb4); add(cb5); add(cb6);\n  }\n  // Checking the source:\n  class ILCheck implements ItemListener {\n    public void itemStateChanged(ItemEvent e) {\n      for(int i = 0; i < cb.length; i++) {\n        if(e.getSource().equals(cb[i])) {\n          t.setText("Check box " + (i + 1));\n          return;\n        }\n      }\n    }\n  }\n  // vs. an individual class for each item:\n  class IL4 implements ItemListener {\n    public void itemStateChanged(ItemEvent e) {\n      t.setText("Radio button four");\n    }\n  }\n  class IL5 implements ItemListener {\n    public void itemStateChanged(ItemEvent e) {\n      t.setText("Radio button five");\n    }\n  }\n  class IL6 implements ItemListener {\n    public void itemStateChanged(ItemEvent e) {\n      t.setText("Radio button six");\n    }\n  }\n  public static void main(String[] args) {\n    RadioCheckNew applet = new RadioCheckNew();\n    Frame aFrame = new Frame("RadioCheckNew");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("ILCheck")]),e._v("拥有当我们增加或者减少复选框时自动调整的优点。当然，我们对单选钮使用这种方法也同样的好。但是，它仅当我们的逻辑足以普遍的支持这种方法时才会被使用。如果声明一个确定的信号——我们将重复利用独立的接收器类，否则我们将结束一串条件语句。")]),e._v(" "),t("p",[e._v("(4) 下拉列表")]),e._v(" "),t("p",[e._v("下拉列表在Java 1.1版中当一个选择被改变时同样使用"),t("code",[e._v("ItemListener")]),e._v("去告知我们：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: ChoiceNew.java\n// Drop-down lists with Java 1.1\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class ChoiceNew extends Applet {\n  String[] description = { "Ebullient", "Obtuse",\n    "Recalcitrant", "Brilliant", "Somnescent",\n    "Timorous", "Florid", "Putrescent" };\n  TextField t = new TextField(100);\n  Choice c = new Choice();\n  Button b = new Button("Add items");\n  int count = 0;\n  public void init() {\n    t.setEditable(false);\n    for(int i = 0; i < 4; i++)\n      c.addItem(description[count++]);\n    add(t);\n    add(c);\n    add(b);\n    c.addItemListener(new CL());\n    b.addActionListener(new BL());\n  }\n  class CL implements ItemListener {\n    public void itemStateChanged(ItemEvent e) {\n      t.setText("index: " +  c.getSelectedIndex()\n        + "   " + e.toString());\n    }\n  }\n  class BL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(count < description.length)\n        c.addItem(description[count++]);\n    }\n  }\n  public static void main(String[] args) {\n    ChoiceNew applet = new ChoiceNew();\n    Frame aFrame = new Frame("ChoiceNew");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(750,100);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("这个程序中没什么特别新颖的东西（除了Java 1.1版的UI类里少数几个值得关注的缺陷）。")]),e._v(" "),t("p",[e._v("(5) 列表")]),e._v(" "),t("p",[e._v("我们消除了Java 1.0中"),t("code",[e._v("List")]),e._v("设计的一个缺陷，就是"),t("code",[e._v("List")]),e._v("不能像我们希望的那样工作：它会与单击在一个列表元素上发生冲突。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: ListNew.java\n// Java 1.1 Lists are easier to use\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class ListNew extends Applet {\n  String[] flavors = { "Chocolate", "Strawberry",\n    "Vanilla Fudge Swirl", "Mint Chip",\n    "Mocha Almond Fudge", "Rum Raisin",\n    "Praline Cream", "Mud Pie" };\n  // Show 6 items, allow multiple selection:\n  List lst = new List(6, true);\n  TextArea t = new TextArea(flavors.length, 30);\n  Button b = new Button("test");\n  int count = 0;\n  public void init() {\n    t.setEditable(false);\n    for(int i = 0; i < 4; i++)\n      lst.addItem(flavors[count++]);\n    add(t);\n    add(lst);\n    add(b);\n    lst.addItemListener(new LL());\n    b.addActionListener(new BL());\n  }\n  class LL implements ItemListener {\n    public void itemStateChanged(ItemEvent e) {\n      t.setText("");\n      String[] items = lst.getSelectedItems();\n      for(int i = 0; i < items.length; i++)\n        t.append(items[i] + "\\n");\n    }\n  }\n  class BL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(count < flavors.length)\n        lst.addItem(flavors[count++], 0);\n    }\n  }\n  public static void main(String[] args) {\n    ListNew applet = new ListNew();\n    Frame aFrame = new Frame("ListNew");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("我们可以注意到在列表项中无需特别的逻辑需要去支持一个单击动作。我们正好像我们在其它地方所做的那样附加上一个接收器。")]),e._v(" "),t("p",[e._v("(6) 菜单")]),e._v(" "),t("p",[e._v("为菜单处理事件看起来受益于Java 1.1版的事件模型，但Java生成菜单的方法常常麻烦并且需要一些手工编写代码。生成菜单的正确方法看起来像资源而不是一些代码。请牢牢记住编程工具会广泛地为我们处理创建的菜单，因此这可以减少我们的痛苦（只要它们会同样处理维护任务！）。另外，我们将发现菜单不支持并且将导致混乱的事件：菜单项使用"),t("code",[e._v("ActionListeners")]),e._v("（动作接收器），但复选框菜单项使用"),t("code",[e._v("ItemListeners")]),e._v("（项目接收器）。菜单对象同样能支持ActionListeners（动作接收器），但通常不那么有用。一般来说，我们会附加接收器到每个菜单项或复选框菜单项，但下面的例子（对先前例子的修改）演示了一个联合捕捉多个菜单组件到一个单独的接收器类的方法。正像我们将看到的，它或许不值得为这而激烈地争论。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: MenuNew.java\n// Menus in Java 1.1\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class MenuNew extends Frame {\n  String[] flavors = { "Chocolate", "Strawberry",\n    "Vanilla Fudge Swirl", "Mint Chip",\n    "Mocha Almond Fudge", "Rum Raisin",\n    "Praline Cream", "Mud Pie" };\n  TextField t = new TextField("No flavor", 30);\n  MenuBar mb1 = new MenuBar();\n  Menu f = new Menu("File");\n  Menu m = new Menu("Flavors");\n  Menu s = new Menu("Safety");\n  // Alternative approach:\n  CheckboxMenuItem[] safety = {\n    new CheckboxMenuItem("Guard"),\n    new CheckboxMenuItem("Hide")\n  };\n  MenuItem[] file = {\n    // No menu shortcut:\n    new MenuItem("Open"),\n    // Adding a menu shortcut is very simple:\n    new MenuItem("Exit",\n      new MenuShortcut(KeyEvent.VK_E))\n  };\n  // A second menu bar to swap to:\n  MenuBar mb2 = new MenuBar();\n  Menu fooBar = new Menu("fooBar");\n  MenuItem[] other = {\n    new MenuItem("Foo"),\n    new MenuItem("Bar"),\n    new MenuItem("Baz"),\n  };\n  // Initialization code:\n  {\n    ML ml = new ML();\n    CMIL cmil = new CMIL();\n    safety[0].setActionCommand("Guard");\n    safety[0].addItemListener(cmil);\n    safety[1].setActionCommand("Hide");\n    safety[1].addItemListener(cmil);\n    file[0].setActionCommand("Open");\n    file[0].addActionListener(ml);\n    file[1].setActionCommand("Exit");\n    file[1].addActionListener(ml);\n    other[0].addActionListener(new FooL());\n    other[1].addActionListener(new BarL());\n    other[2].addActionListener(new BazL());\n  }\n  Button b = new Button("Swap Menus");\n  public MenuNew() {\n    FL fl = new FL();\n    for(int i = 0; i < flavors.length; i++) {\n      MenuItem mi = new MenuItem(flavors[i]);\n      mi.addActionListener(fl);\n      m.add(mi);\n      // Add separators at intervals:\n      if((i+1) % 3 == 0)\n        m.addSeparator();\n    }\n    for(int i = 0; i < safety.length; i++)\n      s.add(safety[i]);\n    f.add(s);\n    for(int i = 0; i < file.length; i++)\n      f.add(file[i]);\n    mb1.add(f);\n    mb1.add(m);\n    setMenuBar(mb1);\n    t.setEditable(false);\n    add(t, BorderLayout.CENTER);\n    // Set up the system for swapping menus:\n    b.addActionListener(new BL());\n    add(b, BorderLayout.NORTH);\n    for(int i = 0; i < other.length; i++)\n      fooBar.add(other[i]);\n    mb2.add(fooBar);\n  }\n  class BL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      MenuBar m = getMenuBar();\n      if(m == mb1) setMenuBar(mb2);\n      else if (m == mb2) setMenuBar(mb1);\n    }\n  }\n  class ML implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      MenuItem target = (MenuItem)e.getSource();\n      String actionCommand =\n        target.getActionCommand();\n      if(actionCommand.equals("Open")) {\n        String s = t.getText();\n        boolean chosen = false;\n        for(int i = 0; i < flavors.length; i++)\n          if(s.equals(flavors[i])) chosen = true;\n        if(!chosen)\n          t.setText("Choose a flavor first!");\n        else\n          t.setText("Opening "+ s +". Mmm, mm!");\n      } else if(actionCommand.equals("Exit")) {\n        dispatchEvent(\n          new WindowEvent(MenuNew.this,\n            WindowEvent.WINDOW_CLOSING));\n      }\n    }\n  }\n  class FL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      MenuItem target = (MenuItem)e.getSource();\n      t.setText(target.getLabel());\n    }\n  }\n  // Alternatively, you can create a different\n  // class for each different MenuItem. Then you\n  // Don\'t have to figure out which one it is:\n  class FooL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t.setText("Foo selected");\n    }\n  }\n  class BarL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t.setText("Bar selected");\n    }\n  }\n  class BazL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t.setText("Baz selected");\n    }\n  }\n  class CMIL implements ItemListener {\n    public void itemStateChanged(ItemEvent e) {\n      CheckboxMenuItem target =\n        (CheckboxMenuItem)e.getSource();\n      String actionCommand =\n        target.getActionCommand();\n      if(actionCommand.equals("Guard"))\n        t.setText("Guard the Ice Cream! " +\n          "Guarding is " + target.getState());\n      else if(actionCommand.equals("Hide"))\n        t.setText("Hide the Ice Cream! " +\n          "Is it cold? " + target.getState());\n    }\n  }\n  public static void main(String[] args) {\n    MenuNew f = new MenuNew();\n    f.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    f.setSize(300,200);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("在我们开始初始化节（由注解"),t("code",[e._v("Initialization code:")]),e._v("后的右大括号指明）的前面部分的代码同先前（Java 1.0版）版本相同。这里我们可以注意到项目接收器和动作接收器被附加在不同的菜单组件上。")]),e._v(" "),t("p",[e._v("Java 1.1支持“菜单快捷键”，因此我们可以选择一个菜单项目利用键盘替代鼠标。这十分的简单；我们只要使用重载菜单项构造器设置第二个参数为一个"),t("code",[e._v("MenuShortcut")]),e._v("（菜单快捷键事件）对象即可。菜单快捷键构造器设置重要的方法，当它按下时不可思议地显示在菜单项上。上面的例子增加了"),t("code",[e._v("Control-E")]),e._v("到"),t("code",[e._v("Exit")]),e._v("菜单项中。")]),e._v(" "),t("p",[e._v("我们同样会注意"),t("code",[e._v("setActionCommand()")]),e._v("的使用。这看似一点陌生因为在各种情况下“action command”完全同菜单组件上的标签一样。为什么不正好使用标签代替可选择的字符串呢？这个难题是国际化的。如果我们重新用其它语言写这个程序，我们只需要改变菜单中的标签，并不审查代码中可能包含新错误的所有逻辑。因此使这对检查文字字符串联合菜单组件的代码而言变得简单容易，当菜单标签能改变时“动作指令”可以不作任何的改变。所有这些代码同“动作指令”一同工作，因此它不会受改变菜单标签的影响。注意在这个程序中，不是所有的菜单组件都被它们的动作指令所审查，因此这些组件都没有它们的动作指令集。")]),e._v(" "),t("p",[e._v("大多数的构造器同前面的一样，将几个调用的异常增加到接收器中。大量的工作发生在接收器里。在前面例子的"),t("code",[e._v("BL")]),e._v("中，菜单交替发生。在"),t("code",[e._v("ML")]),e._v("中，“寻找"),t("code",[e._v("ring")]),e._v("”方法被作为动作事件（"),t("code",[e._v("ActionEvent")]),e._v("）的资源并对它进行转换送入菜单项，然后得到动作指令字符串，再通过它去贯穿串联组，当然条件是对它进行声明。这些大多数同前面的一样，但请注意如果"),t("code",[e._v("Exit")]),e._v("被选中，通过进入封装类对象的引用（"),t("code",[e._v("MenuNew.this")]),e._v("）并创建一个"),t("code",[e._v("WINDOW_CLOSING")]),e._v("事件，一个新的窗口事件就被创建了。新的事件被分配到封装类对象的"),t("code",[e._v("dispatchEvent()")]),e._v("方法，然后结束调用"),t("code",[e._v("windowsClosing()")]),e._v("内部帧的窗口接收器（这个接收器作为一个内部类被创建在"),t("code",[e._v("main()")]),e._v("里），似乎这是“正常”产生消息的方法。通过这种机制，我们可以在任何情况下迅速处理任何的信息，因此，它非常的强大。")]),e._v(" "),t("p",[e._v("FL接收器是很简单尽管它能处理特殊菜单的所有不同的特色。如果我们的逻辑十分的简单明了，这种方法对我们就很有用处，但通常，我们使用这种方法时需要与"),t("code",[e._v("FooL")]),e._v("，"),t("code",[e._v("BarL")]),e._v("和"),t("code",[e._v("BazL")]),e._v("一道使用，它们每个都附加到一个单独的菜单组件上，因此必然无需测试逻辑，并且使我们正确地辨识出谁调用了接收器。这种方法产生了大量的类，内部代码趋向于变得小巧和处理起来简单、安全。")]),e._v(" "),t("p",[e._v("(7) 对话框")]),e._v(" "),t("p",[e._v("在这个例子里直接重写了早期的"),t("code",[e._v("ToeTest.java")]),e._v("程序。在这个新的版本里，任何事件都被安放进一个内部类中。虽然这完全消除了需要记录产生的任何类的麻烦，作为"),t("code",[e._v("ToeTest.java")]),e._v("的一个例子，它能使内部类的概念变得不那遥远。在这点，内嵌类被嵌套达四层之深！我们需要的这种设计决定了内部类的优点是否值得增加更加复杂的事物。另外，当我们创建一个非静态的内部类时，我们将捆绑非静态类到它周围的类上。有时，单独的类可以更容易地被复用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: ToeTestNew.java\n// Demonstration of dialog boxes\n// and creating your own components\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class ToeTestNew extends Frame {\n  TextField rows = new TextField("3");\n  TextField cols = new TextField("3");\n  public ToeTestNew() {\n    setTitle("Toe Test");\n    Panel p = new Panel();\n    p.setLayout(new GridLayout(2,2));\n    p.add(new Label("Rows", Label.CENTER));\n    p.add(rows);\n    p.add(new Label("Columns", Label.CENTER));\n    p.add(cols);\n    add(p, BorderLayout.NORTH);\n    Button b = new Button("go");\n    b.addActionListener(new BL());\n    add(b, BorderLayout.SOUTH);\n  }\n  static final int BLANK = 0;\n  static final int XX = 1;\n  static final int OO = 2;\n  class ToeDialog extends Dialog {\n    // w = number of cells wide\n    // h = number of cells high\n    int turn = XX; // Start with x\'s turn\n    public ToeDialog(int w, int h) {\n      super(ToeTestNew.this,\n        "The game itself", false);\n      setLayout(new GridLayout(w, h));\n      for(int i = 0; i < w * h; i++)\n        add(new ToeButton());\n      setSize(w * 50, h * 50);\n      addWindowListener(new WindowAdapter() {\n        public void windowClosing(WindowEvent e){\n          dispose();\n        }\n      });\n    }\n    class ToeButton extends Canvas {\n      int state = BLANK;\n      ToeButton() {\n        addMouseListener(new ML());\n      }\n      public void paint(Graphics  g) {\n        int x1 = 0;\n        int y1 = 0;\n        int x2 = getSize().width - 1;\n        int y2 = getSize().height - 1;\n        g.drawRect(x1, y1, x2, y2);\n        x1 = x2/4;\n        y1 = y2/4;\n        int wide = x2/2;\n        int high = y2/2;\n        if(state == XX) {\n          g.drawLine(x1, y1,\n            x1 + wide, y1 + high);\n          g.drawLine(x1, y1 + high,\n            x1 + wide, y1);\n        }\n        if(state == OO) {\n          g.drawOval(x1, y1,\n            x1 + wide/2, y1 + high/2);\n        }\n      }\n      class ML extends MouseAdapter {\n        public void mousePressed(MouseEvent e) {\n          if(state == BLANK) {\n            state = turn;\n            turn = (turn == XX ? OO : XX);\n          }\n          else\n            state = (state == XX ? OO : XX);\n          repaint();\n        }\n      }\n    }\n  }\n  class BL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      Dialog d = new ToeDialog(\n        Integer.parseInt(rows.getText()),\n        Integer.parseInt(cols.getText()));\n      d.show();\n    }\n  }\n  public static void main(String[] args) {\n    Frame f = new ToeTestNew();\n    f.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    f.setSize(200,100);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("由于“静态”的东西只能位于类的外部一级，所以内部类不可能拥有静态数据或者静态内部类。")]),e._v(" "),t("p",[e._v("(8) 文件对话框")]),e._v(" "),t("p",[e._v("这个例子是直接用新事件模型对"),t("code",[e._v("FileDialogTest.java")]),e._v("修改而来。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: FileDialogNew.java\n// Demonstration of File dialog boxes\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class FileDialogNew extends Frame {\n  TextField filename = new TextField();\n  TextField directory = new TextField();\n  Button open = new Button("Open");\n  Button save = new Button("Save");\n  public FileDialogNew() {\n    setTitle("File Dialog Test");\n    Panel p = new Panel();\n    p.setLayout(new FlowLayout());\n    open.addActionListener(new OpenL());\n    p.add(open);\n    save.addActionListener(new SaveL());\n    p.add(save);\n    add(p, BorderLayout.SOUTH);\n    directory.setEditable(false);\n    filename.setEditable(false);\n    p = new Panel();\n    p.setLayout(new GridLayout(2,1));\n    p.add(filename);\n    p.add(directory);\n    add(p, BorderLayout.NORTH);\n  }\n  class OpenL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      // Two arguments, defaults to open file:\n      FileDialog d = new FileDialog(\n        FileDialogNew.this,\n        "What file do you want to open?");\n      d.setFile("*.java");\n      d.setDirectory("."); // Current directory\n      d.show();\n      String yourFile = "*.*";\n      if((yourFile = d.getFile()) != null) {\n        filename.setText(yourFile);\n        directory.setText(d.getDirectory());\n      } else {\n        filename.setText("You pressed cancel");\n        directory.setText("");\n      }\n    }\n  }\n  class SaveL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      FileDialog d = new FileDialog(\n        FileDialogNew.this,\n        "What file do you want to save?",\n        FileDialog.SAVE);\n      d.setFile("*.java");\n      d.setDirectory(".");\n      d.show();\n      String saveFile;\n      if((saveFile = d.getFile()) != null) {\n        filename.setText(saveFile);\n        directory.setText(d.getDirectory());\n      } else {\n        filename.setText("You pressed cancel");\n        directory.setText("");\n      }\n    }\n  }\n  public static void main(String[] args) {\n    Frame f = new FileDialogNew();\n    f.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    f.setSize(250,110);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("如果所有的改变是这样的容易那将有多棒，但至少它们已足够容易，并且我们的代码已受益于这改进的可读性上。")]),e._v(" "),t("h2",{attrs:{id:"_13-16-5-动态绑定事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-5-动态绑定事件"}},[e._v("#")]),e._v(" 13.16.5 动态绑定事件")]),e._v(" "),t("p",[e._v("新AWT事件模型给我们带来的一个好处就是灵活性。在老的模型中我们被迫为我们的程序动作艰难地编写代码。但新的模型我们可以用单一方法调用增加和删除事件动作。下面的例子证明了这一点：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: DynamicEvents.java\n// The new Java 1.1 event model allows you to\n// change event behavior dynamically. Also\n// demonstrates multiple actions for an event.\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\n\npublic class DynamicEvents extends Frame {\n  Vector v = new Vector();\n  int i = 0;\n  Button\n    b1 = new Button("Button 1"),\n    b2 = new Button("Button 2");\n  public DynamicEvents() {\n    setLayout(new FlowLayout());\n    b1.addActionListener(new B());\n    b1.addActionListener(new B1());\n    b2.addActionListener(new B());\n    b2.addActionListener(new B2());\n    add(b1);\n    add(b2);\n  }\n  class B implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      System.out.println("A button was pressed");\n    }\n  }\n  class CountListener implements ActionListener {\n    int index;\n    public CountListener(int i) { index = i; }\n    public void actionPerformed(ActionEvent e) {\n      System.out.println(\n        "Counted Listener " + index);\n    }\n  }    \n  class B1 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      System.out.println("Button 1 pressed");\n      ActionListener a = new CountListener(i++);\n      v.addElement(a);\n      b2.addActionListener(a);\n    }\n  }\n  class B2 implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      System.out.println("Button 2 pressed");\n      int end = v.size() -1;\n      if(end >= 0) {\n        b2.removeActionListener(\n          (ActionListener)v.elementAt(end));\n        v.removeElementAt(end);\n      }\n    }\n  }\n  public static void main(String[] args) {\n    Frame f = new DynamicEvents();\n    f.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e){\n          System.exit(0);\n        }\n      });\n    f.setSize(300,200);\n    f.show();\n  }\n} ///:~\n')])])]),t("p",[e._v("这个例子采取的新手法包括：")]),e._v(" "),t("p",[e._v("(1) 在每个按钮上附着不少于一个的接收器。通常，组件把事件作为多转换处理，这意味着我们可以为单个事件注册许多接收器。当在特殊的组件中一个事件作为单一转换被处理时，我们会得到"),t("code",[e._v("TooManyListenersException")]),e._v("（即太多接收器异常）。")]),e._v(" "),t("p",[e._v("(2) 程序执行期间，接收器动态地被从按钮B2中增加和删除。增加用我们前面见到过的方法完成，但每个组件同样有一个"),t("code",[e._v("removeXXXListener()")]),e._v("（删除"),t("code",[e._v("XXX")]),e._v("接收器）方法来删除各种类型的接收器。")]),e._v(" "),t("p",[e._v("这种灵活性为我们的编程提供了更强大的能力。")]),e._v(" "),t("p",[e._v("我们注意到事件接收器不能保证在命令他们被增加时可被调用（虽然事实上大部分的执行工作都是用这种方法完成的）。")]),e._v(" "),t("h2",{attrs:{id:"_13-16-6-将事务逻辑与ui逻辑区分开"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-6-将事务逻辑与ui逻辑区分开"}},[e._v("#")]),e._v(" 13.16.6 将事务逻辑与UI逻辑区分开")]),e._v(" "),t("p",[e._v("一般而言，我们需要设计我们的类如此以至于每一类做“一件事”。当涉及用户接口代码时就更显得尤为重要，因为它很容易地封装“您要做什么”和“怎样显示它”。这种有效的配合防止了代码的重复使用。更不用说它令人满意的从GUI中区分出我们的“事物逻辑”。使用这种方法，我们可以不仅仅更容易地重复使用事物逻辑，它同样可以更容易地重复使用GUI。")]),e._v(" "),t("p",[e._v("其它的争议是“动作对象”存在的完成分离机器的多层次系统。动作主要的定位规则允许所有新事件修改后立刻生效，并且这是如此一个引人注目的设置系统的方法。但是这些动作对象可以被在一些不同的应用程序使用并且因此不会被一些特殊的显示模式所约束。它们会合理地执行动作操作并且没有多余的事件。")]),e._v(" "),t("p",[e._v("下面的例子演示了从GUI代码中多么地轻松的区分事物逻辑：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Separation.java\n// Separating GUI logic and business objects\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\nclass BusinessLogic {\n  private int modifier;\n  BusinessLogic(int mod) {\n    modifier = mod;\n  }\n  public void setModifier(int mod) {\n    modifier = mod;\n  }\n  public int getModifier() {\n    return modifier;\n  }\n  // Some business operations:\n  public int calculation1(int arg) {\n    return arg * modifier;\n  }\n  public int calculation2(int arg) {\n    return arg + modifier;\n  }\n}\n\npublic class Separation extends Applet {\n  TextField\n    t = new TextField(20),\n    mod = new TextField(20);\n  BusinessLogic bl = new BusinessLogic(2);\n  Button\n    calc1 = new Button("Calculation 1"),\n    calc2 = new Button("Calculation 2");\n  public void init() {\n    add(t);\n    calc1.addActionListener(new Calc1L());\n    calc2.addActionListener(new Calc2L());\n    add(calc1); add(calc2);\n    mod.addTextListener(new ModL());\n    add(new Label("Modifier:"));\n    add(mod);\n  }\n  static int getValue(TextField tf) {\n    try {\n      return Integer.parseInt(tf.getText());\n    } catch(NumberFormatException e) {\n      return 0;\n    }\n  }\n  class Calc1L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t.setText(Integer.toString(\n        bl.calculation1(getValue(t))));\n    }\n  }\n  class Calc2L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      t.setText(Integer.toString(\n        bl.calculation2(getValue(t))));\n    }\n  }\n  class ModL implements TextListener {\n    public void textValueChanged(TextEvent e) {\n      bl.setModifier(getValue(mod));\n    }\n  }\n  public static void main(String[] args) {\n    Separation applet = new Separation();\n    Frame aFrame = new Frame("Separation");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(200,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("可以看到，事物逻辑是一个直接完成它的操作而不需要提示并且可以在GUI环境下使用的类。它正适合它的工作。区分动作记录了所有UI的详细资料，并且它只通过它的公共接口与事物逻辑交流。所有的操作围绕中心通过UI和事物逻辑对象来回获取信息。因此区分，轮流做它的工作。因为区分中只知道它同事物逻辑对象对话（也就是说，它没有高度的结合），它可以被强迫同其它类型的对象对话而没有更多的烦恼。\n思考从事物逻辑中区分UI的条件，同样思考当我们调整传统的Java代码使它运行时，怎样使它更易存活。")]),e._v(" "),t("h2",{attrs:{id:"_13-16-7-推荐编码方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-16-7-推荐编码方法"}},[e._v("#")]),e._v(" 13.16.7 推荐编码方法")]),e._v(" "),t("p",[e._v("内部类是新的事件模型，并且事实上旧的事件模型连同新库的特征都被它好的支持，依赖老式的编程方法无疑增加了一个新的混乱的因素。现在有更多不同的方法为我们编写讨厌的代码。凑巧的是，这种代码显现在本书中和程序样本中，并且甚至在文件和程序样本中同SUN公司区别开来。在这一节中，我们将看到一些关于我们会和不会运行新AWT的争执，并由向我们展示除了可以原谅的情况，我们可以随时使用接收器类去解决我们的事件处理需要来结束。因为这种方法同样是最简单和最清晰的方法，它将会对我们学习它构成有效的帮助。")]),e._v(" "),t("p",[e._v("在看到任何事以前，我们知道尽管Java 1.1向后兼容Java 1.0（也就是说，我们可以在1.1中编译和运行1.0的程序），但我们并不能在同一个程序里混合事件模型。换言之，当我们试图集成老的代码到一个新的程序中时，我们不能使用老式的"),t("code",[e._v("action()")]),e._v("方法在同一个程序中，因此我们必须决定是否对新程序使用老的，难以维护的方法或者升级老的代码。这不会有太多的竞争因为新的方法对老的方法而言是如此的优秀。")]),e._v(" "),t("p",[e._v("(1) 准则：运行它的好方法")]),e._v(" "),t("p",[e._v("为了给我们一些事物来进行比较，这儿有一个程序例子演示向我们推荐的方法。到现在它会变得相当的熟悉和舒适。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: GoodIdea.java\n// The best way to design classes using the new\n// Java 1.1 event model: use an inner class for\n// each different event. This maximizes\n// flexibility and modularity.\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\n\npublic class GoodIdea extends Frame {\n  Button\n    b1 = new Button("Button 1"),\n    b2 = new Button("Button 2");\n  public GoodIdea() {\n    setLayout(new FlowLayout());\n    b1.addActionListener(new B1L());\n    b2.addActionListener(new B2L());\n    add(b1);\n    add(b2);\n  }\n  public class B1L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      System.out.println("Button 1 pressed");\n    }\n  }\n  public class B2L implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      System.out.println("Button 2 pressed");\n    }\n  }\n  public static void main(String[] args) {\n    Frame f = new GoodIdea();\n    f.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e){\n          System.out.println("Window Closing");\n          System.exit(0);\n        }\n      });\n    f.setSize(300,200);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("这是颇有点微不足道的：每个按钮有它自己的印出一些事物到控制台的接收器。但请注意在整个程序中这不是一个条件语句，或者是一些表示“我想要知道怎样使事件发生”的语句。每块代码都与运行有关，而不是类型检验。也就是说，这是最好的编写我们的代码的方法；不仅仅是它更易使我们理解概念，至少是使我们更易阅读和维护。剪切和粘贴到新的程序是同样如此的容易。")]),e._v(" "),t("p",[e._v("(2) 将主类作为接收器实现")]),e._v(" "),t("p",[e._v("第一个坏主意是一个通常的和推荐的方法。这使得主类（有代表性的是程序片或帧，但它能变成一些类）执行各种不同的接收器。下面是一个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: BadIdea1.java\n// Some literature recommends this approach,\n// but it\'s missing the point of the new event\n// model in Java 1.1\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\n\npublic class BadIdea1 extends Frame\n    implements ActionListener, WindowListener {\n  Button\n    b1 = new Button("Button 1"),\n    b2 = new Button("Button 2");\n  public BadIdea1() {\n    setLayout(new FlowLayout());\n    addWindowListener(this);\n    b1.addActionListener(this);\n    b2.addActionListener(this);\n    add(b1);\n    add(b2);\n  }\n  public void actionPerformed(ActionEvent e) {\n    Object source = e.getSource();\n    if(source == b1)\n      System.out.println("Button 1 pressed");\n    else if(source == b2)\n      System.out.println("Button 2 pressed");\n    else\n      System.out.println("Something else");\n  }    \n  public void windowClosing(WindowEvent e) {\n    System.out.println("Window Closing");\n    System.exit(0);\n  }\n  public void windowClosed(WindowEvent e) {}\n  public void windowDeiconified(WindowEvent e) {}\n  public void windowIconified(WindowEvent e) {}\n  public void windowActivated(WindowEvent e) {}\n  public void windowDeactivated(WindowEvent e) {}\n  public void windowOpened(WindowEvent e) {}  \n\n  public static void main(String[] args) {\n    Frame f = new BadIdea1();\n    f.setSize(300,200);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("这样做的用途显示在下述三行里：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("addWindowListener(this);\nb1.addActionListener(this);\nb2.addActionListener(this);\n")])])]),t("p",[e._v("因为"),t("code",[e._v("Badidea1")]),e._v("执行动作接收器和窗中接收器，这些程序行当然可以接受，并且如果我们一直坚持设法使少量的类去减少服务器检索期间的程序片载入的作法，它看起来变成一个不错的主意。但是：")]),e._v(" "),t("p",[e._v("(1) Java 1.1版支持JAR文件，因此所有我们的文件可以被放置到一个单一的压缩的JAR文件中，只需要一次服务器检索。我们不再需要为Internet效率而减少类的数量。")]),e._v(" "),t("p",[e._v("(2) 上面的代码的组件更加的少，因此它难以抓住和粘贴。注意我们必须不仅要执行各种各样的接口为我们的主类，但在"),t("code",[e._v("actionPerformed()")]),e._v("方法中，我们利用一串条件语句测试哪个动作被完成了。不仅仅是这个状态倒退，远离接收器模型，除此之外，我们不能简单地重复使用"),t("code",[e._v("actionPerformed()")]),e._v("方法因为它是指定为这个特殊的应用程序使用的。将这个程序例子与"),t("code",[e._v("GoodIdea.java")]),e._v("进行比较，我们可以正好捕捉一个接收器类并粘贴它和最小的焦急到任何地方。另外我们可以为一个单独的事件注册多个接收器类，允许甚至更多的模块在每个接收器类在每个接收器中运行。")]),e._v(" "),t("p",[e._v("(3) 方法的混合")]),e._v(" "),t("p",[e._v("第二个bad idea混合了两种方法：使用内嵌接收器类，但同样执行一个或更多的接收器接口以作为主类的一部分。这种方法无需在书中和文件中进行解释，而且我可以臆测到Java开发者认为他们必须为不同的目的而采取不同的方法。但我们却不必——在我们编程时，我们或许可能会倾向于使用内嵌接收器类。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: BadIdea2.java\n// An improvement over BadIdea1.java, since it\n// uses the WindowAdapter as an inner class\n// instead of implementing all the methods of\n// WindowListener, but still misses the\n// valuable modularity of inner classes\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\n\npublic class BadIdea2 extends Frame\n    implements ActionListener {\n  Button\n    b1 = new Button("Button 1"),\n    b2 = new Button("Button 2");\n  public BadIdea2() {\n    setLayout(new FlowLayout());\n    addWindowListener(new WL());\n    b1.addActionListener(this);\n    b2.addActionListener(this);\n    add(b1);\n    add(b2);\n  }\n  public void actionPerformed(ActionEvent e) {\n    Object source = e.getSource();\n    if(source == b1)\n      System.out.println("Button 1 pressed");\n    else if(source == b2)\n      System.out.println("Button 2 pressed");\n    else\n      System.out.println("Something else");\n  }\n  class WL extends WindowAdapter {\n    public void windowClosing(WindowEvent e) {\n      System.out.println("Window Closing");\n      System.exit(0);\n    }\n  }\n  public static void main(String[] args) {\n    Frame f = new BadIdea2();\n    f.setSize(300,200);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("因为"),t("code",[e._v("actionPerformed()")]),e._v("动作完成方法同主类紧密地结合，所以难以复用代码。它的代码读起来同样是凌乱和令人厌烦的，远远超过了内部类方法。不合理的是，我们不得不在Java 1.1版中为事件使用那些老的思路。")]),e._v(" "),t("p",[e._v("(4) 继承一个组件")]),e._v(" "),t("p",[e._v("创建一个新类型的组件时，在运行事件的老方法中，我们会经常看到不同的地方发生了变化。这里有一个程序例子来演示这种新的工作方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: GoodTechnique.java\n// Your first choice when overriding components\n// should be to install listeners. The code is\n// much safer, more modular and maintainable.\nimport java.awt.*;\nimport java.awt.event.*;\n\nclass Display {\n  public static final int\n    EVENT = 0, COMPONENT = 1,\n    MOUSE = 2, MOUSE_MOVE = 3,\n    FOCUS = 4, KEY = 5, ACTION = 6,\n    LAST = 7;\n  public String[] evnt;\n  Display() {\n    evnt = new String[LAST];\n    for(int i = 0; i < LAST; i++)\n      evnt[i] = new String();\n  }\n  public void show(Graphics g) {\n    for(int i = 0; i < LAST; i++)\n      g.drawString(evnt[i], 0, 10 * i + 10);\n  }\n}\n\nclass EnabledPanel extends Panel {\n  Color c;\n  int id;\n  Display display = new Display();\n  public EnabledPanel(int i, Color mc) {\n    id = i;\n    c = mc;\n    setLayout(new BorderLayout());\n    add(new MyButton(), BorderLayout.SOUTH);\n    addComponentListener(new CL());\n    addFocusListener(new FL());\n    addKeyListener(new KL());\n    addMouseListener(new ML());\n    addMouseMotionListener(new MML());\n  }\n  // To eliminate flicker:\n  public void update(Graphics g) {\n    paint(g);\n  }\n  public void paint(Graphics  g) {\n    g.setColor(c);\n    Dimension s = getSize();\n    g.fillRect(0, 0, s.width, s.height);\n    g.setColor(Color.black);\n    display.show(g);\n  }\n  // Don\'t need to enable anything for this:\n  public void processEvent(AWTEvent e) {\n    display.evnt[Display.EVENT]= e.toString();\n    repaint();\n    super.processEvent(e);\n  }\n  class CL implements ComponentListener {\n    public void componentMoved(ComponentEvent e){\n      display.evnt[Display.COMPONENT] =\n        "Component moved";\n      repaint();\n    }\n    public void\n    componentResized(ComponentEvent e) {\n      display.evnt[Display.COMPONENT] =\n        "Component resized";\n      repaint();\n    }\n    public void\n    componentHidden(ComponentEvent e) {\n      display.evnt[Display.COMPONENT] =\n        "Component hidden";\n      repaint();\n    }\n    public void componentShown(ComponentEvent e){\n      display.evnt[Display.COMPONENT] =\n        "Component shown";\n      repaint();\n    }\n  }\n  class FL implements FocusListener {\n    public void focusGained(FocusEvent e) {\n      display.evnt[Display.FOCUS] =\n        "FOCUS gained";\n      repaint();\n    }\n    public void focusLost(FocusEvent e) {\n      display.evnt[Display.FOCUS] =\n        "FOCUS lost";\n      repaint();\n    }\n  }\n  class KL implements KeyListener {\n    public void keyPressed(KeyEvent e) {\n      display.evnt[Display.KEY] =\n        "KEY pressed: ";\n      showCode(e);\n    }\n    public void keyReleased(KeyEvent e) {\n      display.evnt[Display.KEY] =\n        "KEY released: ";\n      showCode(e);\n    }\n    public void keyTyped(KeyEvent e) {\n      display.evnt[Display.KEY] =\n        "KEY typed: ";\n      showCode(e);\n    }\n    void showCode(KeyEvent e) {\n      int code = e.getKeyCode();\n      display.evnt[Display.KEY] +=\n        KeyEvent.getKeyText(code);\n      repaint();\n    }\n  }\n  class ML implements MouseListener {\n    public void mouseClicked(MouseEvent e) {\n      requestFocus(); // Get FOCUS on click\n      display.evnt[Display.MOUSE] =\n        "MOUSE clicked";\n      showMouse(e);\n    }\n    public void mousePressed(MouseEvent e) {\n      display.evnt[Display.MOUSE] =\n        "MOUSE pressed";\n      showMouse(e);\n    }\n    public void mouseReleased(MouseEvent e) {\n      display.evnt[Display.MOUSE] =\n        "MOUSE released";\n      showMouse(e);\n    }\n    public void mouseEntered(MouseEvent e) {\n      display.evnt[Display.MOUSE] =\n        "MOUSE entered";\n      showMouse(e);\n    }\n    public void mouseExited(MouseEvent e) {\n      display.evnt[Display.MOUSE] =\n        "MOUSE exited";\n      showMouse(e);\n    }\n    void showMouse(MouseEvent e) {\n      display.evnt[Display.MOUSE] +=\n        ", x = " + e.getX() +\n        ", y = " + e.getY();\n      repaint();\n    }\n  }\n  class MML implements MouseMotionListener {\n    public void mouseDragged(MouseEvent e) {\n      display.evnt[Display.MOUSE_MOVE] =\n        "MOUSE dragged";\n      showMouse(e);\n    }\n    public void mouseMoved(MouseEvent e) {\n      display.evnt[Display.MOUSE_MOVE] =\n        "MOUSE moved";\n      showMouse(e);\n    }\n    void showMouse(MouseEvent e) {\n      display.evnt[Display.MOUSE_MOVE] +=\n        ", x = " + e.getX() +\n        ", y = " + e.getY();\n      repaint();\n    }\n  }\n}\n\nclass MyButton extends Button {\n  int clickCounter;\n  String label = "";\n  public MyButton() {\n    addActionListener(new AL());\n  }\n  public void paint(Graphics g) {\n    g.setColor(Color.green);\n    Dimension s = getSize();\n    g.fillRect(0, 0, s.width, s.height);\n    g.setColor(Color.black);\n    g.drawRect(0, 0, s.width - 1, s.height - 1);\n    drawLabel(g);\n  }\n  private void drawLabel(Graphics g) {\n    FontMetrics fm = g.getFontMetrics();\n    int width = fm.stringWidth(label);\n    int height = fm.getHeight();\n    int ascent = fm.getAscent();\n    int leading = fm.getLeading();\n    int horizMargin =\n      (getSize().width - width)/2;\n    int verMargin =\n      (getSize().height - height)/2;\n    g.setColor(Color.red);\n    g.drawString(label, horizMargin,\n      verMargin + ascent + leading);\n  }\n  class AL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      clickCounter++;\n      label = "click #" + clickCounter +\n        " " + e.toString();\n      repaint();\n    }\n  }\n}\n\npublic class GoodTechnique extends Frame {\n  GoodTechnique() {\n    setLayout(new GridLayout(2,2));\n    add(new EnabledPanel(1, Color.cyan));\n    add(new EnabledPanel(2, Color.lightGray));\n    add(new EnabledPanel(3, Color.yellow));\n  }\n  public static void main(String[] args) {\n    Frame f = new GoodTechnique();\n    f.setTitle("Good Technique");\n    f.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e){\n          System.out.println(e);\n          System.out.println("Window Closing");\n          System.exit(0);\n        }\n      });\n    f.setSize(700,700);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("这个程序例子同样证明了各种各样的发现和显示关于它们的信息的事件。这种显示是一种集中显示信息的方法。一组字符串去获取关于每种类型的事件的信息，并且"),t("code",[e._v("show()")]),e._v("方法对任何图像对象都设置了一个引用，我们采用并直接地写在外观代码上。这种设计是有意的被某种事件重复使用。")]),e._v(" "),t("p",[e._v("激活面板代表了这种新型的组件。它是一个底部有一个按钮的彩色的面板，并且它由利用接收器类为每一个单独的事件来引发捕捉所有发生在它之上的事件，除了那些在激活面板重载的老式的"),t("code",[e._v("processEvent()")]),e._v("方法（注意它应该同样调用"),t("code",[e._v("super.processEvent()")]),e._v("）。利用这种方法的唯一理由是它捕捉发生的每一个事件，因此我们可以观察持续发生的每一事件。"),t("code",[e._v("processEvent()")]),e._v("方法没有更多的展示代表每个事件的字符串，否则它会不得不使用一串条件语句去寻找事件。在其它方面，内嵌接收类早已清晰地知道被发现的事件。（假定我们注册它们到组件，我们不需要任何的控件的逻辑，这将成为我们的目的。）因此，它们不会去检查任何事件；这些事件正好做它们的原材料。")]),e._v(" "),t("p",[e._v("每个接收器修改显示字符串和它的指定事件，并且调用重画方法"),t("code",[e._v("repaint()")]),e._v("因此将显示这个字符串。我们同样能注意到一个通常能消除闪烁的秘诀：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public void update(Graphics g) {\npaint(g);\n}\n")])])]),t("p",[e._v("我们不会始终需要重载"),t("code",[e._v("update()")]),e._v("，但如果我们写下一些闪烁的程序，并运行它。默认的最新版本的清除背景然后调用"),t("code",[e._v("paint()")]),e._v("方法重新画出一些图画。这个清除动作通常会产生闪烁，但是不必要的，因为"),t("code",[e._v("paint()")]),e._v("重画了整个的外观。")]),e._v(" "),t("p",[e._v("我们可以看到许多的接收器——但是，对接收器输入检查指令，但我们却不能接收任何组件不支持的事件。（不像"),t("code",[e._v("BadTechnuque.java")]),e._v("那样我们能时时刻刻看到）。")]),e._v(" "),t("p",[e._v("试验这个程序是十分的有教育意义的，因为我们学习了许多的关于在Java中事件发生的方法。一则它展示了大多数开窗口的系统中设计上的瑕疵：它相当的难以去单击和释放鼠标，除非移动它，并且当我们实际上正试图用鼠标单击在某物体上时开窗口的会常常认为我们是在拖动。一个解决这个问题的方案是使用"),t("code",[e._v("mousePressed()")]),e._v("鼠标按下方法和"),t("code",[e._v("mouseReleased()")]),e._v("鼠标释放方法去代替"),t("code",[e._v("mouseClicked()")]),e._v("鼠标单击方法，然后判断是否去调用我们自己的以时间和4个像素的鼠标滞后作用的“"),t("code",[e._v("mouseReallyClicked()")]),e._v("真实的鼠标单击”方法。")]),e._v(" "),t("p",[e._v("(5) 蹩脚的组件继承")]),e._v(" "),t("p",[e._v("另一种做法是调用"),t("code",[e._v("enableEvent()")]),e._v("方法，并将与希望控制的事件对应的模型传递给它（许多参考书中都曾提及这种做法）。这样做会造成那些事件被发送至老式方法（尽管它们对Java 1.1来说是新的），并采用象"),t("code",[e._v("processFocusEvent()")]),e._v("这样的名字。也必须要记住调用基类版本。下面是它看起来的样子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: BadTechnique.java\n// It\'s possible to override components this way,\n// but the listener approach is much better, so\n// why would you?\nimport java.awt.*;\nimport java.awt.event.*;\n\nclass Display {\n  public static final int\n    EVENT = 0, COMPONENT = 1,\n    MOUSE = 2, MOUSE_MOVE = 3,\n    FOCUS = 4, KEY = 5, ACTION = 6,\n    LAST = 7;\n  public String[] evnt;\n  Display() {\n    evnt = new String[LAST];\n    for(int i = 0; i < LAST; i++)\n      evnt[i] = new String();\n  }\n  public void show(Graphics g) {\n    for(int i = 0; i < LAST; i++)\n      g.drawString(evnt[i], 0, 10 * i + 10);\n  }\n}\n\nclass EnabledPanel extends Panel {\n  Color c;\n  int id;\n  Display display = new Display();\n  public EnabledPanel(int i, Color mc) {\n    id = i;\n    c = mc;\n    setLayout(new BorderLayout());\n    add(new MyButton(), BorderLayout.SOUTH);\n    // Type checking is lost. You can enable and\n    // process events that the component doesn\'t\n    // capture:\n    enableEvents(\n      // Panel doesn\'t handle these:\n      AWTEvent.ACTION_EVENT_MASK |\n      AWTEvent.ADJUSTMENT_EVENT_MASK |\n      AWTEvent.ITEM_EVENT_MASK |\n      AWTEvent.TEXT_EVENT_MASK |\n      AWTEvent.WINDOW_EVENT_MASK |\n      // Panel can handle these:\n      AWTEvent.COMPONENT_EVENT_MASK |\n      AWTEvent.FOCUS_EVENT_MASK |\n      AWTEvent.KEY_EVENT_MASK |\n      AWTEvent.MOUSE_EVENT_MASK |\n      AWTEvent.MOUSE_MOTION_EVENT_MASK |\n      AWTEvent.CONTAINER_EVENT_MASK);\n      // You can enable an event without\n      // overriding its process method.\n  }\n  // To eliminate flicker:\n  public void update(Graphics g) {\n    paint(g);\n  }\n  public void paint(Graphics  g) {\n    g.setColor(c);\n    Dimension s = getSize();\n    g.fillRect(0, 0, s.width, s.height);\n    g.setColor(Color.black);\n    display.show(g);\n  }\n  public void processEvent(AWTEvent e) {\n    display.evnt[Display.EVENT]= e.toString();\n    repaint();\n    super.processEvent(e);\n  }\n  public void\n  processComponentEvent(ComponentEvent e) {\n    switch(e.getID()) {\n      case ComponentEvent.COMPONENT_MOVED:\n        display.evnt[Display.COMPONENT] =\n          "Component moved";\n        break;\n      case ComponentEvent.COMPONENT_RESIZED:\n        display.evnt[Display.COMPONENT] =\n          "Component resized";\n        break;\n      case ComponentEvent.COMPONENT_HIDDEN:\n        display.evnt[Display.COMPONENT] =\n          "Component hidden";\n        break;\n      case ComponentEvent.COMPONENT_SHOWN:\n        display.evnt[Display.COMPONENT] =\n          "Component shown";\n        break;\n      default:\n    }\n    repaint();\n    // Must always remember to call the "super"\n    // version of whatever you override:\n    super.processComponentEvent(e);\n  }\n  public void processFocusEvent(FocusEvent e) {\n    switch(e.getID()) {\n      case FocusEvent.FOCUS_GAINED:\n        display.evnt[Display.FOCUS] =\n          "FOCUS gained";\n        break;\n      case FocusEvent.FOCUS_LOST:\n        display.evnt[Display.FOCUS] =\n          "FOCUS lost";\n        break;\n      default:\n    }\n    repaint();\n    super.processFocusEvent(e);\n  }\n  public void processKeyEvent(KeyEvent e) {\n    switch(e.getID()) {\n      case KeyEvent.KEY_PRESSED:\n        display.evnt[Display.KEY] =\n          "KEY pressed: ";\n        break;\n      case KeyEvent.KEY_RELEASED:\n        display.evnt[Display.KEY] =\n          "KEY released: ";\n        break;\n      case KeyEvent.KEY_TYPED:\n        display.evnt[Display.KEY] =\n          "KEY typed: ";\n        break;\n      default:\n    }\n    int code = e.getKeyCode();\n    display.evnt[Display.KEY] +=\n      KeyEvent.getKeyText(code);\n    repaint();\n    super.processKeyEvent(e);\n  }\n  public void processMouseEvent(MouseEvent e) {\n    switch(e.getID()) {\n      case MouseEvent.MOUSE_CLICKED:\n        requestFocus(); // Get FOCUS on click\n        display.evnt[Display.MOUSE] =\n          "MOUSE clicked";\n        break;\n      case MouseEvent.MOUSE_PRESSED:\n        display.evnt[Display.MOUSE] =\n          "MOUSE pressed";\n        break;\n      case MouseEvent.MOUSE_RELEASED:\n        display.evnt[Display.MOUSE] =\n          "MOUSE released";\n        break;\n      case MouseEvent.MOUSE_ENTERED:\n        display.evnt[Display.MOUSE] =\n          "MOUSE entered";\n        break;\n      case MouseEvent.MOUSE_EXITED:\n        display.evnt[Display.MOUSE] =\n          "MOUSE exited";\n        break;\n      default:\n    }\n    display.evnt[Display.MOUSE] +=\n      ", x = " + e.getX() +\n      ", y = " + e.getY();\n    repaint();\n    super.processMouseEvent(e);\n  }\n  public void\n  processMouseMotionEvent(MouseEvent e) {\n    switch(e.getID()) {\n      case MouseEvent.MOUSE_DRAGGED:\n        display.evnt[Display.MOUSE_MOVE] =\n          "MOUSE dragged";\n        break;\n      case MouseEvent.MOUSE_MOVED:\n        display.evnt[Display.MOUSE_MOVE] =\n          "MOUSE moved";\n        break;\n      default:\n    }\n    display.evnt[Display.MOUSE_MOVE] +=\n      ", x = " + e.getX() +\n      ", y = " + e.getY();\n    repaint();\n    super.processMouseMotionEvent(e);\n  }\n}\n\nclass MyButton extends Button {\n  int clickCounter;\n  String label = "";\n  public MyButton() {\n    enableEvents(AWTEvent.ACTION_EVENT_MASK);\n  }\n  public void paint(Graphics g) {\n    g.setColor(Color.green);\n    Dimension s = getSize();\n    g.fillRect(0, 0, s.width, s.height);\n    g.setColor(Color.black);\n    g.drawRect(0, 0, s.width - 1, s.height - 1);\n    drawLabel(g);\n  }\n  private void drawLabel(Graphics g) {\n    FontMetrics fm = g.getFontMetrics();\n    int width = fm.stringWidth(label);\n    int height = fm.getHeight();\n    int ascent = fm.getAscent();\n    int leading = fm.getLeading();\n    int horizMargin =\n      (getSize().width - width)/2;\n    int verMargin =\n      (getSize().height - height)/2;\n    g.setColor(Color.red);\n    g.drawString(label, horizMargin,\n                 verMargin + ascent + leading);\n  }\n  public void processActionEvent(ActionEvent e) {\n    clickCounter++;\n    label = "click #" + clickCounter +\n      " " + e.toString();\n    repaint();\n    super.processActionEvent(e);\n  }\n}\n\npublic class BadTechnique extends Frame {\n  BadTechnique() {\n    setLayout(new GridLayout(2,2));\n    add(new EnabledPanel(1, Color.cyan));\n    add(new EnabledPanel(2, Color.lightGray));\n    add(new EnabledPanel(3, Color.yellow));\n    // You can also do it for Windows:\n    enableEvents(AWTEvent.WINDOW_EVENT_MASK);\n  }\n  public void processWindowEvent(WindowEvent e) {\n    System.out.println(e);\n    if(e.getID() == WindowEvent.WINDOW_CLOSING) {\n      System.out.println("Window Closing");\n      System.exit(0);\n    }\n  }\n  public static void main(String[] args) {\n    Frame f = new BadTechnique();\n    f.setTitle("Bad Technique");\n    f.setSize(700,700);\n    f.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("的确，它能够工作。但却实在太蹩脚，而且很难编写、阅读、调试、维护以及复用。既然如此，为什么还不使用内部接收器类呢？")])])}),[],!1,null,null,null);n.default=o.exports}}]);