(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{454:function(n,t,e){"use strict";e.r(t);var i=e(56),a=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_13-17-java-1-1用户接口api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-17-java-1-1用户接口api"}},[n._v("#")]),n._v(" 13.17 Java 1.1用户接口API")]),n._v(" "),e("p",[n._v("Java 1.1版同样增加了一些重要的新功能，包括焦点遍历，桌面色彩访问，打印“沙箱内”及早期的剪贴板支持。")]),n._v(" "),e("p",[n._v("焦点遍历十分的简单，因为它显然存在于AWT库里的组件并且我们不必为使它工作而去做任何事。如果我们制造我们自己组件并且想使它们去处理焦点遍历，我们重载"),e("code",[n._v("isFocusTraversable()")]),n._v("以使它返回真值。如果我们想在一个鼠标单击上捕捉键盘焦点，我们可以捕捉鼠标按下事件并且调用"),e("code",[n._v("requestFocus()")]),n._v("需求焦点方法。")]),n._v(" "),e("h2",{attrs:{id:"_13-17-1-桌面颜色"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-17-1-桌面颜色"}},[n._v("#")]),n._v(" 13.17.1 桌面颜色")]),n._v(" "),e("p",[n._v("利用桌面颜色，我们可知道当前用户桌面都有哪些颜色选择。这样一来，就可在必要的时候通过自己的程序来运用那些颜色。颜色都会得以自动初始化，并置于"),e("code",[n._v("SystemColor")]),n._v("的"),e("code",[n._v("static")]),n._v("成员中，所以要做的唯一事情就是读取自己感兴趣的成员。各种名字的意义是不言而喻的："),e("code",[n._v("desktop")]),n._v("，"),e("code",[n._v("activeCaption")]),n._v("， "),e("code",[n._v("activeCaptionText")]),n._v("，"),e("code",[n._v("activeCaptionBorder")]),n._v("， "),e("code",[n._v("inactiveCaption")]),n._v("， "),e("code",[n._v("inactiveCaptionText")]),n._v("，"),e("code",[n._v("inactiveCaptionBorder")]),n._v("， "),e("code",[n._v("window")]),n._v("， "),e("code",[n._v("windowBorder")]),n._v("， "),e("code",[n._v("windowText")]),n._v("， "),e("code",[n._v("menu")]),n._v("，"),e("code",[n._v("menuText")]),n._v("，"),e("code",[n._v("text")]),n._v("， "),e("code",[n._v("textText")]),n._v("， "),e("code",[n._v("textHighlight")]),n._v("， "),e("code",[n._v("textHighlightText")]),n._v("，"),e("code",[n._v("textInactiveText")]),n._v("，"),e("code",[n._v("control")]),n._v("， "),e("code",[n._v("controlText")]),n._v("， "),e("code",[n._v("controlHighlight")]),n._v("，"),e("code",[n._v("controlLtHighlight")]),n._v("，"),e("code",[n._v("controlShadow")]),n._v("，"),e("code",[n._v("controlDkShadow")]),n._v("， "),e("code",[n._v("scrollbar")]),n._v("， "),e("code",[n._v("info")]),n._v("（用于帮助）以及"),e("code",[n._v("infoText")]),n._v("（用于帮助文字）。")]),n._v(" "),e("h2",{attrs:{id:"_13-17-2-打印"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-17-2-打印"}},[n._v("#")]),n._v(" 13.17.2 打印")]),n._v(" "),e("p",[n._v("非常不幸，打印时没有多少事情是可以自动进行的。相反，为完成打印，我们必须经历大量机械的、非OO（面向对象）的步骤。但打印一个图形化的组件时，可能多少有点儿自动化的意思：默认情况下，"),e("code",[n._v("print()")]),n._v("方法会调用"),e("code",[n._v("paint()")]),n._v("来完成自己的工作。大多数时候这都已经足够了，但假如还想做一些特别的事情，就必须知道页面的几何尺寸。")]),n._v(" "),e("p",[n._v("下面这个例子同时演示了文字和图形的打印，以及打印图形时可以采取的不同方法。此外，它也对打印支持进行了测试：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: PrintDemo.java\n// Printing with Java 1.1\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class PrintDemo extends Frame {\n  Button\n    printText = new Button("Print Text"),\n    printGraphics = new Button("Print Graphics");\n  TextField ringNum = new TextField(3);\n  Choice faces = new Choice();\n  Graphics g = null;\n  Plot plot = new Plot3(); // Try different plots\n  Toolkit tk = Toolkit.getDefaultToolkit();\n  public PrintDemo() {\n    ringNum.setText("3");\n    ringNum.addTextListener(new RingL());\n    Panel p = new Panel();\n    p.setLayout(new FlowLayout());\n    printText.addActionListener(new TBL());\n    p.add(printText);\n    p.add(new Label("Font:"));\n    p.add(faces);\n    printGraphics.addActionListener(new GBL());\n    p.add(printGraphics);\n    p.add(new Label("Rings:"));\n    p.add(ringNum);\n    setLayout(new BorderLayout());\n    add(p, BorderLayout.NORTH);\n    add(plot, BorderLayout.CENTER);\n    String[] fontList = tk.getFontList();\n    for(int i = 0; i < fontList.length; i++)\n      faces.add(fontList[i]);\n    faces.select("Serif");\n  }\n  class PrintData {\n    public PrintJob pj;\n    public int pageWidth, pageHeight;\n    PrintData(String jobName) {\n      pj = getToolkit().getPrintJob(\n        PrintDemo.this, jobName, null);\n      if(pj != null) {\n        pageWidth = pj.getPageDimension().width;\n        pageHeight= pj.getPageDimension().height;\n        g = pj.getGraphics();\n      }\n    }\n    void end() { pj.end(); }\n  }\n  class ChangeFont {\n    private int stringHeight;\n    ChangeFont(String face, int style,int point){\n      if(g != null) {\n        g.setFont(new Font(face, style, point));\n        stringHeight =\n          g.getFontMetrics().getHeight();\n      }\n    }\n    int stringWidth(String s) {\n      return g.getFontMetrics().stringWidth(s);\n    }\n    int stringHeight() { return stringHeight; }\n  }\n  class TBL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      PrintData pd =\n        new PrintData("Print Text Test");\n      // Null means print job canceled:\n      if(pd == null) return;\n      String s = "PrintDemo";\n      ChangeFont cf = new ChangeFont(\n        faces.getSelectedItem(), Font.ITALIC,72);\n      g.drawString(s,\n        (pd.pageWidth - cf.stringWidth(s)) / 2,\n        (pd.pageHeight - cf.stringHeight()) / 3);\n\n      s = "A smaller point size";\n      cf = new ChangeFont(\n        faces.getSelectedItem(), Font.BOLD, 48);\n      g.drawString(s,\n        (pd.pageWidth - cf.stringWidth(s)) / 2,\n        (int)((pd.pageHeight -\n           cf.stringHeight())/1.5));\n      g.dispose();\n      pd.end();\n    }\n  }\n  class GBL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      PrintData pd =\n        new PrintData("Print Graphics Test");\n      if(pd == null) return;\n      plot.print(g);\n      g.dispose();\n      pd.end();\n    }\n  }\n  class RingL implements TextListener {\n    public void textValueChanged(TextEvent e) {\n      int i = 1;\n      try {\n        i = Integer.parseInt(ringNum.getText());\n      } catch(NumberFormatException ex) {\n        i = 1;\n      }\n      plot.rings = i;\n      plot.repaint();\n    }\n  }\n  public static void main(String[] args) {\n    Frame pdemo = new PrintDemo();\n    pdemo.setTitle("Print Demo");\n    pdemo.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    pdemo.setSize(500, 500);\n    pdemo.setVisible(true);\n  }\n}\n\nclass Plot extends Canvas {\n  public int rings = 3;\n}\n\nclass Plot1 extends Plot {\n  // Default print() calls paint():\n  public void paint(Graphics g) {\n    int w = getSize().width;\n    int h = getSize().height;\n    int xc = w / 2;\n    int yc = w / 2;\n    int x = 0, y = 0;\n    for(int i = 0; i < rings; i++) {\n      if(x < xc && y < yc) {\n        g.drawOval(x, y, w, h);\n        x += 10; y += 10;\n        w -= 20; h -= 20;\n      }\n    }\n  }\n}\n\nclass Plot2 extends Plot {\n  // To fit the picture to the page, you must\n  // know whether you\'re printing or painting:\n  public void paint(Graphics g) {\n    int w, h;\n    if(g instanceof PrintGraphics) {\n      PrintJob pj =\n        ((PrintGraphics)g).getPrintJob();\n      w = pj.getPageDimension().width;\n      h = pj.getPageDimension().height;\n    }\n    else {\n      w = getSize().width;\n      h = getSize().height;\n    }\n    int xc = w / 2;\n    int yc = w / 2;\n    int x = 0, y = 0;\n    for(int i = 0; i < rings; i++) {\n      if(x < xc && y < yc) {\n        g.drawOval(x, y, w, h);\n        x += 10; y += 10;\n        w -= 20; h -= 20;\n      }\n    }\n  }\n}\n\nclass Plot3 extends Plot {\n  // Somewhat better. Separate\n  // printing from painting:\n  public void print(Graphics g) {\n    // Assume it\'s a PrintGraphics object:\n    PrintJob pj =\n      ((PrintGraphics)g).getPrintJob();\n    int w = pj.getPageDimension().width;\n    int h = pj.getPageDimension().height;\n    doGraphics(g, w, h);\n  }\n  public void paint(Graphics g) {\n    int w = getSize().width;\n    int h = getSize().height;\n    doGraphics(g, w, h);\n  }\n  private void doGraphics(\n      Graphics g, int w, int h) {\n    int xc = w / 2;\n    int yc = w / 2;\n    int x = 0, y = 0;\n    for(int i = 0; i < rings; i++) {\n      if(x < xc && y < yc) {\n        g.drawOval(x, y, w, h);\n        x += 10; y += 10;\n        w -= 20; h -= 20;\n      }\n    }\n  }\n} ///:~\n')])])]),e("p",[n._v("这个程序允许我们从一个选择列表框中选择字体（并且我们会注意到很多有用的字体在Java 1.1版中一直受到严格的限制，我们没有任何可以利用的优秀字体安装在我们的机器上）。它使用这些字体去打出粗体，斜体和不同大小的文字。另外，一个新型组件调用过的绘图被创建，以用来示范图形。当打印图形时，绘图拥有的"),e("code",[n._v("ring")]),n._v("将显示在屏幕上和打印在纸上，并且这三个派生类"),e("code",[n._v("Plot1")]),n._v("，"),e("code",[n._v("Plot2")]),n._v("，"),e("code",[n._v("Plot3")]),n._v("用不同的方法去完成任务以便我们可以看到我们选择的事物。同样，我们也能在一个绘图中改变一些"),e("code",[n._v("ring")]),n._v("——这很有趣，因为它证明了Java 1.1版中打印的脆弱。在我的系统里，当"),e("code",[n._v("ring")]),n._v("计数显示"),e("code",[n._v("too high")]),n._v("（究竟这是什么意思？）时，打印机给出错误信息并且不能正确地工作，而当计数给出"),e("code",[n._v("low enough")]),n._v("信息时，打印机又能工作得很好。我们也会注意到，当打印到看起来实际大小不相符的纸时页面的大小便产生了。这些特点可能被装入到将来发行的Java中，我们可以使用这个程序来测试它。")]),n._v(" "),e("p",[n._v("这个程序为促进重复使用，不论何时都可以封装功能到内部类中。例如，不论何时我想开始打印工作（不论图形或文字），我必须创建一个"),e("code",[n._v("PrintJob")]),n._v("打印工作对象，该对象拥有它自己的连同页面宽度和高度的图形对象。创建的"),e("code",[n._v("PrintJob")]),n._v("打印工作对象和提取的页面尺寸一起被封装进"),e("code",[n._v("PrintData class")]),n._v("打印类中。")]),n._v(" "),e("p",[n._v("(1) 打印文字")]),n._v(" "),e("p",[n._v("打印文字的概念简单明了：我们选择一种字体和大小，决定字符串在页面上存在的位置，并且使用"),e("code",[n._v("Graphics.drawSrting()")]),n._v("方法在页面上画出字符串就行了。这意味着，不管怎样我们必须精确地计算每行字符串在页面上存在的位置并确定字符串不会超出页面底部或者同其它行冲突。如果我们想进行字处理，我们将进行的工作与我们很相配。"),e("code",[n._v("ChangeFont")]),n._v("封装进少量从一种字体到其它的字体的变更方法并自动地创建一个新字体对象和我们想要的字体，款式（粗体和斜体——目前还不支持下划线、空心等）以及点阵大小。它同样会简单地计算字符串的宽度和高度。当我们按下"),e("code",[n._v("Print text")]),n._v("按钮时，TBL接收器被激活。我们可以注意到它通过迭代创建"),e("code",[n._v("ChangeFont")]),n._v("对象和调用"),e("code",[n._v("drawString()")]),n._v("来在计算出的位置打印出字符串。注意是否这些计算产生预期的结果。（我使用的版本没有出错。）")]),n._v(" "),e("p",[n._v("(2) 打印图形")]),n._v(" "),e("p",[n._v("按下"),e("code",[n._v("Print graphics")]),n._v("按钮时，GBL接收器会被激活。我们需要打印时，创建的"),e("code",[n._v("PrintData")]),n._v("对象初始化，然后我们简单地为这个组件调用"),e("code",[n._v("print()")]),n._v("打印方法。为强制打印，我们必须为图形对象调用"),e("code",[n._v("dispose()")]),n._v("处理方法，并且为"),e("code",[n._v("PrintData")]),n._v("对象调用"),e("code",[n._v("end()")]),n._v("结束方法（或改变为为"),e("code",[n._v("PrintJob")]),n._v("调用"),e("code",[n._v("end()")]),n._v("结束方法。）")]),n._v(" "),e("p",[n._v("这种工作在绘图对象中继续。我们可以看到基类绘图是很简单的——它扩展画布并且包括一个中断调用"),e("code",[n._v("ring")]),n._v("来指明多少个集中的ring需要画在这个特殊的画布上。这三个派生类展示了可达到一个目的的不同的方法：画在屏幕上和打印的页面上。")]),n._v(" "),e("p",[e("code",[n._v("Plot1")]),n._v("采用最简单的编程方法：忽略绘画和打印的不同，并且重载"),e("code",[n._v("paint()")]),n._v("绘画方法。使用这种工作方法的原因是默认的"),e("code",[n._v("print()")]),n._v("打印方法简单地改变工作方法转而调用"),e("code",[n._v("Paint()")]),n._v("。但是，我们会注意到输出的尺寸依赖于屏幕上画布的大小，因为宽度和高度都是在调用"),e("code",[n._v("Canvas.getSize()")]),n._v("方法时决定是，所以这是合理的。如果我们图像的尺寸一值都是固定不变的，其它的情况都可接受。当画出的外观的大小如此的重要时，我们必须深入了解的尺寸大小的重要性。不凑巧的是，就像我们将在"),e("code",[n._v("Plot2")]),n._v("中看到的一样，这种方法变得很棘手。因为一些我们不知道的好的理由，我们不能简单地要求图形对象以它自己的大小画出外观。这将使整个的处理工作变得十分的优良。相反，如果我们打印而不是绘画，我们必须利用RTTI "),e("code",[n._v("instanceof")]),n._v("关键字（在本书11章中有相应描述）来测试"),e("code",[n._v("PrintGrapics")]),n._v("，然后向下转换并调用这独特的"),e("code",[n._v("PrintGraphics")]),n._v("方法："),e("code",[n._v("getPrintJob()")]),n._v("方法。现在我们拥有"),e("code",[n._v("PrintJob")]),n._v("的引用并且我们可以发现纸张的高度和宽度。这是一种hacky的方法，但也许这对它来说是合理的理由。（在其它方面，到如今我们看到一些其它的库设计，因此，我们可能会得到设计者们的想法。）")]),n._v(" "),e("p",[n._v("我们可以注意到"),e("code",[n._v("Plot2")]),n._v("中的"),e("code",[n._v("paint()")]),n._v("绘画方法对打印和绘图的可能性进行审查。但是因为当打印时"),e("code",[n._v("Print()")]),n._v("方法将被调用，那么为什么不使用那种方法呢？这种方法同样也在"),e("code",[n._v("Plot3")]),n._v("中也被使用，并且它消除了对"),e("code",[n._v("instanceof")]),n._v("使用的需求，因为在"),e("code",[n._v("Print()")]),n._v("方法中我们可以假设我们能对一个"),e("code",[n._v("PrintGraphics")]),n._v("对象转换。这样也不坏。这种情况被放置公共绘画代码到一个分离的"),e("code",[n._v("doGraphics()")]),n._v("方法的办法所改进。")]),n._v(" "),e("p",[n._v("(2) 在程序片内运行帧")]),n._v(" "),e("p",[n._v("如果我们想在一个程序片中打印会怎以样呢？很好，为了打印任何事物我们必须通过工具组件对象的"),e("code",[n._v("getPrintJob()")]),n._v("方法拥有一个"),e("code",[n._v("PrintJob")]),n._v("对象，设置唯一的一个帧对象而不是一个程序片对象。于是它似乎可能从一个应用程序中打印，而不是从一个程序片中打印。但是，它变为我们可以从一个程序片中创建一个帧（相反的到目前为止，我在程序片或应用程序例子中所做的，都可以生成程序片并安放帧。）。这是一个很有用的技术，因为它允许我们在程序片中使用一些应用程序（只要它们不妨碍程序片的安全）。但是，当应用程序窗口在程序片中出现时，我们会注意到WEB浏览器插入一些警告在它上面，其中一些产生“"),e("code",[n._v("Warning:Applet Window")]),n._v(".（警告：程序片窗口）”的字样。")]),n._v(" "),e("p",[n._v("我们会看到这种技术十分直接的安放一个帧到程序片中。唯一的事是当用户关闭它时我们必须增加帧的代码（代替调用"),e("code",[n._v("System.exit()")]),n._v("）：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: PrintDemoApplet.java\n// Creating a Frame from within an Applet\nimport java.applet.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class PrintDemoApplet extends Applet {\n  public void init() {\n    Button b = new Button("Run PrintDemo");\n    b.addActionListener(new PDL());\n    add(b);\n  }\n  class PDL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      final PrintDemo pd = new PrintDemo();\n      pd.addWindowListener(new WindowAdapter() {\n        public void windowClosing(WindowEvent e){\n          pd.dispose();\n        }\n      });\n      pd.setSize(500, 500);\n      pd.show();\n    }\n  }\n} ///:~\n')])])]),e("p",[n._v("伴随Java 1.1版的打印支持功能而来的是一些混乱。一些宣传似乎声明我们能在一个程序片中打印。但Java的安全系统包含了一个特点，可停止一个正在初始化打印工作的程序片，初始化程序片需要通过一个Web浏览器或程序片浏览器来进行。在写作这本书时，这看起来像留下了一个未定的争议。当我在WEB浏览器中运行这个程序时，"),e("code",[n._v("printdemo")]),n._v("（打印样本）窗口正好出现，但它却根本不能从浏览器中打印。")]),n._v(" "),e("h2",{attrs:{id:"_13-17-3-剪贴板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-17-3-剪贴板"}},[n._v("#")]),n._v(" 13.17.3 剪贴板")]),n._v(" "),e("p",[n._v("Java 1.1对系统剪贴板提供有限的操作支持（在"),e("code",[n._v("Java.awt.datatransfer package")]),n._v("里）。我们可以将字符串作这文字对象复制到剪贴板中，并且我们可以从剪贴板中粘贴文字到字符中对角中。当然，剪贴板被设计来容纳各种类型的数据，存在于剪贴板上的数据通过程序运行剪切和粘贴进入到程序中。虽然剪切板目前只支持字符串数据，Java的剪切板API通过“特色”概念提供了良好的可扩展性。当数据从剪贴板中出来时，它拥有一个相关的特色集，这个特色集可以被修改（例如，一个图形可以被表示成一些字符串或者一幅图像）并且我们会注意到如果特殊的剪贴板数据支持这种特色，我们会对此十分的感兴趣。")]),n._v(" "),e("p",[n._v("下面的程序简单地对"),e("code",[n._v("TextArea")]),n._v("中的字符串数据进行剪切，复制，粘贴的操作做了示范。我们将注意到的是我们需要按照剪切、复制和粘贴的顺序进行工作。但如果我们看见一些其它程序中的"),e("code",[n._v("TextField")]),n._v("或者"),e("code",[n._v("TextArea")]),n._v("，我们会发现它们同样也自动地支持剪贴板的操作顺序。程序中简单地增加了剪贴板的程序化控制，如果我们想用它来捕捉剪贴板上的文字到一些非文字组件中就可以使用这种技术。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: CutAndPaste.java\n// Using the clipboard from Java 1.1\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.awt.datatransfer.*;\n\npublic class CutAndPaste extends Frame {\n  MenuBar mb = new MenuBar();\n  Menu edit = new Menu("Edit");\n  MenuItem\n    cut = new MenuItem("Cut"),\n    copy = new MenuItem("Copy"),\n    paste = new MenuItem("Paste");\n  TextArea text = new TextArea(20,20);\n  Clipboard clipbd =\n    getToolkit().getSystemClipboard();\n  public CutAndPaste() {\n    cut.addActionListener(new CutL());\n    copy.addActionListener(new CopyL());\n    paste.addActionListener(new PasteL());\n    edit.add(cut);\n    edit.add(copy);\n    edit.add(paste);\n    mb.add(edit);\n    setMenuBar(mb);\n    add(text, BorderLayout.CENTER);\n  }\n  class CopyL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      String selection = text.getSelectedText();\n      StringSelection clipString =\n        new StringSelection(selection);\n      clipbd.setContents(clipString, clipString);\n    }\n  }\n  class CutL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      String selection = text.getSelectedText();\n      StringSelection clipString =\n        new StringSelection(selection);\n      clipbd.setContents(clipString, clipString);\n      text.replaceRange("",\n        text.getSelectionStart(),\n        text.getSelectionEnd());\n    }\n  }\n  class PasteL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      Transferable clipData =\n        clipbd.getContents(CutAndPaste.this);\n      try {\n        String clipString =\n          (String)clipData.\n            getTransferData(\n              DataFlavor.stringFlavor);\n        text.replaceRange(clipString,\n          text.getSelectionStart(),\n          text.getSelectionEnd());\n      } catch(Exception ex) {\n        System.out.println("not String flavor");\n      }\n    }\n  }\n  public static void main(String[] args) {\n    CutAndPaste cp = new CutAndPaste();\n    cp.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    cp.setSize(300,200);\n    cp.setVisible(true);\n  }\n} ///:~\n')])])]),e("p",[n._v("创建和增加菜单及"),e("code",[n._v("TextArea")]),n._v("到如今似乎已变成一种单调的活动。这与通过工具组件创建的剪贴板字段"),e("code",[n._v("clipbd")]),n._v("有很大的区别。")]),n._v(" "),e("p",[n._v("所有的动作都安置在接收器中。"),e("code",[n._v("CopyL")]),n._v("和"),e("code",[n._v("Cupl")]),n._v("接收器同样除了最后的"),e("code",[n._v("CutL")]),n._v("线以外删除被复制的线。特殊的两条线是"),e("code",[n._v("StringSelection")]),n._v("对象从字符串从创建并调用"),e("code",[n._v("StringSelection")]),n._v("的"),e("code",[n._v("setContents()")]),n._v("方法。说得更准确些，就是放一个字符串到剪切板上。")]),n._v(" "),e("p",[n._v("在"),e("code",[n._v("PasteL")]),n._v("中，数据被剪贴板利用"),e("code",[n._v("getContents()")]),n._v("进行分解。任何返回的对象都是可移动的匿名的，并且我们并不真正地知道它里面包含了什么。有一种发现的方法是调用"),e("code",[n._v("getTransferDateFlavors()")]),n._v("，返回一个"),e("code",[n._v("DataFlavor")]),n._v("对象数组，表明特殊对象支持这种特点。我们同样能要求它通过我们感兴趣的特点直接地使用"),e("code",[n._v("IsDataFlavorSupported()")]),n._v("。但是在这里使用一种大胆的方法：调用"),e("code",[n._v("getTransferData()")]),n._v("方法，假设里面的内容支持字符串特色，并且它不是个被分类在异常处理器中的难题 。")]),n._v(" "),e("p",[n._v("在将来，我们希望更多的数据特色能够被支持。")])])}),[],!1,null,null,null);t.default=a.exports}}]);