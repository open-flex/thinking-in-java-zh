(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{471:function(e,n,a){"use strict";a.r(n);var r=a(56),t=Object(r.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_14-4-优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-4-优先级"}},[e._v("#")]),e._v(" 14.4 优先级")]),e._v(" "),a("p",[e._v("线程的优先级（Priority）告诉调试程序该线程的重要程度有多大。如果有大量线程都被堵塞，都在等候运行，调试程序会首先运行具有最高优先级的那个线程。然而，这并不表示优先级较低的线程不会运行（换言之，不会因为存在优先级而导致死锁）。若线程的优先级较低，只不过表示它被准许运行的机会小一些而已。")]),e._v(" "),a("p",[e._v("可用"),a("code",[e._v("getPriority()")]),e._v("方法读取一个线程的优先级，并用"),a("code",[e._v("setPriority()")]),e._v("改变它。在下面这个程序片中，大家会发现计数器的计数速度慢了下来，因为它们关联的线程分配了较低的优先级：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Counter5.java\n// Adjusting the priorities of threads\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\nclass Ticker2 extends Thread {\n  private Button\n    b = new Button("Toggle"),\n    incPriority = new Button("up"),\n    decPriority = new Button("down");\n  private TextField\n    t = new TextField(10),\n    pr = new TextField(3); // Display priority\n  private int count = 0;\n  private boolean runFlag = true;\n  public Ticker2(Container c) {\n    b.addActionListener(new ToggleL());\n    incPriority.addActionListener(new UpL());\n    decPriority.addActionListener(new DownL());\n    Panel p = new Panel();\n    p.add(t);\n    p.add(pr);\n    p.add(b);\n    p.add(incPriority);\n    p.add(decPriority);\n    c.add(p);\n  }\n  class ToggleL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      runFlag = !runFlag;\n    }\n  }\n  class UpL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      int newPriority = getPriority() + 1;\n      if(newPriority > Thread.MAX_PRIORITY)\n        newPriority = Thread.MAX_PRIORITY;\n      setPriority(newPriority);\n    }\n  }\n  class DownL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      int newPriority = getPriority() - 1;\n      if(newPriority < Thread.MIN_PRIORITY)\n        newPriority = Thread.MIN_PRIORITY;\n      setPriority(newPriority);\n    }\n  }\n  public void run() {\n    while (true) {\n      if(runFlag) {\n        t.setText(Integer.toString(count++));\n        pr.setText(\n          Integer.toString(getPriority()));\n      }\n      yield();\n    }\n  }\n}\n\npublic class Counter5 extends Applet {\n  private Button\n    start = new Button("Start"),\n    upMax = new Button("Inc Max Priority"),\n    downMax = new Button("Dec Max Priority");\n  private boolean started = false;\n  private static final int SIZE = 10;\n  private Ticker2[] s = new Ticker2[SIZE];\n  private TextField mp = new TextField(3);\n  public void init() {\n    for(int i = 0; i < s.length; i++)\n      s[i] = new Ticker2(this);\n    add(new Label("MAX_PRIORITY = "\n      + Thread.MAX_PRIORITY));\n    add(new Label("MIN_PRIORITY = "\n      + Thread.MIN_PRIORITY));\n    add(new Label("Group Max Priority = "));\n    add(mp);\n    add(start);\n    add(upMax); add(downMax);\n    start.addActionListener(new StartL());\n    upMax.addActionListener(new UpMaxL());\n    downMax.addActionListener(new DownMaxL());\n    showMaxPriority();\n    // Recursively display parent thread groups:\n    ThreadGroup parent =\n      s[0].getThreadGroup().getParent();\n    while(parent != null) {\n      add(new Label(\n        "Parent threadgroup max priority = "\n        + parent.getMaxPriority()));\n      parent = parent.getParent();\n    }\n  }\n  public void showMaxPriority() {\n    mp.setText(Integer.toString(\n      s[0].getThreadGroup().getMaxPriority()));\n  }\n  class StartL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(!started) {\n        started = true;\n        for(int i = 0; i < s.length; i++)\n          s[i].start();\n      }\n    }\n  }\n  class UpMaxL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      int maxp =\n        s[0].getThreadGroup().getMaxPriority();\n      if(++maxp > Thread.MAX_PRIORITY)\n        maxp = Thread.MAX_PRIORITY;\n      s[0].getThreadGroup().setMaxPriority(maxp);\n      showMaxPriority();\n    }\n  }\n  class DownMaxL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      int maxp =\n        s[0].getThreadGroup().getMaxPriority();\n      if(--maxp < Thread.MIN_PRIORITY)\n        maxp = Thread.MIN_PRIORITY;\n      s[0].getThreadGroup().setMaxPriority(maxp);\n      showMaxPriority();\n    }\n  }\n  public static void main(String[] args) {\n    Counter5 applet = new Counter5();\n    Frame aFrame = new Frame("Counter5");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300, 600);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),a("p",[a("code",[e._v("Ticker")]),e._v("采用本章前面构造好的形式，但有一个额外的"),a("code",[e._v("TextField")]),e._v("（文本字段），用于显示线程的优先级；以及两个额外的按钮，用于人为提高及降低优先级。")]),e._v(" "),a("p",[e._v("也要注意"),a("code",[e._v("yield()")]),e._v("的用法，它将控制权自动返回给调试程序（机制）。若不进行这样的处理，多线程机制仍会工作，但我们会发现它的运行速度慢了下来（试试删去对"),a("code",[e._v("yield()")]),e._v("的调用）。亦可调用"),a("code",[e._v("sleep()")]),e._v("，但假若那样做，计数频率就会改由"),a("code",[e._v("sleep()")]),e._v("的持续时间控制，而不是优先级。")]),e._v(" "),a("p",[a("code",[e._v("Counter5")]),e._v("中的"),a("code",[e._v("init()")]),e._v("创建了由10个"),a("code",[e._v("Ticker2")]),e._v("构成的一个数组；它们的按钮以及输入字段（文本字段）由"),a("code",[e._v("Ticker2")]),e._v("构造器置入窗体。"),a("code",[e._v("Counter5")]),e._v("增加了新的按钮，用于启动一切，以及用于提高和降低线程组的最大优先级。除此以外，还有一些标签用于显示一个线程可以采用的最大及最小优先级；以及一个特殊的文本字段，用于显示线程组的最大优先级（在下一节里，我们将全面讨论线程组的问题）。最后，父线程组的优先级也作为标签显示出来。")]),e._v(" "),a("p",[e._v("按下"),a("code",[e._v("up")]),e._v("（上）或"),a("code",[e._v("down")]),e._v("（下）按钮的时候，会先取得"),a("code",[e._v("Ticker2")]),e._v("当前的优先级，然后相应地提高或者降低。")]),e._v(" "),a("p",[e._v("运行该程序时，我们可注意到几件事情。首先，线程组的默认优先级是5。即使在启动线程之前（或者在创建线程之前，这要求对代码进行适当的修改）将最大优先级降到5以下，每个线程都会有一个5的默认优先级。")]),e._v(" "),a("p",[e._v("最简单的测试是获取一个计数器，将它的优先级降低至1，此时应观察到它的计数频率显著放慢。现在试着再次提高优先级，可以升高回线程组的优先级，但不能再高了。现在将线程组的优先级降低两次。线程的优先级不会改变，但假若试图提高或者降低它，就会发现这个优先级自动变成线程组的优先级。此外，新线程仍然具有一个默认优先级，即使它比组的优先级还要高（换句话说，不要指望利用组优先级来防止新线程拥有比现有的更高的优先级）。")]),e._v(" "),a("p",[e._v("最后，试着提高组的最大优先级。可以发现，这样做是没有效果的。我们只能减少线程组的最大优先级，而不能增大它。")]),e._v(" "),a("h2",{attrs:{id:"_14-4-1-线程组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-4-1-线程组"}},[e._v("#")]),e._v(" 14.4.1 线程组")]),e._v(" "),a("p",[e._v("所有线程都隶属于一个线程组。那可以是一个默认线程组，亦可是一个创建线程时明确指定的组。在创建之初，线程被限制到一个组里，而且不能改变到一个不同的组。每个应用都至少有一个线程从属于系统线程组。若创建多个线程而不指定一个组，它们就会自动归属于系统线程组。")]),e._v(" "),a("p",[e._v("线程组也必须从属于其他线程组。必须在构造器里指定新线程组从属于哪个线程组。若在创建一个线程组的时候没有指定它的归属，则同样会自动成为系统线程组的一名属下。因此，一个应用程序中的所有线程组最终都会将系统线程组作为自己的“父”。")]),e._v(" "),a("p",[e._v("之所以要提出“线程组”的概念，很难从字面上找到原因。这多少为我们讨论的主题带来了一些混乱。一般地说，我们认为是由于“安全”或者“保密”方面的理由才使用线程组的。根据Arnold和Gosling的说法：“线程组中的线程可以修改组内的其他线程，包括那些位于分层结构最深处的。一个线程不能修改位于自己所在组或者下属组之外的任何线程”（注释①）。然而，我们很难判断“修改”在这儿的具体含义是什么。下面这个例子展示了位于一个“叶子组”内的线程能修改它所在线程组树的所有线程的优先级，同时还能为这个“树”内的所有线程都调用一个方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('①：《The Java Programming Language》第179页。该书由Arnold和Jams Gosling编著，Addison-Wesley于1996年出版\n//: TestAccess.java\n// How threads can access other threads\n// in a parent thread group\n\npublic class TestAccess {\n  public static void main(String[] args) {\n    ThreadGroup\n      x = new ThreadGroup("x"),\n      y = new ThreadGroup(x, "y"),\n      z = new ThreadGroup(y, "z");\n    Thread\n      one = new TestThread1(x, "one"),\n      two = new TestThread2(z, "two");\n  }\n}\n\nclass TestThread1 extends Thread {\n  private int i;\n  TestThread1(ThreadGroup g, String name) {\n    super(g, name);\n  }\n  void f() {\n    i++; // modify this thread\n    System.out.println(getName() + " f()");\n  }\n}\n\nclass TestThread2 extends TestThread1 {\n  TestThread2(ThreadGroup g, String name) {\n    super(g, name);\n    start();\n  }\n  public void run() {\n    ThreadGroup g =\n      getThreadGroup().getParent().getParent();\n    g.list();\n    Thread[] gAll = new Thread[g.activeCount()];\n    g.enumerate(gAll);\n    for(int i = 0; i < gAll.length; i++) {\n      gAll[i].setPriority(Thread.MIN_PRIORITY);\n      ((TestThread1)gAll[i]).f();\n    }\n    g.list();\n  }\n} ///:~\n\n')])])]),a("p",[e._v("在"),a("code",[e._v("main()")]),e._v("中，我们创建了几个"),a("code",[e._v("ThreadGroup")]),e._v("（线程组），每个都位于不同的“叶”上："),a("code",[e._v("x")]),e._v("没有参数，只有它的名字（一个"),a("code",[e._v("String")]),e._v("），所以会自动进入"),a("code",[e._v("system")]),e._v("（系统）线程组；"),a("code",[e._v("y")]),e._v("位于"),a("code",[e._v("x")]),e._v("下方，而"),a("code",[e._v("z")]),e._v("位于"),a("code",[e._v("y")]),e._v("下方。注意初始化是按照文字顺序进行的，所以代码合法。")]),e._v(" "),a("p",[e._v("有两个线程创建之后进入了不同的线程组。其中，"),a("code",[e._v("TestThread1")]),e._v("没有一个"),a("code",[e._v("run()")]),e._v("方法，但有一个"),a("code",[e._v("f()")]),e._v("，用于通知线程以及打印出一些东西，以便我们知道它已被调用。而"),a("code",[e._v("TestThread2")]),e._v("属于"),a("code",[e._v("TestThread1")]),e._v("的一个子类，它的"),a("code",[e._v("run()")]),e._v("非常详尽，要做许多事情。首先，它获得当前线程所在的线程组，然后利用"),a("code",[e._v("getParent()")]),e._v("在继承树中向上移动两级（这样做是有道理的，因为我想把"),a("code",[e._v("TestThread2")]),e._v("在分级结构中向下移动两级）。随后，我们调用方法"),a("code",[e._v("activeCount()")]),e._v("，查询这个线程组以及所有子线程组内有多少个线程，从而创建由指向"),a("code",[e._v("Thread")]),e._v("的引用构成的一个数组。"),a("code",[e._v("enumerate()")]),e._v("方法将指向所有这些线程的引用置入数组"),a("code",[e._v("gAll")]),e._v("里。然后在整个数组里遍历，为每个线程都调用"),a("code",[e._v("f()")]),e._v("方法，同时修改优先级。这样一来，位于一个“叶子”线程组里的线程就修改了位于父线程组的线程。")]),e._v(" "),a("p",[e._v("调试方法"),a("code",[e._v("list()")]),e._v("打印出与一个线程组有关的所有信息，把它们作为标准输出。在我们对线程组的行为进行调查的时候，这样做是相当有好处的。下面是程序的输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("java.lang.ThreadGroup[name=x,maxpri=10]\n    Thread[one,5,x]\n    java.lang.ThreadGroup[name=y,maxpri=10]\n        java.lang.ThreadGroup[name=z,maxpri=10]\n            Thread[two,5,z]\none f()\ntwo f()\njava.lang.ThreadGroup[name=x,maxpri=10]\n    Thread[one,1,x]\n    java.lang.ThreadGroup[name=y,maxpri=10]\n        java.lang.ThreadGroup[name=z,maxpri=10]\n            Thread[two,1,z]\n")])])]),a("p",[a("code",[e._v("list()")]),e._v("不仅打印出"),a("code",[e._v("ThreadGroup")]),e._v("或者"),a("code",[e._v("Thread")]),e._v("的类名，也打印出了线程组的名字以及它的最高优先级。对于线程，则打印出它们的名字，并接上线程优先级以及所属的线程组。注意"),a("code",[e._v("list()")]),e._v("会对线程和线程组进行缩排处理，指出它们是未缩排的线程组的“子”。")]),e._v(" "),a("p",[e._v("大家可看到"),a("code",[e._v("f()")]),e._v("是由"),a("code",[e._v("TestThread2")]),e._v("的"),a("code",[e._v("run()")]),e._v("方法调用的，所以很明显，组内的所有线程都是相当脆弱的。然而，我们只能访问那些从自己的"),a("code",[e._v("system")]),e._v("线程组树分支出来的线程，而且或许这就是所谓“安全”的意思。我们不能访问其他任何人的系统线程树。")]),e._v(" "),a("p",[e._v("(1) 线程组的控制")]),e._v(" "),a("p",[e._v("抛开安全问题不谈，线程组最有用的一个地方就是控制：只需用单个命令即可完成对整个线程组的操作。下面这个例子演示了这一点，并对线程组内优先级的限制进行了说明。括号内的注释数字便于大家比较输出结果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: ThreadGroup1.java\n// How thread groups control priorities\n// of the threads inside them.\n\npublic class ThreadGroup1 {\n  public static void main(String[] args) {\n    // Get the system thread & print its Info:\n    ThreadGroup sys =\n      Thread.currentThread().getThreadGroup();\n    sys.list(); // (1)\n    // Reduce the system thread group priority:\n    sys.setMaxPriority(Thread.MAX_PRIORITY - 1);\n    // Increase the main thread priority:\n    Thread curr = Thread.currentThread();\n    curr.setPriority(curr.getPriority() + 1);\n    sys.list(); // (2)\n    // Attempt to set a new group to the max:\n    ThreadGroup g1 = new ThreadGroup("g1");\n    g1.setMaxPriority(Thread.MAX_PRIORITY);\n    // Attempt to set a new thread to the max:\n    Thread t = new Thread(g1, "A");\n    t.setPriority(Thread.MAX_PRIORITY);\n    g1.list(); // (3)\n    // Reduce g1\'s max priority, then attempt\n    // to increase it:\n    g1.setMaxPriority(Thread.MAX_PRIORITY - 2);\n    g1.setMaxPriority(Thread.MAX_PRIORITY);\n    g1.list(); // (4)\n    // Attempt to set a new thread to the max:\n    t = new Thread(g1, "B");\n    t.setPriority(Thread.MAX_PRIORITY);\n    g1.list(); // (5)\n    // Lower the max priority below the default\n    // thread priority:\n    g1.setMaxPriority(Thread.MIN_PRIORITY + 2);\n    // Look at a new thread\'s priority before\n    // and after changing it:\n    t = new Thread(g1, "C");\n    g1.list(); // (6)\n    t.setPriority(t.getPriority() -1);\n    g1.list(); // (7)\n    // Make g2 a child Threadgroup of g1 and\n    // try to increase its priority:\n    ThreadGroup g2 = new ThreadGroup(g1, "g2");\n    g2.list(); // (8)\n    g2.setMaxPriority(Thread.MAX_PRIORITY);\n    g2.list(); // (9)\n    // Add a bunch of new threads to g2:\n    for (int i = 0; i < 5; i++)\n      new Thread(g2, Integer.toString(i));\n    // Show information about all threadgroups\n    // and threads:\n    sys.list(); // (10)\n    System.out.println("Starting all threads:");\n    Thread[] all = new Thread[sys.activeCount()];\n    sys.enumerate(all);\n    for(int i = 0; i < all.length; i++)\n      if(!all[i].isAlive())\n        all[i].start();\n    // Suspends & Stops all threads in\n    // this group and its subgroups:\n    System.out.println("All threads started");\n    sys.suspend(); // Deprecated in Java 1.2\n    // Never gets here...\n    System.out.println("All threads suspended");\n    sys.stop(); // Deprecated in Java 1.2\n    System.out.println("All threads stopped");\n  }\n} ///:~\n')])])]),a("p",[e._v("下面的输出结果已进行了适当的编辑，以便用一页能够装下（"),a("code",[e._v("java.lang.")]),e._v("已被删去），而且添加了适当的数字，与前面程序列表中括号里的数字对应：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(1) ThreadGroup[name=system,maxpri=10]\n      Thread[main,5,system]\n(2) ThreadGroup[name=system,maxpri=9]\n      Thread[main,6,system]\n(3) ThreadGroup[name=g1,maxpri=9]\n      Thread[A,9,g1]\n(4) ThreadGroup[name=g1,maxpri=8]\n      Thread[A,9,g1]\n(5) ThreadGroup[name=g1,maxpri=8]\n      Thread[A,9,g1]\n      Thread[B,8,g1]\n(6) ThreadGroup[name=g1,maxpri=3]\n      Thread[A,9,g1]\n      Thread[B,8,g1]\n      Thread[C,6,g1]\n(7) ThreadGroup[name=g1,maxpri=3]\n      Thread[A,9,g1]\n      Thread[B,8,g1]\n      Thread[C,3,g1]\n(8) ThreadGroup[name=g2,maxpri=3]\n(9) ThreadGroup[name=g2,maxpri=3]\n(10)ThreadGroup[name=system,maxpri=9]\n      Thread[main,6,system]\n      ThreadGroup[name=g1,maxpri=3]\n        Thread[A,9,g1]\n        Thread[B,8,g1]\n        Thread[C,3,g1]\n        ThreadGroup[name=g2,maxpri=3]\n          Thread[0,6,g2]\n          Thread[1,6,g2]\n          Thread[2,6,g2]\n          Thread[3,6,g2]\n          Thread[4,6,g2]\nStarting all threads:\nAll threads started\n")])])]),a("p",[e._v("所有程序都至少有一个线程在运行，而且"),a("code",[e._v("main()")]),e._v("采取的第一项行动便是调用"),a("code",[e._v("Thread")]),e._v("的一个"),a("code",[e._v("static")]),e._v("（静态）方法，名为"),a("code",[e._v("currentThread()")]),e._v("。从这个线程开始，线程组将被创建，而且会为结果调用"),a("code",[e._v("list()")]),e._v("。输出如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(1) ThreadGroup[name=system,maxpri=10]\n      Thread[main,5,system]\n")])])]),a("p",[e._v("我们可以看到，主线程组的名字是"),a("code",[e._v("system")]),e._v("，而主线程的名字是"),a("code",[e._v("main")]),e._v("，而且它从属于"),a("code",[e._v("system")]),e._v("线程组。")]),e._v(" "),a("p",[e._v("第二个练习显示出"),a("code",[e._v("system")]),e._v("组的最高优先级可以减少，而且"),a("code",[e._v("main")]),e._v("线程可以增大自己的优先级：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(2) ThreadGroup[name=system,maxpri=9]\n      Thread[main,6,system]\n")])])]),a("p",[e._v("第三个练习创建一个新的线程组，名为"),a("code",[e._v("g1")]),e._v("；它自动从属于"),a("code",[e._v("system")]),e._v("线程组，因为并没有明确指定它的归属关系。我们在"),a("code",[e._v("g1")]),e._v("内部放置了一个新线程，名为"),a("code",[e._v("A")]),e._v("。随后，我们试着将这个组的最大优先级设到最高的级别，并将"),a("code",[e._v("A")]),e._v("的优先级也设到最高一级。结果如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(3) ThreadGroup[name=g1,maxpri=9]\n      Thread[A,9,g1]\n")])])]),a("p",[e._v("可以看出，不可能将线程组的最大优先级设为高于它的父线程组。")]),e._v(" "),a("p",[e._v("第四个练习将"),a("code",[e._v("g1")]),e._v("的最大优先级降低两级，然后试着把它升至"),a("code",[e._v("Thread.MAX_PRIORITY")]),e._v("。结果如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(4) ThreadGroup[name=g1,maxpri=8]\n      Thread[A,9,g1]\n")])])]),a("p",[e._v("同样可以看出，提高最大优先级的企图是失败的。我们只能降低一个线程组的最大优先级，而不能提高它。此外，注意线程A的优先级并未改变，而且它现在高于线程组的最大优先级。也就是说，线程组最大优先级的变化并不能对现有线程造成影响。")]),e._v(" "),a("p",[e._v("第五个练习试着将一个新线程设为最大优先级。如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(5) ThreadGroup[name=g1,maxpri=8]\n      Thread[A,9,g1]\n      Thread[B,8,g1]\n")])])]),a("p",[e._v("因此，新线程不能变到比最大线程组优先级还要高的一级。")]),e._v(" "),a("p",[e._v("这个程序的默认线程优先级是6；若新建一个线程，那就是它的默认优先级，而且不会发生变化，除非对优先级进行了特别的处理。练习六将把线程组的最大优先级降至默认线程优先级以下，看看在这种情况下新建一个线程会发生什么事情：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(6) ThreadGroup[name=g1,maxpri=3]\n      Thread[A,9,g1]\n      Thread[B,8,g1]\n      Thread[C,6,g1]\n")])])]),a("p",[e._v("尽管线程组现在的最大优先级是3，但仍然用默认优先级6来创建新线程。所以，线程组的最大优先级不会影响默认优先级（事实上，似乎没有办法可以设置新线程的默认优先级）。")]),e._v(" "),a("p",[e._v("改变了优先级后，接下来试试将其降低一级，结果如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(7) ThreadGroup[name=g1,maxpri=3]\n      Thread[A,9,g1]\n      Thread[B,8,g1]\n      Thread[C,3,g1]\n")])])]),a("p",[e._v("因此，只有在试图改变优先级的时候，才会强迫遵守线程组最大优先级的限制。")]),e._v(" "),a("p",[e._v("我们在(8)和(9)中进行了类似的试验。在这里，我们创建了一个新的线程组，名为"),a("code",[e._v("g2")]),e._v("，将其作为"),a("code",[e._v("g1")]),e._v("的一个子组，并改变了它的最大优先级。大家可以看到，"),a("code",[e._v("g2")]),e._v("的优先级无论如何都不可能高于"),a("code",[e._v("g1")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(8) ThreadGroup[name=g2,maxpri=3]\n(9) ThreadGroup[name=g2,maxpri=3]\n")])])]),a("p",[e._v("也要注意在"),a("code",[e._v("g2")]),e._v("创建的时候，它会被自动设为"),a("code",[e._v("g1")]),e._v("的线程组最大优先级。")]),e._v(" "),a("p",[e._v("经过所有这些实验以后，整个线程组和线程系统都会被打印出来，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(10)ThreadGroup[name=system,maxpri=9]\n      Thread[main,6,system]\n      ThreadGroup[name=g1,maxpri=3]\n        Thread[A,9,g1]\n        Thread[B,8,g1]\n        Thread[C,3,g1]\n        ThreadGroup[name=g2,maxpri=3]\n          Thread[0,6,g2]\n          Thread[1,6,g2]\n          Thread[2,6,g2]\n          Thread[3,6,g2]\n          Thread[4,6,g2]\n")])])]),a("p",[e._v("所以由线程组的规则所限，一个子组的最大优先级在任何时候都只能低于或等于它的父组的最大优先级。")]),e._v(" "),a("p",[e._v("本程序的最后一个部分演示了用于整组线程的方法。程序首先遍历整个线程树，并启动每一个尚未启动的线程。例如，"),a("code",[e._v("system")]),e._v("组随后会被挂起（暂停），最后被中止（尽管用"),a("code",[e._v("suspend()")]),e._v("和"),a("code",[e._v("stop()")]),e._v("对整个线程组进行操作看起来似乎很有趣，但应注意这些方法在Java 1.2里都是被“反对”的）。但在挂起"),a("code",[e._v("system")]),e._v("组的同时，也挂起了"),a("code",[e._v("main")]),e._v("线程，而且整个程序都会关闭。所以永远不会达到让线程中止的那一步。实际上，假如真的中止了"),a("code",[e._v("main")]),e._v("线程，它会“抛”出一个"),a("code",[e._v("ThreadDeath")]),e._v("异常，所以我们通常不这样做。由于"),a("code",[e._v("ThreadGroup")]),e._v("是从"),a("code",[e._v("Object")]),e._v("继承的，其中包含了"),a("code",[e._v("wait()")]),e._v("方法，所以也能调用"),a("code",[e._v("wait(秒数×1000)")]),e._v("，令程序暂停运行任意秒数的时间。当然，事前必须在一个同步块里取得对象锁。")]),e._v(" "),a("p",[a("code",[e._v("ThreadGroup")]),e._v("类也提供了"),a("code",[e._v("suspend()")]),e._v("和"),a("code",[e._v("resume()")]),e._v("方法，所以能中止和启动整个线程组和它的所有线程，也能中止和启动它的子组，所有这些只需一个命令即可（再次提醒，"),a("code",[e._v("suspend()")]),e._v("和"),a("code",[e._v("resume()")]),e._v("都是Java 1.2所“反对”的）。")]),e._v(" "),a("p",[e._v("从表面看，线程组似乎有些让人摸不着头脑，但请注意我们很少需要直接使用它们。")])])}),[],!1,null,null,null);n.default=t.exports}}]);