(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{563:function(t,e,n){"use strict";n.r(e);var i=n(56),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_8-7-新集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-新集合"}},[t._v("#")]),t._v(" 8.7 新集合")]),t._v(" "),n("p",[t._v("对我来说，集合类属于最强大的一种工具，特别适合在原创编程中使用。大家可能已感觉到我对Java 1.1提供的集合多少有点儿失望。因此，看到Java 1.2对集合重新引起了正确的注意后，确实令人非常愉快。这个版本的集合也得到了完全的重新设计（由Sun公司的Joshua Bloch）。我认为新设计的集合是Java 1.2中两项最主要的特性之一（另一项是Swing库，将在第13章叙述），因为它们极大方便了我们的编程，也使Java变成一种更成熟的编程系统。")]),t._v(" "),n("p",[t._v("有些设计使得元素间的结合变得更紧密，也更容易让人理解。例如，许多名字都变得更短、更明确了，而且更易使用；类型同样如此。有些名字进行了修改，更接近于通俗：我感觉特别好的一个是用“迭代器”（"),n("code",[t._v("Inerator")]),t._v("）代替了“枚举”（"),n("code",[t._v("Enumeration")]),t._v("）。")]),t._v(" "),n("p",[t._v("此次重新设计也加强了集合库的功能。现在新增的行为包括链接列表、队列以及撤消组队（即“双终点队列”）。")]),t._v(" "),n("p",[t._v("集合库的设计是相当困难的（会遇到大量库设计问题）。在C++中，STL用多个不同的类来覆盖基础。这种做法比起STL以前是个很大的进步，那时根本没做这方面的考虑。但仍然没有很好地转换到Java里面。结果就是一大堆特别容易混淆的类。在另一个极端，我曾发现一个集合库由单个类构成："),n("code",[t._v("collection")]),t._v("，它同时作为"),n("code",[t._v("Vector")]),t._v("和"),n("code",[t._v("Hashtable")]),t._v("使用。新集合库的设计者则希望达到一种新的平衡：实现人们希望从一个成熟集合库上获得的完整功能，同时又要比STL和其他类似的集合库更易学习和使用。这样得到的结果在某些场合显得有些古怪。但和早期Java库的一些决策不同，这些古怪之处并非偶然出现的，而是以复杂性作为代价，在进行仔细权衡之后得到的结果。这样做也许会延长人们掌握一些库概念的时间，但很快就会发现自己很乐于使用那些新工具，而且变得越来越离不了它。")]),t._v(" "),n("p",[t._v("新的集合库考虑到了“容纳自己对象”的问题，并将其分割成两个明确的概念：")]),t._v(" "),n("p",[t._v("(1) 集合（"),n("code",[t._v("Collection")]),t._v("）：一组单独的元素，通常应用了某种规则。在这里，一个"),n("code",[t._v("List")]),t._v("（列表）必须按特定的顺序容纳元素，而一个"),n("code",[t._v("Set")]),t._v("（集）不可包含任何重复的元素。相反，“包”（"),n("code",[t._v("Bag")]),t._v("）的概念未在新的集合库中实现，因为“列表”已提供了类似的功能。")]),t._v(" "),n("p",[t._v("(2) 映射（"),n("code",[t._v("Map")]),t._v("）：一系列“键－值”对（这已在散列表身上得到了充分的体现）。从表面看，这似乎应该成为一个“键－值”对的“集合”，但假若试图按那种方式实现它，就会发现实现过程相当笨拙。这进一步证明了应该分离成单独的概念。另一方面，可以方便地查看Map的某个部分。只需创建一个集合，然后用它表示那一部分即可。这样一来，"),n("code",[t._v("Map")]),t._v("就可以返回自己键的一个"),n("code",[t._v("Set")]),t._v("、一个包含自己值的"),n("code",[t._v("List")]),t._v("或者包含自己“键－值”对的一个"),n("code",[t._v("List")]),t._v("。和数组相似，"),n("code",[t._v("Map")]),t._v("可方便扩充到多个“维”，毋需涉及任何新概念。只需简单地在一个"),n("code",[t._v("Map")]),t._v("里包含其他"),n("code",[t._v("Map")]),t._v("（后者又可以包含更多的"),n("code",[t._v("Map")]),t._v("，以此类推）。")]),t._v(" "),n("p",[n("code",[t._v("Collection")]),t._v("和"),n("code",[t._v("Map")]),t._v("可通过多种形式实现，具体由编程要求决定。下面列出的是一个帮助大家理解的新集合示意图：")]),t._v(" "),n("p",[n("img",{attrs:{src:"8-1.gif",alt:""}})]),t._v(" "),n("p",[t._v("这张图刚开始的时候可能让人有点儿摸不着头脑，但在通读了本章以后，相信大家会真正理解它实际只有三个集合组件："),n("code",[t._v("Map")]),t._v("，"),n("code",[t._v("List")]),t._v("和"),n("code",[t._v("Set")]),t._v("。而且每个组件实际只有两、三种实现方式（注释⑥），而且通常都只有一种特别好的方式。只要看出了这一点，集合就不会再令人生畏。")]),t._v(" "),n("p",[t._v("⑥：写作本章时，Java 1.2尚处于β测试阶段，所以这张示意图没有包括以后会加入的"),n("code",[t._v("TreeSet")]),t._v("。")]),t._v(" "),n("p",[t._v("虚线框代表“接口”，点线框代表“抽象”类，而实线框代表普通（实际）类。点线箭头表示一个特定的类准备实现一个接口（在抽象类的情况下，则是“部分”实现一个接口）。双线箭头表示一个类可生成箭头指向的那个类的对象。例如，任何集合都可以生成一个迭代器（"),n("code",[t._v("Iterator")]),t._v("），而一个列表可以生成一个"),n("code",[t._v("ListIterator")]),t._v("（以及原始的迭代器，因为列表是从集合继承的）。")]),t._v(" "),n("p",[t._v("致力于容纳对象的接口是"),n("code",[t._v("Collection")]),t._v("，"),n("code",[t._v("List")]),t._v("，"),n("code",[t._v("Set")]),t._v("和"),n("code",[t._v("Map")]),t._v("。在传统情况下，我们需要写大量代码才能同这些接口打交道。而且为了指定自己想使用的准确类型，必须在创建之初进行设置。所以可能创建下面这样的一个"),n("code",[t._v("List")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("List x = new LinkedList();\n")])])]),n("p",[t._v("当然，也可以决定将x作为一个"),n("code",[t._v("LinkedList")]),t._v("使用（而不是一个普通的"),n("code",[t._v("List")]),t._v("），并用"),n("code",[t._v("x")]),t._v("负载准确的类型信息。使用接口的好处就是一旦决定改变自己的实现细节，要做的全部事情就是在创建的时候改变它，就象下面这样：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("List x = new ArrayList();\n")])])]),n("p",[t._v("其余代码可以保持原封不动。")]),t._v(" "),n("p",[t._v("在类的分级结构中，可看到大量以"),n("code",[t._v("Abstract")]),t._v("（抽象）开头的类，这刚开始可能会使人感觉迷惑。它们实际上是一些工具，用于“部分”实现一个特定的接口。举个例子来说，假如想生成自己的Set，就不是从"),n("code",[t._v("Set")]),t._v("接口开始，然后自行实现所有方法。相反，我们可以从"),n("code",[t._v("AbstractSet")]),t._v("继承，只需极少的工作即可得到自己的新类。尽管如此，新集合库仍然包含了足够的功能，可满足我们的几乎所有需求。所以考虑到我们的目的，可忽略所有以"),n("code",[t._v("Abstract")]),t._v("开头的类。")]),t._v(" "),n("p",[t._v("因此，在观看这张示意图时，真正需要关心的只有位于最顶部的“接口”以及普通（实际）类——均用实线方框包围。通常需要生成实际类的一个对象，将其向上转换为对应的接口。以后即可在代码的任何地方使用那个接口。下面是一个简单的例子，它用"),n("code",[t._v("String")]),t._v("对象填充一个集合，然后打印出集合内的每一个元素：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//: SimpleCollection.java\n// A simple example using the new Collections\npackage c08.newcollections;\nimport java.util.*;\n\npublic class SimpleCollection {\n  public static void main(String[] args) {\n    Collection c = new ArrayList();\n    for(int i = 0; i < 10; i++)\n      c.add(Integer.toString(i));\n    Iterator it = c.iterator();\n    while(it.hasNext())\n      System.out.println(it.next());\n  }\n} ///:~\n")])])]),n("p",[t._v("新集合库的所有代码示例都置于子目录"),n("code",[t._v("newcollections")]),t._v("下，这样便可提醒自己这些工作只对于Java 1.2有效。这样一来，我们必须用下述代码来调用程序：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("java c08.newcollections.SimpleCollection\n")])])]),n("p",[t._v("采用的语法与其他程序是差不多的。")]),t._v(" "),n("p",[t._v("大家可以看到新集合属于"),n("code",[t._v("java.util")]),t._v("库的一部分，所以在使用时不需要再添加任何额外的"),n("code",[t._v("import")]),t._v("语句。")]),t._v(" "),n("p",[n("code",[t._v("main()")]),t._v("的第一行创建了一个"),n("code",[t._v("ArrayList")]),t._v("对象，然后将其向上转换成为一个集合。由于这个例子只使用了"),n("code",[t._v("Collection")]),t._v("方法，所以从"),n("code",[t._v("Collection")]),t._v("继承的一个类的任何对象都可以正常工作。但"),n("code",[t._v("ArrayList")]),t._v("是一个典型的"),n("code",[t._v("Collection")]),t._v("，它代替了"),n("code",[t._v("Vector")]),t._v("的位置。\n显然，"),n("code",[t._v("add()")]),t._v("方法的作用是将一个新元素置入集合里。然而，用户文档谨慎地指出"),n("code",[t._v("add()")]),t._v("“保证这个集合包含了指定的元素”。这一点是为"),n("code",[t._v("Set")]),t._v("作铺垫的，后者只有在元素不存在的前提下才会真的加入那个元素。对于"),n("code",[t._v("ArrayList")]),t._v("以及其他任何形式的"),n("code",[t._v("List")]),t._v("，"),n("code",[t._v("add()")]),t._v("肯定意味着“直接加入”。")]),t._v(" "),n("p",[t._v("利用"),n("code",[t._v("iterator()")]),t._v("方法，所有集合都能生成一个“迭代器”（"),n("code",[t._v("Iterator")]),t._v("）。迭代器其实就象一个“枚举”（"),n("code",[t._v("Enumeration")]),t._v("），是后者的一个替代物，只是：")]),t._v(" "),n("p",[t._v("(1) 它采用了一个历史上默认、而且早在OOP中得到广泛采纳的名字（迭代器）。")]),t._v(" "),n("p",[t._v("(2) 采用了比"),n("code",[t._v("Enumeration")]),t._v("更短的名字："),n("code",[t._v("hasNext()")]),t._v("代替了"),n("code",[t._v("hasMoreElement()")]),t._v("，而"),n("code",[t._v("next()")]),t._v("代替了"),n("code",[t._v("nextElement()")]),t._v("。")]),t._v(" "),n("p",[t._v("(3) 添加了一个名为"),n("code",[t._v("remove()")]),t._v("的新方法，可删除由"),n("code",[t._v("Iterator")]),t._v("生成的上一个元素。所以每次调用"),n("code",[t._v("next()")]),t._v("的时候，只需调用"),n("code",[t._v("remove()")]),t._v("一次。")]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("SimpleCollection.java")]),t._v("中，大家可看到创建了一个迭代器，并用它在集合里遍历，打印出每个元素。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-1-使用collections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-1-使用collections"}},[t._v("#")]),t._v(" 8.7.1 使用"),n("code",[t._v("Collections")])]),t._v(" "),n("p",[t._v("下面这张表格总结了用一个集合能做的所有事情（亦可对"),n("code",[t._v("Set")]),t._v("和"),n("code",[t._v("List")]),t._v("做同样的事情，尽管"),n("code",[t._v("List")]),t._v("还提供了一些额外的功能）。"),n("code",[t._v("Map")]),t._v("不是从"),n("code",[t._v("Collection")]),t._v("继承的，所以要单独对待。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Boolean add(Object)\n\n*Ensures that the Collection contains the argument. Returns false if it doesn’t add the argument.\n\nBoolean addAll(Collection)\n\n*Adds all the elements in the argument. Returns true if any elements were added.\n\nvoid clear( )\n\n*Removes all the elements in the Collection.\n\nBoolean contains(Object)\n\nTrue if the Collection contains the argument.\n\nBoolean containsAll(Collection)\n\nTrue if the Collection contains all the elements in the argument.\n\nBoolean isEmpty( )\n\nTrue if the Collection has no elements.\n\nIterator iterator( )\n\nReturns an Iterator that you can use to move through the elements in the Collection.\n\nBoolean remove(Object)\n\n*If the argument is in the Collection, one instance of that element is removed. Returns true if a removal occurred.\n\nBoolean removeAll(Collection)\n\n*Removes all the elements that are contained in the argument. Returns true if any removals occurred.\n\nBoolean retainAll(Collection)\n\n*Retains only elements that are contained in the argument (an “intersection” from set theory). Returns true if any changes occurred.\n\nint size( )\n\nReturns the number of elements in the Collection.\n\nObject[] toArray( )\n\nReturns an array containing all the elements in the Collection.\n\nObject[] toArray(Object[] a)\n\nReturns an array containing all the elements in the Collection, whose type is that of the array a rather than plain Object (you must cast the array to the right type).\n\n\n*This is an “optional” method, which means it might not be implemented by a particular Collection. If not, that method throws an UnsupportedOperationException. Exceptions will be covered in Chapter 9.\n")])])]),n("ul",[n("li",[n("code",[t._v("boolean add(Object)")]),t._v(" ＊保证集合内包含了参数。如果它没有添加参数，就返回"),n("code",[t._v("false")]),t._v("（假）")]),t._v(" "),n("li",[n("code",[t._v("boolean addAll(Collection)")]),t._v(" ＊添加参数内的所有元素。如果没有添加元素，则返回"),n("code",[t._v("true")]),t._v("（真）")]),t._v(" "),n("li",[n("code",[t._v("void clear()")]),t._v(" ＊删除集合内的所有元素")]),t._v(" "),n("li",[n("code",[t._v("boolean contains(Object)")]),t._v(" 若集合包含参数，就返回“真”")]),t._v(" "),n("li",[n("code",[t._v("boolean containsAll(Collection)")]),t._v(" 若集合包含了参数内的所有元素，就返回“真”")]),t._v(" "),n("li",[n("code",[t._v("boolean isEmpty()")]),t._v(" 若集合内没有元素，就返回“真”")]),t._v(" "),n("li",[n("code",[t._v("Iterator iterator()")]),t._v(" 返回一个迭代器，以用它遍历集合的各元素")]),t._v(" "),n("li",[n("code",[t._v("boolean remove(Object)")]),t._v(" ＊如参数在集合里，就删除那个元素的一个实例。如果已进行了删除，就返回“真”")]),t._v(" "),n("li",[n("code",[t._v("boolean removeAll(Collection)")]),t._v(" ＊删除参数里的所有元素。如果已进行了任何删除，就返回“真”")]),t._v(" "),n("li",[n("code",[t._v("boolean retainAll(Collection)")]),t._v(" ＊只保留包含在一个参数里的元素（一个理论的“交集”）。如果已进行了任何改变，就返回“真”")]),t._v(" "),n("li",[n("code",[t._v("int size()")]),t._v(" 返回集合内的元素数量")]),t._v(" "),n("li",[n("code",[t._v("Object[] toArray()")]),t._v(" 返回包含了集合内所有元素的一个数组")])]),t._v(" "),n("p",[t._v("＊这是一个“可选的”方法，有的集合可能并未实现它。若确实如此，该方法就会遇到一个"),n("code",[t._v("UnsupportedOperatiionException")]),t._v("，即一个“操作不支持”异常，详见第9章。")]),t._v(" "),n("p",[t._v("下面这个例子向大家演示了所有方法。同样地，它们只对从集合继承的东西有效，一个"),n("code",[t._v("ArrayList")]),t._v("作为一种“不常用的分母”使用：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: Collection1.java\n// Things you can do with all Collections\npackage c08.newcollections;\nimport java.util.*;\n\npublic class Collection1 {\n  // Fill with \'size\' elements, start\n  // counting at \'start\':\n  public static Collection\n  fill(Collection c, int start, int size) {\n    for(int i = start; i < start + size; i++)\n      c.add(Integer.toString(i));\n    return c;\n  }\n  // Default to a "start" of 0:\n  public static Collection\n  fill(Collection c, int size) {\n    return fill(c, 0, size);\n  }\n  // Default to 10 elements:\n  public static Collection fill(Collection c) {\n    return fill(c, 0, 10);\n  }\n  // Create & upcast to Collection:\n  public static Collection newCollection() {\n    return fill(new ArrayList());\n    // ArrayList is used for simplicity, but it\'s\n    // only seen as a generic Collection\n    // everywhere else in the program.\n  }\n  // Fill a Collection with a range of values:\n  public static Collection\n  newCollection(int start, int size) {\n    return fill(new ArrayList(), start, size);\n  }\n  // Moving through a List with an iterator:\n  public static void print(Collection c) {\n    for(Iterator x = c.iterator(); x.hasNext();)\n      System.out.print(x.next() + " ");\n    System.out.println();\n  }    \n  public static void main(String[] args) {\n    Collection c = newCollection();\n    c.add("ten");\n    c.add("eleven");\n    print(c);\n    // Make an array from the List:\n    Object[] array = c.toArray();\n    // Make a String array from the List:\n    String[] str =\n      (String[])c.toArray(new String[1]);\n    // Find max and min elements; this means\n    // different things depending on the way\n    // the Comparable interface is implemented:\n    System.out.println("Collections.max(c) = " +\n      Collections.max(c));\n    System.out.println("Collections.min(c) = " +\n      Collections.min(c));\n    // Add a Collection to another Collection\n    c.addAll(newCollection());\n    print(c);\n    c.remove("3"); // Removes the first one\n    print(c);\n    c.remove("3"); // Removes the second one\n    print(c);\n    // Remove all components that are in the\n    // argument collection:\n    c.removeAll(newCollection());\n    print(c);\n    c.addAll(newCollection());\n    print(c);\n    // Is an element in this Collection?\n    System.out.println(\n      "c.contains(\\"4\\") = " + c.contains("4"));\n    // Is a Collection in this Collection?\n    System.out.println(\n      "c.containsAll(newCollection()) = " +\n      c.containsAll(newCollection()));\n    Collection c2 = newCollection(5, 3);\n    // Keep all the elements that are in both\n    // c and c2 (an intersection of sets):\n    c.retainAll(c2);\n    print(c);\n    // Throw away all the elements in c that\n    // also appear in c2:\n    c.removeAll(c2);\n    System.out.println("c.isEmpty() = " +\n      c.isEmpty());\n    c = newCollection();\n    print(c);\n    c.clear(); // Remove all elements\n    System.out.println("after c.clear():");\n    print(c);\n  }\n} ///:~\n')])])]),n("p",[t._v("通过第一个方法，我们可用测试数据填充任何集合。在当前这种情况下，只是将"),n("code",[t._v("int")]),t._v("转换成"),n("code",[t._v("String")]),t._v("。第二个方法将在本章其余的部分经常采用。")]),t._v(" "),n("p",[n("code",[t._v("newCollection()")]),t._v("的两个版本都创建了"),n("code",[t._v("ArrayList")]),t._v("，用于包含不同的数据集，并将它们作为集合对象返回。所以很明显，除了"),n("code",[t._v("Collection")]),t._v("接口之外，不会再用到其他什么。")]),t._v(" "),n("p",[n("code",[t._v("print()")]),t._v("方法也会在本节经常用到。由于它用一个迭代器（"),n("code",[t._v("Iterator")]),t._v("）在一个集合内遍历，而任何集合都可以产生这样的一个迭代器，所以它适用于"),n("code",[t._v("List")]),t._v("和"),n("code",[t._v("Set")]),t._v("，也适用于由一个"),n("code",[t._v("Map")]),t._v("生成的"),n("code",[t._v("Collection")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("main()")]),t._v("用简单的手段显示出了集合内的所有方法。")]),t._v(" "),n("p",[t._v("在后续的小节里，我们将比较"),n("code",[t._v("List")]),t._v("，"),n("code",[t._v("Set")]),t._v("和"),n("code",[t._v("Map")]),t._v("的不同实现方案，同时指出在各种情况下哪一种方案应成为首选（带有星号的那个）。大家会发现这里并未包括一些传统的类，如"),n("code",[t._v("Vector")]),t._v("，"),n("code",[t._v("Stack")]),t._v("以及"),n("code",[t._v("Hashtable")]),t._v("等。因为不管在什么情况下，新集合内都有自己首选的类。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-2-使用lists"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-2-使用lists"}},[t._v("#")]),t._v(" 8.7.2 使用"),n("code",[t._v("Lists")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("List (interface)\n\nOrder is the most important feature of a List; it promises to maintain elements in a particular sequence. List adds a number of methods to Collection that allow insertion and removal of elements in the middle of a List. (This is recommended only for a LinkedList.) A List will produce a ListIterator, and using this you can traverse the List in both directions, as well as insert and remove elements in the middle of the list (again, recommended only for a LinkedList).\n\nArrayList*\n\nA List backed by an array. Use instead of Vector as a general-purpose object holder. Allows rapid random access to elements, but is slow when inserting and removing elements from the middle of a list. ListIterator should be used only for back-and-forth traversal of an ArrayList, but not for inserting and removing elements, which is expensive compared to LinkedList.\n\nLinkedList\n\nProvides optimal sequential access, with inexpensive insertions and deletions from the middle of the list. Relatively slow for random access. (Use ArrayList instead.) Also has addFirst( ), addLast( ), getFirst( ), getLast( ), removeFirst( ), and removeLast( ) (which are not defined in any interfaces or base classes) to allow it to be used as a stack, a queue, and a dequeue.\n\n")])])]),n("ul",[n("li",[n("p",[n("code",[t._v("List")]),t._v("（接口） 顺序是"),n("code",[t._v("List")]),t._v("最重要的特性；它可保证元素按照规定的顺序排列。"),n("code",[t._v("List")]),t._v("为"),n("code",[t._v("Collection")]),t._v("添加了大量方法，以便我们在"),n("code",[t._v("List")]),t._v("中部插入和删除元素（只推荐对"),n("code",[t._v("LinkedList")]),t._v("这样做）。"),n("code",[t._v("List")]),t._v("也会生成一个"),n("code",[t._v("ListIterator")]),t._v("（列表迭代器），利用它可在一个列表里朝两个方向遍历，同时插入和删除位于列表中部的元素（同样地，只建议对"),n("code",[t._v("LinkedList")]),t._v("这样做）")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("ArrayList")]),t._v("＊ 由一个数组后推得到的"),n("code",[t._v("List")]),t._v("。作为一个常规用途的对象容器使用，用于替换原先的"),n("code",[t._v("Vector")]),t._v("。允许我们快速访问元素，但在从列表中部插入和删除元素时，速度却嫌稍慢。一般只应该用"),n("code",[t._v("ListIterator")]),t._v("对一个"),n("code",[t._v("ArrayList")]),t._v("进行向前和向后遍历，不要用它删除和插入元素；与"),n("code",[t._v("LinkedList")]),t._v("相比，它的效率要低许多")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("LinkedList")]),t._v("提供优化的顺序访问性能，同时可以高效率地在列表中部进行插入和删除操作。但在进行随机访问时，速度却相当慢，此时应换用"),n("code",[t._v("ArrayList")]),t._v("。也提供了"),n("code",[t._v("addFirst()")]),t._v("，"),n("code",[t._v("addLast()")]),t._v("，"),n("code",[t._v("getFirst()")]),t._v("，"),n("code",[t._v("getLast()")]),t._v("，"),n("code",[t._v("removeFirst()")]),t._v("以及"),n("code",[t._v("removeLast()")]),t._v("（未在任何接口或基类中定义），以便将其作为一个规格、队列以及一个双向队列使用")])])]),t._v(" "),n("p",[t._v("下面这个例子中的方法每个都覆盖了一组不同的行为：每个列表都能做的事情（"),n("code",[t._v("basicTest()")]),t._v("），通过一个迭代器遍历（"),n("code",[t._v("iterMotion()")]),t._v("）、用一个迭代器改变某些东西（"),n("code",[t._v("iterManipulation()")]),t._v("）、体验列表处理的效果（"),n("code",[t._v("testVisual()")]),t._v("）以及只有"),n("code",[t._v("LinkedList")]),t._v("才能做的事情等：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: List1.java\n// Things you can do with Lists\npackage c08.newcollections;\nimport java.util.*;\n\npublic class List1 {\n  // Wrap Collection1.fill() for convenience:\n  public static List fill(List a) {\n    return (List)Collection1.fill(a);\n  }\n  // You can use an Iterator, just as with a\n  // Collection, but you can also use random\n  // access with get():\n  public static void print(List a) {\n    for(int i = 0; i < a.size(); i++)\n      System.out.print(a.get(i) + " ");\n    System.out.println();\n  }\n  static boolean b;\n  static Object o;\n  static int i;\n  static Iterator it;\n  static ListIterator lit;\n  public static void basicTest(List a) {\n    a.add(1, "x"); // Add at location 1\n    a.add("x"); // Add at end\n    // Add a collection:\n    a.addAll(fill(new ArrayList()));\n    // Add a collection starting at location 3:\n    a.addAll(3, fill(new ArrayList()));\n    b = a.contains("1"); // Is it in there?\n    // Is the entire collection in there?\n    b = a.containsAll(fill(new ArrayList()));\n    // Lists allow random access, which is cheap\n    // for ArrayList, expensive for LinkedList:\n    o = a.get(1); // Get object at location 1\n    i = a.indexOf("1"); // Tell index of object\n    // indexOf, starting search at location 2:\n    i = a.indexOf("1", 2);\n    b = a.isEmpty(); // Any elements inside?\n    it = a.iterator(); // Ordinary Iterator\n    lit = a.listIterator(); // ListIterator\n    lit = a.listIterator(3); // Start at loc 3\n    i = a.lastIndexOf("1"); // Last match\n    i = a.lastIndexOf("1", 2); // ...after loc 2\n    a.remove(1); // Remove location 1\n    a.remove("3"); // Remove this object\n    a.set(1, "y"); // Set location 1 to "y"\n    // Keep everything that\'s in the argument\n    // (the intersection of the two sets):\n    a.retainAll(fill(new ArrayList()));\n    // Remove elements in this range:\n    a.removeRange(0, 2);\n    // Remove everything that\'s in the argument:\n    a.removeAll(fill(new ArrayList()));\n    i = a.size(); // How big is it?\n    a.clear(); // Remove all elements\n  }\n  public static void iterMotion(List a) {\n    ListIterator it = a.listIterator();\n    b = it.hasNext();\n    b = it.hasPrevious();\n    o = it.next();\n    i = it.nextIndex();\n    o = it.previous();\n    i = it.previousIndex();\n  }\n  public static void iterManipulation(List a) {\n    ListIterator it = a.listIterator();\n    it.add("47");\n    // Must move to an element after add():\n    it.next();\n    // Remove the element that was just produced:\n    it.remove();\n    // Must move to an element after remove():\n    it.next();\n    // Change the element that was just produced:\n    it.set("47");\n  }\n  public static void testVisual(List a) {\n    print(a);\n    List b = new ArrayList();\n    fill(b);\n    System.out.print("b = ");\n    print(b);\n    a.addAll(b);\n    a.addAll(fill(new ArrayList()));\n    print(a);\n    // Shrink the list by removing all the\n    // elements beyond the first 1/2 of the list\n    System.out.println(a.size());\n    System.out.println(a.size()/2);\n    a.removeRange(a.size()/2, a.size()/2 + 2);\n    print(a);\n    // Insert, remove, and replace elements\n    // using a ListIterator:\n    ListIterator x = a.listIterator(a.size()/2);\n    x.add("one");\n    print(a);\n    System.out.println(x.next());\n    x.remove();\n    System.out.println(x.next());\n    x.set("47");\n    print(a);\n    // Traverse the list backwards:\n    x = a.listIterator(a.size());\n    while(x.hasPrevious())\n      System.out.print(x.previous() + " ");\n    System.out.println();\n    System.out.println("testVisual finished");\n  }\n  // There are some things that only\n  // LinkedLists can do:\n  public static void testLinkedList() {\n    LinkedList ll = new LinkedList();\n    Collection1.fill(ll, 5);\n    print(ll);\n    // Treat it like a stack, pushing:\n    ll.addFirst("one");\n    ll.addFirst("two");\n    print(ll);\n    // Like "peeking" at the top of a stack:\n    System.out.println(ll.getFirst());\n    // Like popping a stack:\n    System.out.println(ll.removeFirst());\n    System.out.println(ll.removeFirst());\n    // Treat it like a queue, pulling elements\n    // off the tail end:\n    System.out.println(ll.removeLast());\n    // With the above operations, it\'s a dequeue!\n    print(ll);\n  }\n  public static void main(String args[]) {\n    // Make and fill a new list each time:\n    basicTest(fill(new LinkedList()));\n    basicTest(fill(new ArrayList()));\n    iterMotion(fill(new LinkedList()));\n    iterMotion(fill(new ArrayList()));\n    iterManipulation(fill(new LinkedList()));\n    iterManipulation(fill(new ArrayList()));\n    testVisual(fill(new LinkedList()));\n    testLinkedList();\n  }\n} ///:~\n')])])]),n("p",[t._v("在"),n("code",[t._v("basicTest()")]),t._v("和"),n("code",[t._v("iterMotiion()")]),t._v("中，只是简单地发出调用，以便揭示出正确的语法。而且尽管捕获了返回值，但是并未使用它。在某些情况下，之所以不捕获返回值，是由于它们没有什么特别的用处。在正式使用它们前，应仔细研究一下自己的联机文档，掌握这些方法完整、正确的用法。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-3-使用sets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-3-使用sets"}},[t._v("#")]),t._v(" 8.7.3 使用"),n("code",[t._v("Sets")])]),t._v(" "),n("p",[n("code",[t._v("Set")]),t._v("拥有与"),n("code",[t._v("Collection")]),t._v("完全相同的接口，所以和两种不同的"),n("code",[t._v("List")]),t._v("不同，它没有什么额外的功能。相反，"),n("code",[t._v("Set")]),t._v("完全就是一个"),n("code",[t._v("Collection")]),t._v("，只是具有不同的行为（这是实例和多态性最理想的应用：用于表达不同的行为）。在这里，一个"),n("code",[t._v("Set")]),t._v("只允许每个对象存在一个实例（正如大家以后会看到的那样，一个对象的“值”的构成是相当复杂的）。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Set (interface)\n\nEach element that you add to the Set must be unique; otherwise the Set doesn’t add the duplicate element. Objects added to a Set must define equals( ) to establish object uniqueness. Set has exactly the same interface as Collection. The Set interface does not guarantee it will maintain its elements in any particular order.\n\nHashSet*\n\nFor Sets where fast lookup time is important. Objects must also define hashCode( ).\n\nTreeSet\n\nAn ordered Set backed by a red-black tree. This way, you can extract an ordered sequence from a Set.\n")])])]),n("ul",[n("li",[n("code",[t._v("Set")]),t._v("（接口） 添加到"),n("code",[t._v("Set")]),t._v("的每个元素都必须是独一无二的；否则"),n("code",[t._v("Set")]),t._v("就不会添加重复的元素。添加到"),n("code",[t._v("Set")]),t._v("里的对象必须定义"),n("code",[t._v("equals()")]),t._v("，从而建立对象的唯一性。"),n("code",[t._v("Set")]),t._v("拥有与"),n("code",[t._v("Collection")]),t._v("完全相同的接口。一个"),n("code",[t._v("Set")]),t._v("不能保证自己可按任何特定的顺序维持自己的元素")]),t._v(" "),n("li",[n("code",[t._v("HashSet")]),t._v("＊ 用于除非常小的以外的所有"),n("code",[t._v("Set")]),t._v("。对象也必须定义"),n("code",[t._v("hashCode()")])]),t._v(" "),n("li",[n("code",[t._v("ArraySet")]),t._v(" 由一个数组后推得到的"),n("code",[t._v("Set")]),t._v("。面向非常小的"),n("code",[t._v("Set")]),t._v("设计，特别是那些需要频繁创建和删除的。对于小"),n("code",[t._v("Set")]),t._v("，与"),n("code",[t._v("HashSet")]),t._v("相比，"),n("code",[t._v("ArraySet")]),t._v("创建和迭代所需付出的代价都要小得多。但随着"),n("code",[t._v("Set")]),t._v("的增大，它的性能也会大打折扣。不需要"),n("code",[t._v("HashCode()")])]),t._v(" "),n("li",[n("code",[t._v("TreeSet")]),t._v("由一个“红黑树”后推得到的顺序"),n("code",[t._v("Set")]),t._v("（注释⑦）。这样一来，我们就可以从一个"),n("code",[t._v("Set")]),t._v("里提到一个顺序集合")])]),t._v(" "),n("p",[t._v("⑦：直至本书写作的时候，"),n("code",[t._v("TreeSet")]),t._v("仍然只是宣布，尚未正式实现。所以这里没有提供使用"),n("code",[t._v("TreeSet")]),t._v("的例子。")]),t._v(" "),n("p",[t._v("下面这个例子并没有列出用一个"),n("code",[t._v("Set")]),t._v("能够做的全部事情，因为接口与"),n("code",[t._v("Collection")]),t._v("是相同的，前例已经练习过了。相反，我们要例示的重点在于使一个"),n("code",[t._v("Set")]),t._v("独一无二的行为：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: Set1.java\n// Things you can do with Sets\npackage c08.newcollections;\nimport java.util.*;\n\npublic class Set1 {\n  public static void testVisual(Set a) {\n    Collection1.fill(a);\n    Collection1.fill(a);\n    Collection1.fill(a);\n    Collection1.print(a); // No duplicates!\n    // Add another set to this one:\n    a.addAll(a);\n    a.add("one");\n    a.add("one");\n    a.add("one");\n    Collection1.print(a);\n    // Look something up:\n    System.out.println("a.contains(\\"one\\"): " +\n      a.contains("one"));\n  }\n  public static void main(String[] args) {\n    testVisual(new HashSet());\n    testVisual(new TreeSet());\n  }\n} ///:~\n\n')])])]),n("p",[t._v("重复的值被添加到"),n("code",[t._v("Set")]),t._v("，但在打印的时候，我们会发现"),n("code",[t._v("Set")]),t._v("只接受每个值的一个实例。")]),t._v(" "),n("p",[t._v("运行这个程序时，会注意到由"),n("code",[t._v("HashSet")]),t._v("维持的顺序与"),n("code",[t._v("ArraySet")]),t._v("是不同的。这是由于它们采用了不同的方法来保存元素，以便它们以后的定位。"),n("code",[t._v("ArraySet")]),t._v("保持着它们的顺序状态，而"),n("code",[t._v("HashSet")]),t._v("使用一个散列函数，这是特别为快速检索设计的）。创建自己的类型时，一定要注意"),n("code",[t._v("Set")]),t._v("需要通过一种方式来维持一种存储顺序，就象本章早些时候展示的“groundhog”（土拔鼠）例子那样。下面是一个例子：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: Set2.java\n// Putting your own type in a Set\npackage c08.newcollections;\nimport java.util.*;\n\nclass MyType implements Comparable {\n  private int i;\n  public MyType(int n) { i = n; }\n  public boolean equals(Object o) {\n    return\n      (o instanceof MyType)\n      && (i == ((MyType)o).i);\n  }\n  public int hashCode() { return i; }\n  public String toString() { return i + " "; }\n  public int compareTo(Object o) {\n    int i2 = ((MyType) o).i;\n    return (i2 < i ? -1 : (i2 == i ? 0 : 1));\n  }\n}\n\npublic class Set2 {\n  public static Set fill(Set a, int size) {\n    for(int i = 0; i < size; i++)\n      a.add(new MyType(i));\n    return a;\n  }\n  public static Set fill(Set a) {\n    return fill(a, 10);\n  }\n  public static void test(Set a) {\n    fill(a);\n    fill(a); // Try to add duplicates\n    fill(a);\n    a.addAll(fill(new TreeSet()));\n    System.out.println(a);\n  }\n  public static void main(String[] args) {\n    test(new HashSet());\n    test(new TreeSet());\n  }\n} ///:~\n\n')])])]),n("p",[t._v("对"),n("code",[t._v("equals()")]),t._v("及"),n("code",[t._v("hashCode()")]),t._v("的定义遵照“groundhog”例子已经给出的形式。在两种情况下都必须定义一个"),n("code",[t._v("equals()")]),t._v("。但只有要把类置入一个"),n("code",[t._v("HashSet")]),t._v("的前提下，才有必要使用"),n("code",[t._v("hashCode()")]),t._v("——这种情况是完全有可能的，因为通常应先选择作为一个"),n("code",[t._v("Set")]),t._v("实现。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-4-使用maps"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-4-使用maps"}},[t._v("#")]),t._v(" 8.7.4 使用"),n("code",[t._v("Maps")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Map (interface)\n\nMaintains key-value associations (pairs), so you can look up a value using a key.\n\nHashMap*\n\nImplementation based on a hash table. (Use this instead of Hashtable.) Provides constant-time performance for inserting and locating pairs. Performance can be adjusted via constructors that allow you to set the capacity and load factor of the hash table.\n\nTreeMap\n\nImplementation based on a red-black tree. When you view the keys or the pairs, they will be in sorted order (determined by Comparable or Comparator, discussed later). The point of a TreeMap is that you get the results in sorted order. TreeMap is the only Map with the subMap( ) method, which allows you to return a portion of the tree.\n\n")])])]),n("ul",[n("li",[n("code",[t._v("Map")]),t._v("（接口） 维持“键－值”对应关系（对），以便通过一个键查找相应的值")]),t._v(" "),n("li",[n("code",[t._v("HashMap")]),t._v("＊ 基于一个散列表实现（用它代替"),n("code",[t._v("Hashtable")]),t._v("）。针对“键－值”对的插入和检索，这种形式具有最稳定的性能。可通过构造器对这一性能进行调整，以便设置散列表的“能力”和“装载因子”")]),t._v(" "),n("li",[n("code",[t._v("ArrayMap")]),t._v(" 由一个"),n("code",[t._v("ArrayList")]),t._v("后推得到的"),n("code",[t._v("Map")]),t._v("。对迭代的顺序提供了精确的控制。面向非常小的"),n("code",[t._v("Map")]),t._v("设计，特别是那些需要经常创建和删除的。对于非常小的"),n("code",[t._v("Map")]),t._v("，创建和迭代所付出的代价要比"),n("code",[t._v("HashMap")]),t._v("低得多。但在"),n("code",[t._v("Map")]),t._v("变大以后，性能也会相应地大幅度降低")]),t._v(" "),n("li",[n("code",[t._v("TreeMap")]),t._v(" 在一个“红－黑”树的基础上实现。查看键或者“键－值”对时，它们会按固定的顺序排列（取决于"),n("code",[t._v("Comparable")]),t._v("或")]),t._v(" "),n("li",[n("code",[t._v("Comparator")]),t._v("，稍后即会讲到）。"),n("code",[t._v("TreeMap")]),t._v("最大的好处就是我们得到的是已排好序的结果。"),n("code",[t._v("TreeMap")]),t._v("是含有"),n("code",[t._v("subMap()")]),t._v("方法的唯一一种"),n("code",[t._v("Map")]),t._v("，利用它可以返回树的一部分")])]),t._v(" "),n("p",[t._v("下例包含了两套测试数据以及一个"),n("code",[t._v("fill()")]),t._v("方法，利用该方法可以用任何两维数组（由"),n("code",[t._v("Object")]),t._v("构成）填充任何"),n("code",[t._v("Map")]),t._v("。这些工具也会在其他"),n("code",[t._v("Map")]),t._v("例子中用到。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: Map1.java\n// Things you can do with Maps\npackage c08.newcollections;\nimport java.util.*;\n\npublic class Map1 {\n  public final static String[][] testData1 = {\n    { "Happy", "Cheerful disposition" },\n    { "Sleepy", "Prefers dark, quiet places" },\n    { "Grumpy", "Needs to work on attitude" },\n    { "Doc", "Fantasizes about advanced degree"},\n    { "Dopey", "\'A\' for effort" },\n    { "Sneezy", "Struggles with allergies" },\n    { "Bashful", "Needs self-esteem workshop"},\n  };\n  public final static String[][] testData2 = {\n    { "Belligerent", "Disruptive influence" },\n    { "Lazy", "Motivational problems" },\n    { "Comatose", "Excellent behavior" }\n  };\n  public static Map fill(Map m, Object[][] o) {\n    for(int i = 0; i < o.length; i++)\n      m.put(o[i][0], o[i][1]);\n    return m;\n  }\n  // Producing a Set of the keys:\n  public static void printKeys(Map m) {\n    System.out.print("Size = " + m.size() +", ");\n    System.out.print("Keys: ");\n    Collection1.print(m.keySet());\n  }\n  // Producing a Collection of the values:\n  public static void printValues(Map m) {\n    System.out.print("Values: ");\n    Collection1.print(m.values());\n  }\n  // Iterating through Map.Entry objects (pairs):\n  public static void print(Map m) {\n    Collection entries = m.entries();\n    Iterator it = entries.iterator();\n    while(it.hasNext()) {\n      Map.Entry e = (Map.Entry)it.next();\n      System.out.println("Key = " + e.getKey() +\n        ", Value = " + e.getValue());\n    }\n  }\n  public static void test(Map m) {\n    fill(m, testData1);\n    // Map has \'Set\' behavior for keys:\n    fill(m, testData1);\n    printKeys(m);\n    printValues(m);\n    print(m);\n    String key = testData1[4][0];\n    String value = testData1[4][1];\n    System.out.println("m.containsKey(\\"" + key +\n      "\\"): " + m.containsKey(key));\n    System.out.println("m.get(\\"" + key + "\\"): "\n      + m.get(key));\n    System.out.println("m.containsValue(\\""\n      + value + "\\"): " +\n      m.containsValue(value));\n    Map m2 = fill(new TreeMap(), testData2);\n    m.putAll(m2);\n    printKeys(m);\n    m.remove(testData2[0][0]);\n    printKeys(m);\n    m.clear();\n    System.out.println("m.isEmpty(): "\n      + m.isEmpty());\n    fill(m, testData1);\n    // Operations on the Set change the Map:\n    m.keySet().removeAll(m.keySet());\n    System.out.println("m.isEmpty(): "\n      + m.isEmpty());\n  }\n  public static void main(String args[]) {\n    System.out.println("Testing HashMap");\n    test(new HashMap());\n    System.out.println("Testing TreeMap");\n    test(new TreeMap());\n  }\n} ///:~\n\n')])])]),n("p",[n("code",[t._v("printKeys()")]),t._v("，"),n("code",[t._v("printValues()")]),t._v("以及"),n("code",[t._v("print()")]),t._v("方法并不只是有用的工具，它们也清楚地揭示了一个"),n("code",[t._v("Map")]),t._v("的"),n("code",[t._v("Collection")]),t._v("“景象”的产生过程。"),n("code",[t._v("keySet()")]),t._v("方法会产生一个"),n("code",[t._v("Set")]),t._v("，它由"),n("code",[t._v("Map")]),t._v("中的键后推得来。在这儿，它只被当作一个"),n("code",[t._v("Collection")]),t._v("对待。"),n("code",[t._v("values()")]),t._v("也得到了类似的对待，它的作用是产生一个"),n("code",[t._v("List")]),t._v("，其中包含了"),n("code",[t._v("Map")]),t._v("中的所有值（注意键必须是独一无二的，而值可以有重复）。由于这些"),n("code",[t._v("Collection")]),t._v("是由"),n("code",[t._v("Map")]),t._v("后推得到的，所以一个"),n("code",[t._v("Collection")]),t._v("中的任何改变都会在相应的"),n("code",[t._v("Map")]),t._v("中反映出来。")]),t._v(" "),n("p",[n("code",[t._v("print()")]),t._v("方法的作用是收集由"),n("code",[t._v("entries")]),t._v("产生的"),n("code",[t._v("Iterator")]),t._v("（迭代器），并用它同时打印出每个“键－值”对的键和值。程序剩余的部分提供了每种"),n("code",[t._v("Map")]),t._v("操作的简单示例，并对每种类型的"),n("code",[t._v("Map")]),t._v("进行了测试。")]),t._v(" "),n("p",[t._v("当创建自己的类，将其作为"),n("code",[t._v("Map")]),t._v("中的一个键使用时，必须注意到和以前的Set相同的问题。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-5-决定实现方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-5-决定实现方案"}},[t._v("#")]),t._v(" 8.7.5 决定实现方案")]),t._v(" "),n("p",[t._v("从早些时候的那幅示意图可以看出，实际上只有三个集合组件："),n("code",[t._v("Map")]),t._v("，"),n("code",[t._v("List")]),t._v("和"),n("code",[t._v("Set")]),t._v("。而且每个接口只有两种或三种实现方案。若需使用由一个特定的接口提供的功能，如何才能决定到底采取哪一种方案呢？")]),t._v(" "),n("p",[t._v("为理解这个问题，必须认识到每种不同的实现方案都有自己的特点、优点和缺点。比如在那张示意图中，可以看到"),n("code",[t._v("Hashtable")]),t._v("，"),n("code",[t._v("Vector")]),t._v("和"),n("code",[t._v("Stack")]),t._v("的“特点”是它们都属于“传统”类，所以不会干扰原有的代码。但在另一方面，应尽量避免为新的（Java 1.2）代码使用它们。")]),t._v(" "),n("p",[t._v("其他集合间的差异通常都可归纳为它们具体是由什么“后推”的。换言之，取决于物理意义上用于实现目标接口的数据结构是什么。例如，"),n("code",[t._v("ArrayList")]),t._v("，"),n("code",[t._v("LinkedList")]),t._v("以及"),n("code",[t._v("Vector")]),t._v("（大致等价于"),n("code",[t._v("ArrayList")]),t._v("）都实现了"),n("code",[t._v("List")]),t._v("接口，所以无论选用哪一个，我们的程序都会得到类似的结果。然而，"),n("code",[t._v("ArrayList")]),t._v("（以及"),n("code",[t._v("Vector")]),t._v("）是由一个数组后推得到的；而"),n("code",[t._v("LinkedList")]),t._v("是根据常规的双重链接列表方式实现的，因为每个单独的对象都包含了数据以及指向列表内前后元素的引用。正是由于这个原因，假如想在一个列表中部进行大量插入和删除操作，那么"),n("code",[t._v("LinkedList")]),t._v("无疑是最恰当的选择（"),n("code",[t._v("LinkedList")]),t._v("还有一些额外的功能，建立于"),n("code",[t._v("AbstractSequentialList")]),t._v("中）。若非如此，就情愿选择"),n("code",[t._v("ArrayList")]),t._v("，它的速度可能要快一些。")]),t._v(" "),n("p",[t._v("作为另一个例子，"),n("code",[t._v("Set")]),t._v("既可作为一个"),n("code",[t._v("ArraySet")]),t._v("实现，亦可作为"),n("code",[t._v("HashSet")]),t._v("实现。"),n("code",[t._v("ArraySet")]),t._v("是由一个"),n("code",[t._v("ArrayList")]),t._v("后推得到的，设计成只支持少量元素，特别适合要求创建和删除大量"),n("code",[t._v("Set")]),t._v("对象的场合使用。然而，一旦需要在自己的"),n("code",[t._v("Set")]),t._v("中容纳大量元素，"),n("code",[t._v("ArraySet")]),t._v("的性能就会大打折扣。写一个需要"),n("code",[t._v("Set")]),t._v("的程序时，应默认选择"),n("code",[t._v("HashSet")]),t._v("。而且只有在某些特殊情况下（对性能的提升有迫切的需求），才应切换到"),n("code",[t._v("ArraySet")]),t._v("。")]),t._v(" "),n("p",[t._v("(1) 决定使用何种"),n("code",[t._v("List")])]),t._v(" "),n("p",[t._v("为体会各种"),n("code",[t._v("List")]),t._v("实现方案间的差异，最简便的方法就是进行一次性能测验。下述代码的作用是建立一个内部基类，将其作为一个测试床使用。然后为每次测验都创建一个匿名内部类。每个这样的内部类都由一个"),n("code",[t._v("test()")]),t._v("方法调用。利用这种方法，可以方便添加和删除测试项目。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: ListPerformance.java\n// Demonstrates performance differences in Lists\npackage c08.newcollections;\nimport java.util.*;\n\npublic class ListPerformance {\n  private static final int REPS = 100;\n  private abstract static class Tester {\n    String name;\n    int size; // Test quantity\n    Tester(String name, int size) {\n      this.name = name;\n      this.size = size;\n    }\n    abstract void test(List a);\n  }\n  private static Tester[] tests = {\n    new Tester("get", 300) {\n      void test(List a) {\n        for(int i = 0; i < REPS; i++) {\n          for(int j = 0; j < a.size(); j++)\n            a.get(j);\n        }\n      }\n    },\n    new Tester("iteration", 300) {\n      void test(List a) {\n        for(int i = 0; i < REPS; i++) {\n          Iterator it = a.iterator();\n          while(it.hasNext())\n            it.next();\n        }\n      }\n    },\n    new Tester("insert", 1000) {\n      void test(List a) {\n        int half = a.size()/2;\n        String s = "test";\n        ListIterator it = a.listIterator(half);\n        for(int i = 0; i < size * 10; i++)\n          it.add(s);\n      }\n    },\n    new Tester("remove", 5000) {\n      void test(List a) {\n        ListIterator it = a.listIterator(3);\n        while(it.hasNext()) {\n          it.next();\n          it.remove();\n        }\n      }\n    },\n  };\n  public static void test(List a) {\n    // A trick to print out the class name:\n    System.out.println("Testing " +\n      a.getClass().getName());\n    for(int i = 0; i < tests.length; i++) {\n      Collection1.fill(a, tests[i].size);\n      System.out.print(tests[i].name);\n      long t1 = System.currentTimeMillis();\n      tests[i].test(a);\n      long t2 = System.currentTimeMillis();\n      System.out.println(": " + (t2 - t1));\n    }\n  }\n  public static void main(String[] args) {\n    test(new ArrayList());\n    test(new LinkedList());\n  }\n} ///:~\n')])])]),n("p",[t._v("内部类"),n("code",[t._v("Tester")]),t._v("是一个抽象类，用于为特定的测试提供一个基类。它包含了一个要在测试开始时打印的字符串、一个用于计算测试次数或元素数量的"),n("code",[t._v("size")]),t._v("参数、用于初始化字段的一个构造器以及一个抽象方法"),n("code",[t._v("test()")]),t._v("。"),n("code",[t._v("test()")]),t._v("做的是最实际的测试工作。各种类型的测试都集中到一个地方："),n("code",[t._v("tests")]),t._v("数组。我们用继承于"),n("code",[t._v("Tester")]),t._v("的不同匿名内部类来初始化该数组。为添加或删除一个测试项目，只需在数组里简单地添加或移去一个内部类定义即可，其他所有工作都是自动进行的。")]),t._v(" "),n("p",[t._v("首先用元素填充传递给"),n("code",[t._v("test()")]),t._v("的"),n("code",[t._v("List")]),t._v("，然后对"),n("code",[t._v("tests")]),t._v("数组中的测试计时。由于测试用机器的不同，结果当然也会有所区别。这个程序的宗旨是揭示出不同集合类型的相对性能比较。下面是某一次运行得到的结果：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("获取")]),t._v(" "),n("th",[t._v("迭代")]),t._v(" "),n("th",[t._v("插入")]),t._v(" "),n("th",[t._v("删除")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("ArrayList")])]),t._v(" "),n("td",[t._v("110")]),t._v(" "),n("td",[t._v("270")]),t._v(" "),n("td",[t._v("1920")]),t._v(" "),n("td",[t._v("4780")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("LinkedList")])]),t._v(" "),n("td",[t._v("1870")]),t._v(" "),n("td",[t._v("7580")]),t._v(" "),n("td",[t._v("170")]),t._v(" "),n("td",[t._v("110")])])])]),t._v(" "),n("p",[t._v("可以看出，在"),n("code",[t._v("ArrayList")]),t._v("中进行随机访问（即"),n("code",[t._v("get()")]),t._v("）以及循环迭代是最划得来的；但对于"),n("code",[t._v("LinkedList")]),t._v("却是一个不小的开销。但另一方面，在列表中部进行插入和删除操作对于"),n("code",[t._v("LinkedList")]),t._v("来说却比"),n("code",[t._v("ArrayList")]),t._v("划算得多。我们最好的做法也许是先选择一个"),n("code",[t._v("ArrayList")]),t._v("作为自己的默认起点。以后若发现由于大量的插入和删除造成了性能的降低，再考虑换成"),n("code",[t._v("LinkedList")]),t._v("不迟。")]),t._v(" "),n("p",[t._v("(2) 决定使用何种"),n("code",[t._v("Set")])]),t._v(" "),n("p",[t._v("可在"),n("code",[t._v("ArraySet")]),t._v("以及"),n("code",[t._v("HashSet")]),t._v("间作出选择，具体取决于"),n("code",[t._v("Set")]),t._v("的大小（如果需要从一个"),n("code",[t._v("Set")]),t._v("中获得一个顺序列表，请用"),n("code",[t._v("TreeSet")]),t._v("；注释⑧）。下面这个测试程序将有助于大家作出这方面的抉择：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: SetPerformance.java\npackage c08.newcollections;\nimport java.util.*;\n\npublic class SetPerformance {\n  private static final int REPS = 200;\n  private abstract static class Tester {\n    String name;\n    Tester(String name) { this.name = name; }\n    abstract void test(Set s, int size);\n  }\n  private static Tester[] tests = {\n    new Tester("add") {\n      void test(Set s, int size) {\n        for(int i = 0; i < REPS; i++) {\n          s.clear();\n          Collection1.fill(s, size);\n        }\n      }\n    },\n    new Tester("contains") {\n      void test(Set s, int size) {\n        for(int i = 0; i < REPS; i++)\n          for(int j = 0; j < size; j++)\n            s.contains(Integer.toString(j));\n      }\n    },\n    new Tester("iteration") {\n      void test(Set s, int size) {\n        for(int i = 0; i < REPS * 10; i++) {\n          Iterator it = s.iterator();\n          while(it.hasNext())\n            it.next();\n        }\n      }\n    },\n  };\n  public static void test(Set s, int size) {\n    // A trick to print out the class name:\n    System.out.println("Testing " +\n      s.getClass().getName() + " size " + size);\n    Collection1.fill(s, size);\n    for(int i = 0; i < tests.length; i++) {\n      System.out.print(tests[i].name);\n      long t1 = System.currentTimeMillis();\n      tests[i].test(s, size);\n      long t2 = System.currentTimeMillis();\n      System.out.println(": " +\n        ((double)(t2 - t1)/(double)size));\n    }\n  }\n  public static void main(String[] args) {\n    // Small:\n    test(new TreeSet(), 10);\n    test(new HashSet(), 10);\n    // Medium:\n    test(new TreeSet(), 100);\n    test(new HashSet(), 100);\n    // Large:\n    test(new HashSet(), 1000);\n    test(new TreeSet(), 1000);\n  }\n} ///:~\n')])])]),n("p",[t._v("⑧："),n("code",[t._v("TreeSet")]),t._v("在本书写作时尚未成为一个正式的特性，但在这个例子中可以很轻松地为其添加一个测试。")]),t._v(" "),n("p",[t._v("最后对"),n("code",[t._v("ArraySet")]),t._v("的测试只有500个元素，而不是1000个，因为它太慢了。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("测试大小")]),t._v(" "),n("th",[t._v("添加")]),t._v(" "),n("th",[t._v("包含")]),t._v(" "),n("th",[t._v("迭代")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("TreeSet")]),t._v(" "),n("td",[t._v("10")]),t._v(" "),n("td",[t._v("22.0")]),t._v(" "),n("td",[t._v("11.0")]),t._v(" "),n("td",[t._v("16.0")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("100")]),t._v(" "),n("td",[t._v("22.5")]),t._v(" "),n("td",[t._v("13.2")]),t._v(" "),n("td",[t._v("12.1")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("1000")]),t._v(" "),n("td",[t._v("31.1")]),t._v(" "),n("td",[t._v("18.7")]),t._v(" "),n("td",[t._v("11.8")])]),t._v(" "),n("tr",[n("td",[t._v("HashSet")]),t._v(" "),n("td",[t._v("10")]),t._v(" "),n("td",[t._v("5.0")]),t._v(" "),n("td",[t._v("6.0")]),t._v(" "),n("td",[t._v("27.0")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("100")]),t._v(" "),n("td",[t._v("6.6")]),t._v(" "),n("td",[t._v("6.6")]),t._v(" "),n("td",[t._v("10.9")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("1000")]),t._v(" "),n("td",[t._v("7.4")]),t._v(" "),n("td",[t._v("6.6")]),t._v(" "),n("td",[t._v("9.5")])])])]),t._v(" "),n("p",[t._v("进行"),n("code",[t._v("add()")]),t._v("以及"),n("code",[t._v("contains()")]),t._v("操作时，"),n("code",[t._v("HashSet")]),t._v("显然要比"),n("code",[t._v("ArraySet")]),t._v("出色得多，而且性能明显与元素的多寡关系不大。一般编写程序的时候，几乎永远用不着使用"),n("code",[t._v("ArraySet")]),t._v("。")]),t._v(" "),n("p",[t._v("(3) 决定使用何种"),n("code",[t._v("Map")])]),t._v(" "),n("p",[t._v("选择不同的"),n("code",[t._v("Map")]),t._v("实现方案时，注意"),n("code",[t._v("Map")]),t._v("的大小对于性能的影响是最大的，下面这个测试程序清楚地阐示了这一点：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: MapPerformance.java\n// Demonstrates performance differences in Maps\npackage c08.newcollections;\nimport java.util.*;\n\npublic class MapPerformance {\n  private static final int REPS = 200;\n  public static Map fill(Map m, int size) {\n    for(int i = 0; i < size; i++) {\n      String x = Integer.toString(i);\n      m.put(x, x);\n    }\n    return m;\n  }\n  private abstract static class Tester {\n    String name;\n    Tester(String name) { this.name = name; }\n    abstract void test(Map m, int size);\n  }\n  private static Tester[] tests = {\n    new Tester("put") {\n      void test(Map m, int size) {\n        for(int i = 0; i < REPS; i++) {\n          m.clear();\n          fill(m, size);\n        }\n      }\n    },\n    new Tester("get") {\n      void test(Map m, int size) {\n        for(int i = 0; i < REPS; i++)\n          for(int j = 0; j < size; j++)\n            m.get(Integer.toString(j));\n      }\n    },\n    new Tester("iteration") {\n      void test(Map m, int size) {\n        for(int i = 0; i < REPS * 10; i++) {\n          Iterator it = m.entries().iterator();\n          while(it.hasNext())\n            it.next();\n        }\n      }\n    },\n  };\n  public static void test(Map m, int size) {\n    // A trick to print out the class name:\n    System.out.println("Testing " +\n      m.getClass().getName() + " size " + size);\n    fill(m, size);\n    for(int i = 0; i < tests.length; i++) {\n      System.out.print(tests[i].name);\n      long t1 = System.currentTimeMillis();\n      tests[i].test(m, size);\n      long t2 = System.currentTimeMillis();\n      System.out.println(": " +\n        ((double)(t2 - t1)/(double)size));\n    }\n  }\n  public static void main(String[] args) {\n    // Small:\n    test(new Hashtable(), 10);\n    test(new HashMap(), 10);\n    test(new TreeMap(), 10);\n    // Medium:\n    test(new Hashtable(), 100);\n    test(new HashMap(), 100);\n    test(new TreeMap(), 100);\n    // Large:\n    test(new HashMap(), 1000);\n    test(new Hashtable(), 1000);\n    test(new TreeMap(), 1000);\n  }\n} ///:~\n')])])]),n("p",[t._v("由于"),n("code",[t._v("Map")]),t._v("的大小是最严重的问题，所以程序的计时测试按"),n("code",[t._v("Map")]),t._v("的大小（或容量）来分割时间，以便得到令人信服的测试结果。下面列出一系列结果（在你的机器上可能不同）：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("测试大小")]),t._v(" "),n("th",[t._v("置入")]),t._v(" "),n("th",[t._v("取出")]),t._v(" "),n("th",[t._v("迭代")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Hashtable")]),t._v(" "),n("td",[t._v("10")]),t._v(" "),n("td",[t._v("11.0")]),t._v(" "),n("td",[t._v("5.0")]),t._v(" "),n("td",[t._v("44.0")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("100")]),t._v(" "),n("td",[t._v("7.7")]),t._v(" "),n("td",[t._v("7.7")]),t._v(" "),n("td",[t._v("16.5")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("1000")]),t._v(" "),n("td",[t._v("8.0")]),t._v(" "),n("td",[t._v("8.0")]),t._v(" "),n("td",[t._v("14.4")])]),t._v(" "),n("tr",[n("td",[t._v("TreeMap")]),t._v(" "),n("td",[t._v("10")]),t._v(" "),n("td",[t._v("16.0")]),t._v(" "),n("td",[t._v("11.0")]),t._v(" "),n("td",[t._v("22.0")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("100")]),t._v(" "),n("td",[t._v("25.8")]),t._v(" "),n("td",[t._v("15.4")]),t._v(" "),n("td",[t._v("13.2")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("1000")]),t._v(" "),n("td",[t._v("33.8")]),t._v(" "),n("td",[t._v("20.9")]),t._v(" "),n("td",[t._v("13.6")])]),t._v(" "),n("tr",[n("td",[t._v("HashMap")]),t._v(" "),n("td",[t._v("10")]),t._v(" "),n("td",[t._v("11.0")]),t._v(" "),n("td",[t._v("6.0")]),t._v(" "),n("td",[t._v("33.0")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("100")]),t._v(" "),n("td",[t._v("8.2")]),t._v(" "),n("td",[t._v("7.7")]),t._v(" "),n("td",[t._v("13.7")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("1000")]),t._v(" "),n("td",[t._v("8.0")]),t._v(" "),n("td",[t._v("7.8")]),t._v(" "),n("td",[t._v("11.9")])])])]),t._v(" "),n("p",[t._v("即使大小为10，"),n("code",[t._v("ArrayMap")]),t._v("的性能也要比"),n("code",[t._v("HashMap")]),t._v("差——除迭代循环时以外。而在使用"),n("code",[t._v("Map")]),t._v("时，迭代的作用通常并不重要（"),n("code",[t._v("get()")]),t._v("通常是我们时间花得最多的地方）。"),n("code",[t._v("TreeMap")]),t._v("提供了出色的"),n("code",[t._v("put()")]),t._v("以及迭代时间，但"),n("code",[t._v("get()")]),t._v("的性能并不佳。但是，我们为什么仍然需要使用"),n("code",[t._v("TreeMap")]),t._v("呢？这样一来，我们可以不把它作为"),n("code",[t._v("Map")]),t._v("使用，而作为创建顺序列表的一种途径。树的本质在于它总是顺序排列的，不必特别进行排序（它的排序方式马上就要讲到）。一旦填充了一个"),n("code",[t._v("TreeMap")]),t._v("，就可以调用"),n("code",[t._v("keySet()")]),t._v("来获得键的一个"),n("code",[t._v("Set")]),t._v("“景象”。然后用"),n("code",[t._v("toArray()")]),t._v("产生包含了那些键的一个数组。随后，可用"),n("code",[t._v("static")]),t._v("方法"),n("code",[t._v("Array.binarySearch()")]),t._v("快速查找排好序的数组中的内容。当然，也许只有在"),n("code",[t._v("HashMap")]),t._v("的行为不可接受的时候，才需要采用这种做法。因为"),n("code",[t._v("HashMap")]),t._v("的设计宗旨就是进行快速的检索操作。最后，当我们使用"),n("code",[t._v("Map")]),t._v("时，首要的选择应该是"),n("code",[t._v("HashMap")]),t._v("。只有在极少数情况下才需要考虑其他方法。")]),t._v(" "),n("p",[t._v("此外，在上面那张表里，有另一个性能问题没有反映出来。下述程序用于测试不同类型"),n("code",[t._v("Map")]),t._v("的创建速度：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: MapCreation.java\n// Demonstrates time differences in Map creation\npackage c08.newcollections;\nimport java.util.*;\n\npublic class MapCreation {\n  public static void main(String[] args) {\n    final long REPS = 100000;\n    long t1 = System.currentTimeMillis();\n    System.out.print("Hashtable");\n    for(long i = 0; i < REPS; i++)\n      new Hashtable();\n    long t2 = System.currentTimeMillis();\n    System.out.println(": " + (t2 - t1));\n    t1 = System.currentTimeMillis();\n    System.out.print("TreeMap");\n    for(long i = 0; i < REPS; i++)\n      new TreeMap();\n    t2 = System.currentTimeMillis();\n    System.out.println(": " + (t2 - t1));\n    t1 = System.currentTimeMillis();\n    System.out.print("HashMap");\n    for(long i = 0; i < REPS; i++)\n      new HashMap();\n    t2 = System.currentTimeMillis();\n    System.out.println(": " + (t2 - t1));\n  }\n} ///:~\n\n')])])]),n("p",[t._v("在写这个程序期间，"),n("code",[t._v("TreeMap")]),t._v("的创建速度比其他两种类型明显快得多（但你应亲自尝试一下，因为据说新版本可能会改善"),n("code",[t._v("ArrayMap")]),t._v("的性能）。考虑到这方面的原因，同时由于前述"),n("code",[t._v("TreeMap")]),t._v("出色的"),n("code",[t._v("put()")]),t._v("性能，所以如果需要创建大量"),n("code",[t._v("Map")]),t._v("，而且只有在以后才需要涉及大量检索操作，那么最佳的策略就是：创建和填充"),n("code",[t._v("TreeMap")]),t._v("；以后检索量增大的时候，再将重要的"),n("code",[t._v("TreeMap")]),t._v("转换成"),n("code",[t._v("HashMap")]),t._v("——使用"),n("code",[t._v("HashMap(Map)")]),t._v("构造器。同样地，只有在事实证明确实存在性能瓶颈后，才应关心这些方面的问题——先用起来，再根据需要加快速度。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-6-未支持的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-6-未支持的操作"}},[t._v("#")]),t._v(" 8.7.6 未支持的操作")]),t._v(" "),n("p",[t._v("利用"),n("code",[t._v("static")]),t._v("（静态）数组"),n("code",[t._v("Arrays.toList()")]),t._v("，也许能将一个数组转换成"),n("code",[t._v("List")]),t._v("，如下所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: Unsupported.java\n// Sometimes methods defined in the Collection\n// interfaces don\'t work!\npackage c08.newcollections;\nimport java.util.*;\n\npublic class Unsupported {\n  private static String[] s = {\n    "one", "two", "three", "four", "five",\n    "six", "seven", "eight", "nine", "ten",\n  };\n  static List a = Arrays.toList(s);\n  static List a2 = Arrays.toList(\n    new String[] { s[3], s[4], s[5] });\n  public static void main(String[] args) {\n    Collection1.print(a); // Iteration\n    System.out.println(\n      "a.contains(" + s[0] + ") = " +\n      a.contains(s[0]));\n    System.out.println(\n      "a.containsAll(a2) = " +\n      a.containsAll(a2));\n    System.out.println("a.isEmpty() = " +\n      a.isEmpty());\n    System.out.println(\n      "a.indexOf(" + s[5] + ") = " +\n      a.indexOf(s[5]));\n    // Traverse backwards:\n    ListIterator lit = a.listIterator(a.size());\n    while(lit.hasPrevious())\n      System.out.print(lit.previous());\n    System.out.println();\n    // Set the elements to different values:\n    for(int i = 0; i < a.size(); i++)\n      a.set(i, "47");\n    Collection1.print(a);\n    // Compiles, but won\'t run:\n    lit.add("X"); // Unsupported operation\n    a.clear(); // Unsupported\n    a.add("eleven"); // Unsupported\n    a.addAll(a2); // Unsupported\n    a.retainAll(a2); // Unsupported\n    a.remove(s[0]); // Unsupported\n    a.removeAll(a2); // Unsupported\n  }\n} ///:~\n\n')])])]),n("p",[t._v("从中可以看出，实际只实现了"),n("code",[t._v("Collection")]),t._v("和"),n("code",[t._v("List")]),t._v("接口的一部分。剩余的方法导致了不受欢迎的一种情况，名为"),n("code",[t._v("UnsupportedOperationException")]),t._v("。在下一章里，我们会讲述异常的详细情况，但在这里有必要进行一下简单说明。这里的关键在于“集合接口”，以及新集合库内的另一些接口，它们都包含了“可选的”方法。在实现那些接口的集合类中，或者提供、或者没有提供对那些方法的支持。若调用一个未获支持的方法，就会导致一个"),n("code",[t._v("UnsupportedOperationException")]),t._v("（操作未支持异常），这表明出现了一个编程错误。")]),t._v(" "),n("p",[t._v("大家或许会觉得奇怪，不是说“接口”和基类最大的“卖点”就是它们许诺这些方法能产生一些有意义的行为吗？上述异常破坏了那个许诺——它调用的一部分方法不仅不能产生有意义的行为，而且还会中止程序的运行。在这些情况下，类型的所谓安全保证似乎显得一钱不值！但是，情况并没有想象的那么坏。通过"),n("code",[t._v("Collection")]),t._v("，"),n("code",[t._v("List")]),t._v("，"),n("code",[t._v("Set")]),t._v("或者"),n("code",[t._v("Map")]),t._v("，编译器仍然限制我们只能调用那个接口中的方法，所以它和Smalltalk还是存在一些区别的（在Smalltalk中，可为任何对象调用任何方法，而且只有在运行程序时才知道这些调用是否可行）。除此以外，以"),n("code",[t._v("Collection")]),t._v("作为参数的大多数方法只能从那个集合中读取数据——"),n("code",[t._v("Collection")]),t._v("的所有"),n("code",[t._v("read")]),t._v("方法都不是可选的。")]),t._v(" "),n("p",[t._v("这样一来，系统就可避免在设计期间出现接口的冲突。而在集合库的其他设计模式中，最终经常都会得到数量过多的接口，用它们描述基本方案的每一种变化形式，所以学习和掌握显得非常困难。有些时候，甚至难于捕捉接口中的所有特殊情况，因为人们可能设计出任何新接口。但Java的“不支持的操作”方法却达到了新集合库的一个重要设计目标：易于学习和使用。但是，为了使这一方法真正有效，却需满足下述条件：")]),t._v(" "),n("p",[t._v("(1) "),n("code",[t._v("UnsupportedOperationException")]),t._v("必须属于一种“非常”事件。也就是说，对于大多数类来说，所有操作都应是可行的。只有在一些特殊情况下，一、两个操作才可能未获支持。新集合库满足了这一条件，因为绝大多数时候用到的类——"),n("code",[t._v("ArrayList")]),t._v("，"),n("code",[t._v("LinkedList")]),t._v("，"),n("code",[t._v("HashList")]),t._v("和"),n("code",[t._v("HashMap")]),t._v("，以及其他集合方案——都提供了对所有操作的支持。但是，如果想新建一个集合，同时不想为集合接口中的所有方法都提供有意义的定义，同时令其仍与现有库配合，这种设计方法也确实提供了一个“后门”可以利用。")]),t._v(" "),n("p",[t._v("(2) 若一个操作未获支持，那么"),n("code",[t._v("UnsupportedOperationException")]),t._v("（未支持的操作异常）极有可能在实现期间出现，则不是在产品已交付给客户以后才会出现。它毕竟指出的是一个编程错误——不正确地使用了一个类。这一点不能十分确定，通过也可以看出这种方案的“试验”特征——只有经过多次试验，才能找出最理想的工作方式。")]),t._v(" "),n("p",[t._v("在上面的例子中，"),n("code",[t._v("Arrays.toList()")]),t._v("产生了一个"),n("code",[t._v("List")]),t._v("（列表），该列表是由一个固定长度的数组后推出来的。因此唯一能够支持的就是那些不改变数组长度的操作。在另一方面，若请求一个新接口表达不同种类的行为（可能叫作"),n("code",[t._v("FixedSizeList")]),t._v("——固定长度列表），就有遭遇更大的复杂程度的危险。这样一来，以后试图使用库的时候，很快就会发现自己不知从何处下手。")]),t._v(" "),n("p",[t._v("对那些采用"),n("code",[t._v("Collection")]),t._v("，"),n("code",[t._v("List")]),t._v("，"),n("code",[t._v("Set")]),t._v("或者"),n("code",[t._v("Map")]),t._v("作为参数的方法，它们的文档应当指出哪些可选的方法是必须实现的。举个例子来说，排序要求实现"),n("code",[t._v("set()")]),t._v("和"),n("code",[t._v("Iterator.set()")]),t._v("方法，但不包括"),n("code",[t._v("add()")]),t._v("和"),n("code",[t._v("remove()")]),t._v("。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-7-排序和搜索"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-7-排序和搜索"}},[t._v("#")]),t._v(" 8.7.7 排序和搜索")]),t._v(" "),n("p",[t._v("Java 1.2添加了自己的一套实用工具，可用来对数组或列表进行排列和搜索。这些工具都属于两个新类的“静态”方法。这两个类分别是用于排序和搜索数组的"),n("code",[t._v("Arrays")]),t._v("，以及用于排序和搜索列表的"),n("code",[t._v("Collections")]),t._v("。")]),t._v(" "),n("p",[t._v("(1) 数组")]),t._v(" "),n("p",[n("code",[t._v("Arrays")]),t._v("类为所有基本数据类型的数组提供了一个重载的"),n("code",[t._v("sort()")]),t._v("和"),n("code",[t._v("binarySearch()")]),t._v("，它们亦可用于"),n("code",[t._v("String")]),t._v("和"),n("code",[t._v("Object")]),t._v("。下面这个例子显示出如何排序和搜索一个字节数组（其他所有基本数据类型都是类似的）以及一个"),n("code",[t._v("String")]),t._v("数组：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: Array1.java\n// Testing the sorting & searching in Arrays\npackage c08.newcollections;\nimport java.util.*;\n\npublic class Array1 {\n  static Random r = new Random();\n  static String ssource =\n    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +\n    "abcdefghijklmnopqrstuvwxyz";\n  static char[] src = ssource.toCharArray();\n  // Create a random String\n  public static String randString(int length) {\n    char[] buf = new char[length];\n    int rnd;\n    for(int i = 0; i < length; i++) {\n      rnd = Math.abs(r.nextInt()) % src.length;\n      buf[i] = src[rnd];\n    }\n    return new String(buf);\n  }\n  // Create a random array of Strings:\n  public static\n  String[] randStrings(int length, int size) {\n    String[] s = new String[size];\n    for(int i = 0; i < size; i++)\n      s[i] = randString(length);\n    return s;\n  }\n  public static void print(byte[] b) {\n    for(int i = 0; i < b.length; i++)\n      System.out.print(b[i] + " ");\n    System.out.println();\n  }\n  public static void print(String[] s) {\n    for(int i = 0; i < s.length; i++)\n      System.out.print(s[i] + " ");\n    System.out.println();\n  }\n  public static void main(String[] args) {\n    byte[] b = new byte[15];\n    r.nextBytes(b); // Fill with random bytes\n    print(b);\n    Arrays.sort(b);\n    print(b);\n    int loc = Arrays.binarySearch(b, b[10]);\n    System.out.println("Location of " + b[10] +\n      " = " + loc);\n    // Test String sort & search:\n    String[] s = randStrings(4, 10);\n    print(s);\n    Arrays.sort(s);\n    print(s);\n    loc = Arrays.binarySearch(s, s[4]);\n    System.out.println("Location of " + s[4] +\n      " = " + loc);\n  }\n} ///:~\n')])])]),n("p",[t._v("类的第一部分包含了用于产生随机字符串对象的实用工具，可供选择的随机字母保存在一个字符数组中。"),n("code",[t._v("randString()")]),t._v("返回一个任意长度的字符串；而"),n("code",[t._v("readStrings()")]),t._v("创建随机字符串的一个数组，同时给定每个字符串的长度以及希望的数组大小。两个"),n("code",[t._v("print()")]),t._v("方法简化了对示范数组的显示。在"),n("code",[t._v("main()")]),t._v("中，"),n("code",[t._v("Random.nextBytes()")]),t._v("用随机选择的字节填充数组参数（没有对应的"),n("code",[t._v("Random")]),t._v("方法用于创建其他基本数据类型的数组）。获得一个数组后，便可发现为了执行"),n("code",[t._v("sort()")]),t._v("或者"),n("code",[t._v("binarySearch()")]),t._v("，只需发出一次方法调用即可。与"),n("code",[t._v("binarySearch()")]),t._v("有关的还有一个重要的警告：若在执行一次"),n("code",[t._v("binarySearch()")]),t._v("之前不调用"),n("code",[t._v("sort()")]),t._v("，便会发生不可预测的行为，其中甚至包括无限循环。")]),t._v(" "),n("p",[t._v("对"),n("code",[t._v("String")]),t._v("的排序以及搜索是相似的，但在运行程序的时候，我们会注意到一个有趣的现象：排序遵守的是字典顺序，亦即大写字母在字符集中位于小写字母的前面。因此，所有大写字母都位于列表的最前面，后面再跟上小写字母——Z居然位于a的前面。似乎连电话簿也是这样排序的。")]),t._v(" "),n("p",[t._v("(2) 可比较与比较器")]),t._v(" "),n("p",[t._v("但假若我们不满足这一排序方式，又该如何处理呢？例如本书后面的索引，如果必须对以"),n("code",[t._v("A")]),t._v("或"),n("code",[t._v("a")]),t._v("开头的词条分别到两处地方查看，那么肯定会使读者颇不耐烦。")]),t._v(" "),n("p",[t._v("若想对一个"),n("code",[t._v("Object")]),t._v("数组进行排序，那么必须解决一个问题。根据什么来判定两个"),n("code",[t._v("Object")]),t._v("的顺序呢？不幸的是，最初的Java设计者并不认为这是一个重要的问题，否则就已经在根类"),n("code",[t._v("Object")]),t._v("里定义它了。这样造成的一个后果便是：必须从外部进行"),n("code",[t._v("Object")]),t._v("的排序，而且新的集合库提供了实现这一操作的标准方式（最理想的是在"),n("code",[t._v("Object")]),t._v("里定义它）。")]),t._v(" "),n("p",[t._v("针对"),n("code",[t._v("Object")]),t._v("数组（以及"),n("code",[t._v("String")]),t._v("，它当然属于"),n("code",[t._v("Object")]),t._v("的一种），可使用一个"),n("code",[t._v("sort()")]),t._v("，并令其接纳另一个参数：实现了"),n("code",[t._v("Comparator")]),t._v("接口（即“比较器”接口，新集合库的一部分）的一个对象，并用它的单个"),n("code",[t._v("compare()")]),t._v("方法进行比较。这个方法将两个准备比较的对象作为自己的参数使用——若第一个参数小于第二个，返回一个负整数；若相等，返回零；若第一个参数大于第二个，则返回正整数。基于这一规则，上述例子的"),n("code",[t._v("String")]),t._v("部分便可重新写过，令其进行真正按字母顺序的排序：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: AlphaComp.java\n// Using Comparator to perform an alphabetic sort\npackage c08.newcollections;\nimport java.util.*;\n\npublic class AlphaComp implements Comparator {\n  public int compare(Object o1, Object o2) {\n    // Assume it\'s used only for Strings...\n    String s1 = ((String)o1).toLowerCase();\n    String s2 = ((String)o2).toLowerCase();\n    return s1.compareTo(s2);\n  }\n  public static void main(String[] args) {\n    String[] s = Array1.randStrings(4, 10);\n    Array1.print(s);\n    AlphaComp ac = new AlphaComp();\n    Arrays.sort(s, ac);\n    Array1.print(s);\n    // Must use the Comparator to search, also:\n    int loc = Arrays.binarySearch(s, s[3], ac);\n    System.out.println("Location of " + s[3] +\n     " = " + loc);\n  }\n} ///:~\n')])])]),n("p",[t._v("通过转换为"),n("code",[t._v("String")]),t._v("，"),n("code",[t._v("compare()")]),t._v("方法会进行“暗示”性的测试，保证自己操作的只能是"),n("code",[t._v("String")]),t._v("对象——运行期系统会捕获任何差错。将两个字符串都强迫换成小写形式后，"),n("code",[t._v("String.compareTo()")]),t._v("方法会产生预期的结果。")]),t._v(" "),n("p",[t._v("若用自己的"),n("code",[t._v("Comparator")]),t._v("来进行一次"),n("code",[t._v("sort()")]),t._v("，那么在使用"),n("code",[t._v("binarySearch()")]),t._v("时必须使用那个相同的"),n("code",[t._v("Comparator")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("Arrays")]),t._v("类提供了另一个"),n("code",[t._v("sort()")]),t._v("方法，它会采用单个参数：一个"),n("code",[t._v("Object")]),t._v("数组，但没有"),n("code",[t._v("Comparator")]),t._v("。这个"),n("code",[t._v("sort()")]),t._v("方法也必须用同样的方式来比较两个"),n("code",[t._v("Object")]),t._v("。通过实现"),n("code",[t._v("Comparable")]),t._v("接口，它采用了赋予一个类的“自然比较方法”。这个接口含有单独一个方法——"),n("code",[t._v("compareTo()")]),t._v("，能分别根据它小于、等于或者大于参数而返回负数、零或者正数，从而实现对象的比较。下面这个例子简单地阐示了这一点：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: CompClass.java\n// A class that implements Comparable\npackage c08.newcollections;\nimport java.util.*;\n\npublic class CompClass implements Comparable {\n  private int i;\n  public CompClass(int ii) { i = ii; }\n  public int compareTo(Object o) {\n    // Implicitly tests for correct type:\n    int argi = ((CompClass)o).i;\n    if(i == argi) return 0;\n    if(i < argi) return -1;\n    return 1;\n  }\n  public static void print(Object[] a) {\n    for(int i = 0; i < a.length; i++)\n      System.out.print(a[i] + " ");\n    System.out.println();\n  }\n  public String toString() { return i + ""; }\n  public static void main(String[] args) {\n    CompClass[] a = new CompClass[20];\n    for(int i = 0; i < a.length; i++)\n      a[i] = new CompClass(\n        (int)(Math.random() *100));\n    print(a);\n    Arrays.sort(a);\n    print(a);\n    int loc = Arrays.binarySearch(a, a[3]);\n    System.out.println("Location of " + a[3] +\n     " = " + loc);\n  }\n} ///:~\n')])])]),n("p",[t._v("当然，我们的"),n("code",[t._v("compareTo()")]),t._v("方法亦可根据实际情况增大复杂程度。")]),t._v(" "),n("p",[t._v("(3) 列表")]),t._v(" "),n("p",[t._v("可用与数组相同的形式排序和搜索一个列表（"),n("code",[t._v("List")]),t._v("）。用于排序和搜索列表的静态方法包含在类"),n("code",[t._v("Collections")]),t._v("中，但它们拥有与"),n("code",[t._v("Arrays")]),t._v("中差不多的签名："),n("code",[t._v("sort(List)")]),t._v("用于对一个实现了"),n("code",[t._v("Comparable")]),t._v("的对象列表进行排序；"),n("code",[t._v("binarySearch(List,Object)")]),t._v("用于查找列表中的某个对象；"),n("code",[t._v("sort(List,Comparator)")]),t._v("利用一个“比较器”对一个列表进行排序；")]),t._v(" "),n("p",[t._v("而"),n("code",[t._v("binarySearch")]),t._v("("),n("code",[t._v("List")]),t._v(","),n("code",[t._v("Object")]),t._v(","),n("code",[t._v("Comparator")]),t._v(")则用于查找那个列表中的一个对象（注释⑨）。下面这个例子利用了预先定义好的"),n("code",[t._v("CompClass")]),t._v("和"),n("code",[t._v("AlphaComp")]),t._v("来示范"),n("code",[t._v("Collections")]),t._v("中的各种排序工具：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: ListSort.java\n// Sorting and searching Lists with \'Collections\'\npackage c08.newcollections;\nimport java.util.*;\n\npublic class ListSort {\n  public static void main(String[] args) {\n    final int SZ = 20;\n    // Using "natural comparison method":\n    List a = new ArrayList();\n    for(int i = 0; i < SZ; i++)\n      a.add(new CompClass(\n        (int)(Math.random() *100)));\n    Collection1.print(a);\n    Collections.sort(a);\n    Collection1.print(a);\n    Object find = a.get(SZ/2);\n    int loc = Collections.binarySearch(a, find);\n    System.out.println("Location of " + find +\n     " = " + loc);\n    // Using a Comparator:\n    List b = new ArrayList();\n    for(int i = 0; i < SZ; i++)\n      b.add(Array1.randString(4));\n    Collection1.print(b);\n    AlphaComp ac = new AlphaComp();\n    Collections.sort(b, ac);\n    Collection1.print(b);\n    find = b.get(SZ/2);\n    // Must use the Comparator to search, also:\n    loc = Collections.binarySearch(b, find, ac);\n    System.out.println("Location of " + find +\n     " = " + loc);\n  }\n} ///:~\n')])])]),n("p",[t._v("⑨：在本书写作时，已宣布了一个新的"),n("code",[t._v("Collections.stableSort()")]),t._v("，可用它进行合并式排序，但还没有它的测试版问世。")]),t._v(" "),n("p",[t._v("这些方法的用法与在"),n("code",[t._v("Arrays")]),t._v("中的用法是完全一致的，只是用一个列表代替了数组。")]),t._v(" "),n("p",[n("code",[t._v("TreeMap")]),t._v("也必须根据"),n("code",[t._v("Comparable")]),t._v("或者"),n("code",[t._v("Comparator")]),t._v("对自己的对象进行排序。")]),t._v(" "),n("h2",{attrs:{id:"_8-7-8-实用工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-8-实用工具"}},[t._v("#")]),t._v(" 8.7.8 实用工具")]),t._v(" "),n("p",[n("code",[t._v("Collections")]),t._v("类中含有其他大量有用的实用工具：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("enumeration(Collection)\n\nProduces an old-style Enumeration for the argument.\n\nmax(Collection)\n\nmin(Collection)\n\nProduces the maximum or minimum element in the argument using the natural comparison method of the objects in the Collection.\n\nmax(Collection, Comparator)\n\nmin(Collection, Comparator)\n\nProduces the maximum or minimum element in the Collection using the Comparator.\n\nnCopies(int n, Object o)\n\nReturns an immutable List of size n whose handles all point to o.\n\nsubList(List, int min, int max)\n\nReturns a new List backed by the specified argument List that is a window into that argument with indexes starting at min and stopping just before max.\n")])])]),n("ul",[n("li",[n("p",[n("code",[t._v("enumeration(Collection)")]),t._v(" 为参数产生原始风格的"),n("code",[t._v("Enumeration")]),t._v("（枚举）")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("max(Collection)")]),t._v("，"),n("code",[t._v("min(Collection)")]),t._v(" 在参数中用集合内对象的自然比较方法产生最大或最小元素")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("max(Collection,Comparator)")]),t._v("，"),n("code",[t._v("min(Collection,Comparator)")]),t._v(" 在集合内用比较器产生最大或最小元素")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("nCopies(int n, Object o)")]),t._v(" 返回长度为"),n("code",[t._v("n")]),t._v("的一个不可变列表，它的所有引用均指向"),n("code",[t._v("o")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("subList(List,int min,int max)")]),t._v("返回由指定参数列表后推得到的一个新列表。可将这个列表想象成一个“窗口”，它自索引为"),n("code",[t._v("min")]),t._v("的地方开始，正好结束于"),n("code",[t._v("max")]),t._v("的前面")])])]),t._v(" "),n("p",[t._v("注意"),n("code",[t._v("min()")]),t._v("和"),n("code",[t._v("max()")]),t._v("都是随同"),n("code",[t._v("Collection")]),t._v("对象工作的，而非随同"),n("code",[t._v("List")]),t._v("，所以不必担心"),n("code",[t._v("Collection")]),t._v("是否需要排序（就象早先指出的那样，在执行一次"),n("code",[t._v("binarySearch()")]),t._v("——即二进制搜索——之前，必须对一个"),n("code",[t._v("List")]),t._v("或者一个数组执行"),n("code",[t._v("sort()")]),t._v("）。")]),t._v(" "),n("p",[t._v("(1) 使"),n("code",[t._v("Collection")]),t._v("或"),n("code",[t._v("Map")]),t._v("不可修改")]),t._v(" "),n("p",[t._v("通常，创建"),n("code",[t._v("Collection")]),t._v("或"),n("code",[t._v("Map")]),t._v("的一个“只读”版本显得更有利一些。"),n("code",[t._v("Collections")]),t._v("类允许我们达到这个目标，方法是将原始容器传递进入一个方法，并令其传回一个只读版本。这个方法共有四种变化形式，分别用于"),n("code",[t._v("Collection")]),t._v("（如果不想把集合当作一种更特殊的类型对待）、"),n("code",[t._v("List")]),t._v("、"),n("code",[t._v("Set")]),t._v("以及"),n("code",[t._v("Map")]),t._v("。下面这个例子演示了为它们分别构建只读版本的正确方法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: ReadOnly.java\n// Using the Collections.unmodifiable methods\npackage c08.newcollections;\nimport java.util.*;\n\npublic class ReadOnly {\n  public static void main(String[] args) {\n    Collection c = new ArrayList();\n    Collection1.fill(c); // Insert useful data\n    c = Collections.unmodifiableCollection(c);\n    Collection1.print(c); // Reading is OK\n    //! c.add("one"); // Can\'t change it\n\n    List a = new ArrayList();\n    Collection1.fill(a);\n    a = Collections.unmodifiableList(a);\n    ListIterator lit = a.listIterator();\n    System.out.println(lit.next()); // Reading OK\n    //! lit.add("one"); // Can\'t change it\n\n    Set s = new HashSet();\n    Collection1.fill(s);\n    s = Collections.unmodifiableSet(s);\n    Collection1.print(s); // Reading OK\n    //! s.add("one"); // Can\'t change it\n\n    Map m = new HashMap();\n    Map1.fill(m, Map1.testData1);\n    m = Collections.unmodifiableMap(m);\n    Map1.print(m); // Reading OK\n    //! m.put("Ralph", "Howdy!");\n  }\n} ///:~\n')])])]),n("p",[t._v("对于每种情况，在将其正式变为只读以前，都必须用有有效的数据填充容器。一旦载入成功，最佳的做法就是用“不可修改”调用产生的引用替换现有的引用。这样做可有效避免将其变成不可修改后不慎改变其中的内容。在另一方面，该工具也允许我们在一个类中将能够修改的容器保持为"),n("code",[t._v("private")]),t._v("状态，并可从一个方法调用中返回指向那个容器的一个只读引用。这样一来，虽然我们可在类里修改它，但其他任何人都只能读。")]),t._v(" "),n("p",[t._v("为特定类型调用“不可修改”的方法不会造成编译期间的检查，但一旦发生任何变化，对修改特定容器的方法的调用便会产生一个"),n("code",[t._v("UnsupportedOperationException")]),t._v("异常。")]),t._v(" "),n("p",[t._v("(2) "),n("code",[t._v("Collection")]),t._v("或"),n("code",[t._v("Map")]),t._v("的同步")]),t._v(" "),n("p",[n("code",[t._v("synchronized")]),t._v("关键字是“多线程”机制一个非常重要的部分。我们到第14章才会对这一机制作深入的探讨。在这儿，大家只需注意到"),n("code",[t._v("Collections")]),t._v("类提供了对整个容器进行自动同步的一种途径。它的语法与“不可修改”的方法是类似的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//: Synchronization.java\n// Using the Collections.synchronized methods\npackage c08.newcollections;\nimport java.util.*;\n\npublic class Synchronization {\n  public static void main(String[] args) {\n    Collection c =\n      Collections.synchronizedCollection(\n        new ArrayList());\n    List list = Collections.synchronizedList(\n      new ArrayList());\n    Set s = Collections.synchronizedSet(\n      new HashSet());\n    Map m = Collections.synchronizedMap(\n      new HashMap());\n  }\n} ///:~\n")])])]),n("p",[t._v("在这种情况下，我们通过适当的“同步”方法直接传递新容器；这样做可避免不慎暴露出未同步的版本。")]),t._v(" "),n("p",[t._v("新集合也提供了能防止多个进程同时修改一个容器内容的机制。若在一个容器里迭代，同时另一些进程介入，并在那个容器中插入、删除或修改一个对象，便会面临发生冲突的危险。我们可能已传递了那个对象，可能它位位于我们前面，可能容器的大小在我们调用"),n("code",[t._v("size()")]),t._v("后已发生了收缩——我们面临各种各样可能的危险。针对这个问题，新的集合库集成了一套解决的机制，能查出除我们的进程自己需要负责的之外的、对容器的其他任何修改。若探测到有其他方面也准备修改容器，便会立即产生一个"),n("code",[t._v("ConcurrentModificationException")]),t._v("（并发修改异常）。我们将这一机制称为“立即失败”——它并不用更复杂的算法在“以后”侦测问题，而是“立即”产生异常。")])])}),[],!1,null,null,null);e.default=a.exports}}]);