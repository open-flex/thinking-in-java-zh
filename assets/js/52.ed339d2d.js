(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{450:function(t,e,n){"use strict";n.r(e);var v=n(56),o=Object(v.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_13-13-action的替代品"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-13-action的替代品"}},[t._v("#")]),t._v(" 13.13 "),n("code",[t._v("action")]),t._v("的替代品")]),t._v(" "),n("p",[t._v("正如早先指出的那样，"),n("code",[t._v("action()")]),t._v("并不是我们对所有事进行分类后自动为"),n("code",[t._v("handleEvent()")]),t._v("调用的唯一方法。有三个其它的被调用的方法集，如果我们想捕捉某些类型的事件（键盘、鼠标和焦点事件），因此我们不得不重载规定的方法。这些方法是定义在基类组件里，所以他们几乎在所有我们可能安放在窗体中的组件中都是有用的。然而，我们也注意到这种方法在Java 1.1版中是不被支持的，同样尽管我们可能注意到继承代码利用了这种方法，我们将会使用Java 1.1版的方法来代替（本章后面有详细介绍）。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("组件方法")]),t._v(" "),n("th",[t._v("何时调用")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("action(Event evt, Object what)")])]),t._v(" "),n("td",[t._v("当典型的事件针对组件发生（例如，当按下一个按钮或下拉列表项目被选中）时调用")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("keyDown(Event evt, int key)")])]),t._v(" "),n("td",[t._v("当按键被按下，组件拥有焦点时调用。第二个参数是按下的键并且是冗余的是从evt.key处复制来的")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("keyup(Event evt, int key)")])]),t._v(" "),n("td",[t._v("当按键被释放，组件拥有焦点时调用")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("lostFocus(Event evt, Object what)")])]),t._v(" "),n("td",[t._v("焦点从目标处移开时调用。通常，"),n("code",[t._v("what")]),t._v("是从"),n("code",[t._v("evt.arg")]),t._v("里冗余复制的")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("gotFocus(Event evt, Object what)")])]),t._v(" "),n("td",[t._v("焦点移动到目标时调用")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("mouseDown(Event evt, int x，int y)")])]),t._v(" "),n("td",[t._v("一个鼠标按下存在于组件之上，在X，Y座标处时调用")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("mouseUp(Event evt, int x, int y)")])]),t._v(" "),n("td",[t._v("一个鼠标升起存在于组件之上时调用")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("mouseMove(Event evt, int x, int y)")])]),t._v(" "),n("td",[t._v("当鼠标在组件上移动时调用")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("mouseDrag(Event evt, int x, int y)")])]),t._v(" "),n("td",[t._v("鼠标在一次"),n("code",[t._v("mouseDown")]),t._v("事件发生后拖动。所有拖动事件都会报告给内部发生了"),n("code",[t._v("mouseDown")]),t._v("事件的那个组件，直到遇到一次"),n("code",[t._v("mouseUp")]),t._v("为止")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("mouseEnter(Event evt, int x, int y)")])]),t._v(" "),n("td",[t._v("鼠标从前不在组件上方，但目前在")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("mouseExit(Event evt, int x, int y)")])]),t._v(" "),n("td",[t._v("鼠标曾经位于组件上方，但目前不在")])])])]),t._v(" "),n("p",[t._v("当我们处理特殊情况时——一个鼠标事件，例如，它恰好是我们想得到的鼠标事件存在的座标，我们将看到每个程序接收一个事件连同一些我们所需要的信息。有趣的是，当组件的"),n("code",[t._v("handleEvent()")]),t._v("调用这些方法时（典型的事例），附加的参数总是多余的因为它们包含在事件对象里。事实上，如果我们观察"),n("code",[t._v("component.handleEvent()")]),t._v("的源代码，我们能发现它显然将增加的参数抽出事件对象（这可能是考虑到在一些语言中无效率的编码，但请记住Java的焦点是安全的，不必担心。）试验对我们表明这些事件事实上在被调用并且作为一个有趣的尝试是值得创建一个重载每个方法的程序片，（"),n("code",[t._v("action()")]),t._v("的重载在本章的其它地方）当事件发生时显示它们的相关数据。")]),t._v(" "),n("p",[t._v("这个例子同样向我们展示了怎样制造自己的按钮对象，因为它是作为目标的所有事件权益来使用。我可能会首先（也是必须的）假设制造一个新的按钮，我们从按钮处继承。但它并不能运行。取而代之的是，我们从画布组件处（一个非常普通组件）继承，并在其上不使用"),n("code",[t._v("paint()")]),t._v("方法画出一个按钮。正如我们所看到的，自从一些代码混入到画按钮中去，按钮根本就不运行，这实在是太糟糕了。（如果您不相信我，试图在例子中为画布组件交换按钮，请记住调用称为"),n("code",[t._v("super")]),t._v("的基类构造器。我们会看到按钮不会被画出，事件也不会被处理。）")]),t._v(" "),n("p",[n("code",[t._v("myButton")]),t._v("类是明确说明的：它只和一个自动事件（"),n("code",[t._v("AutoEvent")]),t._v("）“父窗口”一起运行（父窗口不是一个基类，它是按钮创建和存在的窗口。）。通过这个知识，"),n("code",[t._v("myButton")]),t._v("可能进入到父窗口并且处理它的文字字段，必然就能将状态信息写入到父窗口的字段里。当然这是一种非常有限的解决方法，"),n("code",[t._v("myButton")]),t._v("仅能在连结"),n("code",[t._v("AutoEvent")]),t._v("时被使用。这种代码有时称为“高度结合”。但是，制造"),n("code",[t._v("myButton")]),t._v("更需要很多的不是为例子（和可能为我们将写的一些程序片）担保的努力。再者，请注意下面的代码使用了Java 1.1版不支持的API。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//: AutoEvent.java\n// Alternatives to action()\nimport java.awt.*;\nimport java.applet.*;\nimport java.util.*;\n\nclass MyButton extends Canvas {\n  AutoEvent parent;\n  Color color;\n  String label;\n  MyButton(AutoEvent parent,\n           Color color, String label) {\n    this.label = label;\n    this.parent = parent;\n    this.color = color;\n  }\n  public void paint(Graphics  g) {\n    g.setColor(color);\n    int rnd = 30;\n    g.fillRoundRect(0, 0, size().width,\n                    size().height, rnd, rnd);\n    g.setColor(Color.black);\n    g.drawRoundRect(0, 0, size().width,\n                    size().height, rnd, rnd);\n    FontMetrics fm = g.getFontMetrics();\n    int width = fm.stringWidth(label);\n    int height = fm.getHeight();\n    int ascent = fm.getAscent();\n    int leading = fm.getLeading();\n    int horizMargin = (size().width - width)/2;\n    int verMargin = (size().height - height)/2;\n    g.setColor(Color.white);\n    g.drawString(label, horizMargin,\n                 verMargin + ascent + leading);\n  }\n  public boolean keyDown(Event evt, int key) {\n    TextField t =\n      (TextField)parent.h.get("keyDown");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean keyUp(Event evt, int key) {\n    TextField t =\n      (TextField)parent.h.get("keyUp");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean lostFocus(Event evt, Object w) {\n    TextField t =\n      (TextField)parent.h.get("lostFocus");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean gotFocus(Event evt, Object w) {\n    TextField t =\n      (TextField)parent.h.get("gotFocus");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean\n  mouseDown(Event evt,int x,int y) {\n    TextField t =\n      (TextField)parent.h.get("mouseDown");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean\n  mouseDrag(Event evt,int x,int y) {\n    TextField t =\n      (TextField)parent.h.get("mouseDrag");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean\n  mouseEnter(Event evt,int x,int y) {\n    TextField t =\n      (TextField)parent.h.get("mouseEnter");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean\n  mouseExit(Event evt,int x,int y) {\n    TextField t =\n      (TextField)parent.h.get("mouseExit");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean\n  mouseMove(Event evt,int x,int y) {\n    TextField t =\n      (TextField)parent.h.get("mouseMove");\n    t.setText(evt.toString());\n    return true;\n  }\n  public boolean mouseUp(Event evt,int x,int y) {\n    TextField t =\n      (TextField)parent.h.get("mouseUp");\n    t.setText(evt.toString());\n    return true;\n  }\n}\n\npublic class AutoEvent extends Applet {\n  Hashtable h = new Hashtable();\n  String[] event = {\n    "keyDown", "keyUp", "lostFocus",\n    "gotFocus", "mouseDown", "mouseUp",\n    "mouseMove", "mouseDrag", "mouseEnter",\n    "mouseExit"\n  };\n  MyButton\n    b1 = new MyButton(this, Color.blue, "test1"),\n    b2 = new MyButton(this, Color.red, "test2");\n  public void init() {\n    setLayout(new GridLayout(event.length+1,2));\n    for(int i = 0; i < event.length; i++) {\n      TextField t = new TextField();\n      t.setEditable(false);\n      add(new Label(event[i], Label.CENTER));\n      add(t);\n      h.put(event[i], t);\n    }\n    add(b1);\n    add(b2);\n  }\n} ///:~\n')])])]),n("p",[t._v("我们可以看到构造器使用利用参数同名的方法，所以参数被赋值，并且使用"),n("code",[t._v("this")]),t._v("来区分：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("this.label = label;\n")])])]),n("p",[n("code",[t._v("paint()")]),t._v("方法由简单的开始：它用按钮的颜色填充了一个“圆角矩形”，然后画了一个黑线围绕它。请注意"),n("code",[t._v("size()")]),t._v("的使用决定了组件的宽度和长度（当然，是像素）。这之后，"),n("code",[t._v("paint()")]),t._v("看起来非常的复杂，因为有大量的预测去计算出怎样利用“font metrics”集中按钮的标签到按钮里。我们能得到一个相当好的关于继续关注方法调用的主意，它将程序中那些相当平凡的代码挑出，当我们想集中一个标签到一些组件里时，我们正好可以对它进行剪切和粘贴。")]),t._v(" "),n("p",[t._v("您直到注意到"),n("code",[t._v("AutoEvent")]),t._v("类才能正确地理解"),n("code",[t._v("keyDown()")]),t._v(","),n("code",[t._v("keyUp()")]),t._v("及其它方法的运行。这包含一个"),n("code",[t._v("Hashtable")]),t._v("（译者注：散列表）去控制字符串来描述关于事件处理的事件和"),n("code",[t._v("TextField")]),t._v("类型。当然，这些能被静态的创建而不是放入"),n("code",[t._v("Hashtable")]),t._v("但我认为您会同意它是更容易使用和改变的。特别是，如果我们需要在"),n("code",[t._v("AutoEvent")]),t._v("中增加或删除一个新的事件类型，我们只需要简单地在事件列队中增加或删除一个字符串——所有的工作都自动地完成了。")]),t._v(" "),n("p",[t._v("我们查出在"),n("code",[t._v("keyDown()")]),t._v("，"),n("code",[t._v("keyup()")]),t._v("及其它方法中的字符串的位置回到"),n("code",[t._v("myButton")]),t._v("中。这些方法中的任何一个都用父引用试图回到父窗口。父类是一个"),n("code",[t._v("AutoEvent")]),t._v("，它包含"),n("code",[t._v("Hashtable h")]),t._v("和"),n("code",[t._v("get()")]),t._v("方法，当拥有特定的字符串时，将对一个我们知道的"),n("code",[t._v("TextField")]),t._v("对象产生一个引用（因此它被选派到那）。然后事件对象修改显示在"),n("code",[t._v("TextField")]),t._v("中的字符串陈述。从我们可以真正注意到举出的例子在我们的程序中运行事件时以来，可以发现这个例子运行起来颇为有趣的。")])])}),[],!1,null,null,null);e.default=o.exports}}]);