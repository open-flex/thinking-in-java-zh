(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{571:function(n,t,i){"use strict";i.r(t);var e=i(56),a=Object(e.a)({},(function(){var n=this,t=n.$createElement,i=n._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[i("h1",{attrs:{id:"_9-4-创建自己的异常"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-创建自己的异常"}},[n._v("#")]),n._v(" 9.4 创建自己的异常")]),n._v(" "),i("p",[n._v("并不一定非要使用Java异常。这一点必须掌握，因为经常都需要创建自己的异常，以便指出自己的库可能生成的一个特殊错误——但创建Java分级结构的时候，这个错误是无法预知的。")]),n._v(" "),i("p",[n._v("为创建自己的异常类，必须从一个现有的异常类型继承——最好在含义上与新异常近似。继承一个异常相当简单：")]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v('//: Inheriting.java\n// Inheriting your own exceptions\n\nclass MyException extends Exception {\n  public MyException() {}\n  public MyException(String msg) {\n    super(msg);\n  }\n}\n\npublic class Inheriting {\n  public static void f() throws MyException {\n    System.out.println(\n      "Throwing MyException from f()");\n    throw new MyException();\n  }\n  public static void g() throws MyException {\n    System.out.println(\n      "Throwing MyException from g()");\n    throw new MyException("Originated in g()");\n  }\n  public static void main(String[] args) {\n    try {\n      f();\n    } catch(MyException e) {\n      e.printStackTrace();\n    }\n    try {\n      g();\n    } catch(MyException e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n')])])]),i("p",[n._v("继承在创建新类时发生：")]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v("class MyException extends Exception {\n  public MyException() {}\n  public MyException(String msg) {\n    super(msg);\n  }\n}\n")])])]),i("p",[n._v("这里的关键是"),i("code",[n._v("extends Exception")]),n._v("，它的意思是：除包括一个"),i("code",[n._v("Exception")]),n._v("的全部含义以外，还有更多的含义。增加的代码数量非常少——实际只添加了两个构造器，对"),i("code",[n._v("MyException")]),n._v("的创建方式进行了定义。请记住，假如我们不明确调用一个基类构造器，编译器会自动调用基类默认构造器。在第二个构造器中，通过使用"),i("code",[n._v("super")]),n._v("关键字，明确调用了带有一个"),i("code",[n._v("String")]),n._v("参数的基类构造器。")]),n._v(" "),i("p",[n._v("该程序输出结果如下：")]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v("Throwing MyException from f()\nMyException\n        at Inheriting.f(Inheriting.java:16)\n        at Inheriting.main(Inheriting.java:24)\nThrowing MyException from g()\nMyException: Originated in g()\n        at Inheriting.g(Inheriting.java:20)\n        at Inheriting.main(Inheriting.java:29)\n")])])]),i("p",[n._v("可以看到，在从"),i("code",[n._v("f()")]),n._v("“抛”出的"),i("code",[n._v("MyException")]),n._v("异常中，缺乏详细的消息。")]),n._v(" "),i("p",[n._v("创建自己的异常时，还可以采取更多的操作。我们可添加额外的构造器及成员：")]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v('//: Inheriting2.java\n// Inheriting your own exceptions\n\nclass MyException2 extends Exception {\n  public MyException2() {}\n  public MyException2(String msg) {\n    super(msg);\n  }\n  public MyException2(String msg, int x) {\n    super(msg);\n    i = x;\n  }\n  public int val() { return i; }\n  private int i;\n}\n\npublic class Inheriting2 {\n  public static void f() throws MyException2 {\n    System.out.println(\n      "Throwing MyException2 from f()");\n    throw new MyException2();\n  }\n  public static void g() throws MyException2 {\n    System.out.println(\n      "Throwing MyException2 from g()");\n    throw new MyException2("Originated in g()");\n  }\n  public static void h() throws MyException2 {\n    System.out.println(\n      "Throwing MyException2 from h()");\n    throw new MyException2(\n      "Originated in h()", 47);\n  }\n  public static void main(String[] args) {\n    try {\n      f();\n    } catch(MyException2 e) {\n      e.printStackTrace();\n    }\n    try {\n      g();\n    } catch(MyException2 e) {\n      e.printStackTrace();\n    }\n    try {\n      h();\n    } catch(MyException2 e) {\n      e.printStackTrace();\n      System.out.println("e.val() = " + e.val());\n    }\n  }\n} ///:~\n')])])]),i("p",[n._v("此时添加了一个数据成员"),i("code",[n._v("i")]),n._v("；同时添加了一个特殊的方法，用它读取那个值；也添加了一个额外的构造器，用它设置那个值。输出结果如下：")]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v("Throwing MyException2 from f()\nMyException2\n        at Inheriting2.f(Inheriting2.java:22)\n        at Inheriting2.main(Inheriting2.java:34)\nThrowing MyException2 from g()\nMyException2: Originated in g()\n        at Inheriting2.g(Inheriting2.java:26)\n        at Inheriting2.main(Inheriting2.java:39)\nThrowing MyException2 from h()\nMyException2: Originated in h()\n        at Inheriting2.h(Inheriting2.java:30)\n        at Inheriting2.main(Inheriting2.java:44)\ne.val() = 47\n")])])]),i("p",[n._v("由于异常不过是另一种形式的对象，所以可以继续这个进程，进一步增强异常类的能力。但要注意，对使用自己这个包的客户程序员来说，他们可能错过所有这些增强。因为他们可能只是简单地寻找准备生成的异常，除此以外不做任何事情——这是大多数Java库异常的标准用法。若出现这种情况，有可能创建一个新异常类型，其中几乎不包含任何代码：")]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v("//: SimpleException.java\nclass SimpleException extends Exception {\n} ///:~\n")])])]),i("p",[n._v("它要依赖编译器来创建默认构造器（会自动调用基类的默认构造器）。当然，在这种情况下，我们不会得到一个"),i("code",[n._v("SimpleException(String)")]),n._v("构造器，但它实际上也不会经常用到。")])])}),[],!1,null,null,null);t.default=a.exports}}]);