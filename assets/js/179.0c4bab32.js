(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{575:function(n,e,t){"use strict";t.r(e);var a=t(56),c=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_9-8-异常匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-8-异常匹配"}},[n._v("#")]),n._v(" 9.8 异常匹配")]),n._v(" "),t("p",[n._v("“抛”出一个异常后，异常控制系统会按当初编写的顺序搜索“最接近”的控制器。一旦找到相符的控制器，就认为异常已得到控制，不再进行更多的搜索工作。")]),n._v(" "),t("p",[n._v("在异常和它的控制器之间，并不需要非常精确的匹配。一个派生类对象可与基类的一个控制器相配，如下例所示：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//: Human.java\n// Catching Exception Hierarchies\n\nclass Annoyance extends Exception {}\nclass Sneeze extends Annoyance {}\n\npublic class Human {\n  public static void main(String[] args) {\n    try {\n      throw new Sneeze();\n    } catch(Sneeze s) {\n      System.out.println("Caught Sneeze");\n    } catch(Annoyance a) {\n      System.out.println("Caught Annoyance");\n    }\n  }\n} ///:~\n')])])]),t("p",[t("code",[n._v("Sneeze")]),n._v("异常会被相符的第一个"),t("code",[n._v("catch")]),n._v("从句捕获。当然，这只是第一个。然而，假如我们删除第一个"),t("code",[n._v("catch")]),n._v("从句：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    try {\n      throw new Sneeze();\n    } catch(Annoyance a) {\n      System.out.println("Caught Annoyance");\n    }\n')])])]),t("p",[n._v("那么剩下的"),t("code",[n._v("catch")]),n._v("从句依然能够工作，因为它捕获的是"),t("code",[n._v("Sneeze")]),n._v("的基类。换言之，"),t("code",[n._v("catch(Annoyance e)")]),n._v("能捕获一个"),t("code",[n._v("Annoyance")]),n._v("以及从它派生的任何类。这一点非常重要，因为一旦我们决定为一个方法添加更多的异常，而且它们都是从相同的基类继承的，那么客户程序员的代码就不需要更改。至少能够假定它们捕获的是基类。")]),n._v(" "),t("p",[n._v("若将基类捕获从句置于第一位，试图“屏蔽”派生类异常，就象下面这样：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    try {\n      throw new Sneeze();\n    } catch(Annoyance a) {\n      System.out.println("Caught Annoyance");\n    } catch(Sneeze s) {\n      System.out.println("Caught Sneeze");\n    }\n')])])]),t("p",[n._v("则编译器会产生一条出错消息，因为它发现永远不可能抵达"),t("code",[n._v("Sneeze")]),n._v("捕获从句。")]),n._v(" "),t("h2",{attrs:{id:"_9-8-1-异常准则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-8-1-异常准则"}},[n._v("#")]),n._v(" 9.8.1 异常准则")]),n._v(" "),t("p",[n._v("用异常做下面这些事情：")]),n._v(" "),t("p",[n._v("(1) 解决问题并再次调用造成异常的方法。")]),n._v(" "),t("p",[n._v("(2) 平息事态的发展，并在不重新尝试方法的前提下继续。")]),n._v(" "),t("p",[n._v("(3) 计算另一些结果，而不是希望方法产生的结果。")]),n._v(" "),t("p",[n._v("(4) 在当前环境中尽可能解决问题，以及将相同的异常重新“抛”出一个更高级的环境。")]),n._v(" "),t("p",[n._v("(5) 在当前环境中尽可能解决问题，以及将不同的异常重新“抛”出一个更高级的环境。")]),n._v(" "),t("p",[n._v("(6) 中止程序执行。")]),n._v(" "),t("p",[n._v("(7) 简化编码。若异常方案使事情变得更加复杂，那就会令人非常烦恼，不如不用。")]),n._v(" "),t("p",[n._v("(8) 使自己的库和程序变得更加安全。这既是一种“短期投资”（便于调试），也是一种“长期投资”（改善应用程序的健壮性）")])])}),[],!1,null,null,null);e.default=c.exports}}]);