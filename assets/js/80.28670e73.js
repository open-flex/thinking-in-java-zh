(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{479:function(e,t,v){"use strict";v.r(t);var _=v(56),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"_15-2-套接字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-套接字"}},[e._v("#")]),e._v(" 15.2 套接字")]),e._v(" "),v("p",[e._v("“套接字”或者“插座”（"),v("code",[e._v("Socket")]),e._v("）也是一种软件形式的抽象，用于表达两台机器间一个连接的“终端”。针对一个特定的连接，每台机器上都有一个“套接字”，可以想象它们之间有一条虚拟的“线缆”。线缆的每一端都插入一个“套接字”或者“插座”里。当然，机器之间的物理性硬件以及电缆连接都是完全未知的。抽象的基本宗旨是让我们尽可能不必知道那些细节。")]),e._v(" "),v("p",[e._v("在Java中，我们创建一个套接字，用它建立与其他机器的连接。从套接字得到的结果是一个"),v("code",[e._v("InputStream")]),e._v("以及"),v("code",[e._v("OutputStream")]),e._v("（若使用恰当的转换器，则分别是"),v("code",[e._v("Reader")]),e._v("和"),v("code",[e._v("Writer")]),e._v("），以便将连接作为一个IO流对象对待。有两个基于数据流的套接字类："),v("code",[e._v("ServerSocket")]),e._v("，服务器用它“监听”进入的连接；以及"),v("code",[e._v("Socket")]),e._v("，客户用它初始一次连接。一旦客户（程序）申请建立一个套接字连接，"),v("code",[e._v("ServerSocket")]),e._v("就会返回（通过"),v("code",[e._v("accept()")]),e._v("方法）一个对应的服务器端套接字，以便进行直接通信。从此时起，我们就得到了真正的“套接字－套接字”连接，可以用同样的方式对待连接的两端，因为它们本来就是相同的！此时可以利用"),v("code",[e._v("getInputStream()")]),e._v("以及"),v("code",[e._v("getOutputStream()")]),e._v("从每个套接字产生对应的"),v("code",[e._v("InputStream")]),e._v("和"),v("code",[e._v("OutputStream")]),e._v("对象。这些数据流必须封装到缓冲区内。可按第10章介绍的方法对类进行格式化，就象对待其他任何流对象那样。")]),e._v(" "),v("p",[e._v("对于Java库的命名机制，"),v("code",[e._v("ServerSocket")]),e._v("（服务器套接字）的使用无疑是容易产生混淆的又一个例证。大家可能认为"),v("code",[e._v("ServerSocket")]),e._v("最好叫作"),v("code",[e._v("ServerConnector")]),e._v("（服务器连接器），或者其他什么名字，只是不要在其中安插一个"),v("code",[e._v("Socket")]),e._v("。也可能以为"),v("code",[e._v("ServerSocket")]),e._v("和"),v("code",[e._v("Socket")]),e._v("都应从一些通用的基类继承。事实上，这两种类确实包含了几个通用的方法，但还不够资格把它们赋给一个通用的基类。相反，"),v("code",[e._v("ServerSocket")]),e._v("的主要任务是在那里耐心地等候其他机器同它连接，再返回一个实际的"),v("code",[e._v("Socket")]),e._v("。这正是"),v("code",[e._v("ServerSocket")]),e._v("这个命名不恰当的地方，因为它的目标不是真的成为一个"),v("code",[e._v("Socket")]),e._v("，而是在其他人同它连接的时候产生一个"),v("code",[e._v("Socket")]),e._v("对象。")]),e._v(" "),v("p",[e._v("然而，"),v("code",[e._v("ServerSocket")]),e._v("确实会在主机上创建一个物理性的“服务器”或者监听用的套接字。这个套接字会监听进入的连接，然后利用"),v("code",[e._v("accept()")]),e._v("方法返回一个“已建立”套接字（本地和远程端点均已定义）。容易混淆的地方是这两个套接字（监听和已建立）都与相同的服务器套接字关联在一起。监听套接字只能接收新的连接请求，不能接收实际的数据包。所以尽管"),v("code",[e._v("ServerSocket")]),e._v("对于编程并无太大的意义，但它确实是“物理性”的。")]),e._v(" "),v("p",[e._v("创建一个"),v("code",[e._v("ServerSocket")]),e._v("时，只需为其赋予一个端口编号。不必把一个IP地址分配它，因为它已经在自己代表的那台机器上了。但在创建一个"),v("code",[e._v("Socket")]),e._v("时，却必须同时赋予IP地址以及要连接的端口编号（另一方面，从"),v("code",[e._v("ServerSocket.accept()")]),e._v("返回的"),v("code",[e._v("Socket")]),e._v("已经包含了所有这些信息）。")]),e._v(" "),v("h2",{attrs:{id:"_15-2-1-一个简单的服务器和客户端程序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-1-一个简单的服务器和客户端程序"}},[e._v("#")]),e._v(" 15.2.1 一个简单的服务器和客户端程序")]),e._v(" "),v("p",[e._v("这个例子将以最简单的方式运用套接字对服务器和客户端进行操作。服务器的全部工作就是等候建立一个连接，然后用那个连接产生的"),v("code",[e._v("Socket")]),e._v("创建一个"),v("code",[e._v("InputStream")]),e._v("以及一个"),v("code",[e._v("OutputStream")]),e._v("。在这之后，它从"),v("code",[e._v("InputStream")]),e._v("读入的所有东西都会反馈给"),v("code",[e._v("OutputStream")]),e._v("，直到接收到行中止（END）为止，最后关闭连接。")]),e._v(" "),v("p",[e._v("客户端连接与服务器的连接，然后创建一个"),v("code",[e._v("OutputStream")]),e._v("。文本行通过"),v("code",[e._v("OutputStream")]),e._v("发送。客户端也会创建一个"),v("code",[e._v("InputStream")]),e._v("，用它收听服务器说些什么（本例只不过是反馈回来的同样的字句）。")]),e._v(" "),v("p",[e._v("服务器与客户端（程序）都使用同样的端口号，而且客户端利用本地主机地址连接位于同一台机器中的服务器（程序），所以不必在一个物理性的网络里完成测试（在某些配置环境中，可能需要同真正的网络建立连接，否则程序不能工作——尽管实际并不通过那个网络通信）。")]),e._v(" "),v("p",[e._v("下面是服务器程序：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('//: JabberServer.java\n// Very simple server that just\n// echoes whatever the client sends.\nimport java.io.*;\nimport java.net.*;\n\npublic class JabberServer {  \n  // Choose a port outside of the range 1-1024:\n  public static final int PORT = 8080;\n  public static void main(String[] args)\n      throws IOException {\n    ServerSocket s = new ServerSocket(PORT);\n    System.out.println("Started: " + s);\n    try {\n      // Blocks until a connection occurs:\n      Socket socket = s.accept();\n      try {\n        System.out.println(\n          "Connection accepted: "+ socket);\n        BufferedReader in =\n          new BufferedReader(\n            new InputStreamReader(\n              socket.getInputStream()));\n        // Output is automatically flushed\n        // by PrintWriter:\n        PrintWriter out =\n          new PrintWriter(\n            new BufferedWriter(\n              new OutputStreamWriter(\n                socket.getOutputStream())),true);\n        while (true) {  \n          String str = in.readLine();\n          if (str.equals("END")) break;\n          System.out.println("Echoing: " + str);\n          out.println(str);\n        }\n      // Always close the two sockets...\n      } finally {\n        System.out.println("closing...");\n        socket.close();\n      }\n    } finally {\n      s.close();\n    }\n  }\n} ///:~\n')])])]),v("p",[e._v("可以看到，"),v("code",[e._v("ServerSocket")]),e._v("需要的只是一个端口编号，不需要IP地址（因为它就在这台机器上运行）。调用"),v("code",[e._v("accept()")]),e._v("时，方法会暂时陷入停顿状态（堵塞），直到某个客户尝试同它建立连接。换言之，尽管它在那里等候连接，但其他进程仍能正常运行（参考第14章）。建好一个连接以后，"),v("code",[e._v("accept()")]),e._v("就会返回一个"),v("code",[e._v("Socket")]),e._v("对象，它是那个连接的代表。")]),e._v(" "),v("p",[e._v("清除套接字的责任在这里得到了很艺术的处理。假如"),v("code",[e._v("ServerSocket")]),e._v("构造器失败，则程序简单地退出（注意必须保证"),v("code",[e._v("ServerSocket")]),e._v("的构造器在失败之后不会留下任何打开的网络套接字）。针对这种情况，"),v("code",[e._v("main()")]),e._v("会“抛”出一个"),v("code",[e._v("IOException")]),e._v("异常，所以不必使用一个"),v("code",[e._v("try")]),e._v("块。若"),v("code",[e._v("ServerSocket")]),e._v("构造器成功执行，则其他所有方法调用都必须到一个"),v("code",[e._v("try-finally")]),e._v("代码块里寻求保护，以确保无论块以什么方式留下，"),v("code",[e._v("ServerSocket")]),e._v("都能正确地关闭。")]),e._v(" "),v("p",[e._v("同样的道理也适用于由"),v("code",[e._v("accept()")]),e._v("返回的"),v("code",[e._v("Socket")]),e._v("。若"),v("code",[e._v("accept()")]),e._v("失败，那么我们必须保证"),v("code",[e._v("Socket")]),e._v("不再存在或者含有任何资源，以便不必清除它们。但假若执行成功，则后续的语句必须进入一个"),v("code",[e._v("try-finally")]),e._v("块内，以保障在它们失败的情况下，"),v("code",[e._v("Socket")]),e._v("仍能得到正确的清除。由于套接字使用了重要的非内存资源，所以在这里必须特别谨慎，必须自己动手将它们清除（Java中没有提供“析构器”来帮助我们做这件事情）。")]),e._v(" "),v("p",[e._v("无论"),v("code",[e._v("ServerSocket")]),e._v("还是由"),v("code",[e._v("accept()")]),e._v("产生的"),v("code",[e._v("Socket")]),e._v("都打印到"),v("code",[e._v("System.out")]),e._v("里。这意味着它们的"),v("code",[e._v("toString")]),e._v("方法会得到自动调用。这样便产生了：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("ServerSocket[addr=0.0.0.0,PORT=0,localport=8080]\nSocket[addr=127.0.0.1,PORT=1077,localport=8080]\n")])])]),v("p",[e._v("大家不久就会看到它们如何与客户程序做的事情配合。")]),e._v(" "),v("p",[e._v("程序的下一部分看来似乎仅仅是打开文件，以便读取和写入，只是"),v("code",[e._v("InputStream")]),e._v("和"),v("code",[e._v("OutputStream")]),e._v("是从"),v("code",[e._v("Socket")]),e._v("对象创建的。利用两个“转换器”类I"),v("code",[e._v("nputStreamReader")]),e._v("和"),v("code",[e._v("OutputStreamWriter")]),e._v("，"),v("code",[e._v("InputStream")]),e._v("和"),v("code",[e._v("OutputStream")]),e._v("对象已经分别转换成为Java 1.1的"),v("code",[e._v("Reader")]),e._v("和"),v("code",[e._v("Writer")]),e._v("对象。也可以直接使用Java1.0的"),v("code",[e._v("InputStream")]),e._v("和"),v("code",[e._v("OutputStream")]),e._v("类，但对输出来说，使用"),v("code",[e._v("Writer")]),e._v("方式具有明显的优势。这一优势是通过"),v("code",[e._v("PrintWriter")]),e._v("表现出来的，它有一个重载的构造器，能获取第二个参数——一个布尔值标志，指向是否在每一次"),v("code",[e._v("println()")]),e._v("结束的时候自动刷新输出（但不适用于"),v("code",[e._v("print()")]),e._v("语句）。每次写入了输出内容后（写进"),v("code",[e._v("out")]),e._v("），它的缓冲区必须刷新，使信息能正式通过网络传递出去。对目前这个例子来说，刷新显得尤为重要，因为客户和服务器在采取下一步操作之前都要等待一行文本内容的到达。若刷新没有发生，那么信息不会进入网络，除非缓冲区满（溢出），这会为本例带来许多问题。")]),e._v(" "),v("p",[e._v("编写网络应用程序时，需要特别注意自动刷新机制的使用。每次刷新缓冲区时，必须创建和发出一个数据包（数据封）。就目前的情况来说，这正是我们所希望的，因为假如包内包含了还没有发出的文本行，服务器和客户端之间的相互“握手”就会停止。换句话说，一行的末尾就是一条消息的末尾。但在其他许多情况下，消息并不是用行分隔的，所以不如不用自动刷新机制，而用内建的缓冲区判决机制来决定何时发送一个数据包。这样一来，我们可以发出较大的数据包，而且处理进程也能加快。")]),e._v(" "),v("p",[e._v("注意和我们打开的几乎所有数据流一样，它们都要进行缓冲处理。本章末尾有一个练习，清楚展现了假如我们不对数据流进行缓冲，那么会得到什么样的后果（速度会变慢）。")]),e._v(" "),v("p",[e._v("无限"),v("code",[e._v("while")]),e._v("循环从"),v("code",[e._v("BufferedReader in")]),e._v("内读取文本行，并将信息写入"),v("code",[e._v("System.out")]),e._v("，然后写入"),v("code",[e._v("PrintWriter.out")]),e._v("。注意这可以是任何数据流，它们只是在表面上同网络连接。")]),e._v(" "),v("p",[e._v("客户程序发出包含了"),v("code",[e._v('"END"')]),e._v("的行后，程序会中止循环，并关闭"),v("code",[e._v("Socket")]),e._v("。")]),e._v(" "),v("p",[e._v("下面是客户程序的源码：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('//: JabberClient.java\n// Very simple client that just sends\n// lines to the server and reads lines\n// that the server sends.\nimport java.net.*;\nimport java.io.*;\n\npublic class JabberClient {\n  public static void main(String[] args)\n      throws IOException {\n    // Passing null to getByName() produces the\n    // special "Local Loopback" IP address, for\n    // testing on one machine w/o a network:\n    InetAddress addr =\n      InetAddress.getByName(null);\n    // Alternatively, you can use\n    // the address or name:\n    // InetAddress addr =\n    //    InetAddress.getByName("127.0.0.1");\n    // InetAddress addr =\n    //    InetAddress.getByName("localhost");\n    System.out.println("addr = " + addr);\n    Socket socket =\n      new Socket(addr, JabberServer.PORT);\n    // Guard everything in a try-finally to make\n    // sure that the socket is closed:\n    try {\n      System.out.println("socket = " + socket);\n      BufferedReader in =\n        new BufferedReader(\n          new InputStreamReader(\n            socket.getInputStream()));\n      // Output is automatically flushed\n      // by PrintWriter:\n      PrintWriter out =\n        new PrintWriter(\n          new BufferedWriter(\n            new OutputStreamWriter(\n              socket.getOutputStream())),true);\n      for(int i = 0; i < 10; i ++) {\n        out.println("howdy " + i);\n        String str = in.readLine();\n        System.out.println(str);\n      }\n      out.println("END");\n    } finally {\n      System.out.println("closing...");\n      socket.close();\n    }\n  }\n} ///:~\n')])])]),v("p",[e._v("在"),v("code",[e._v("main()")]),e._v("中，大家可看到获得本地主机IP地址的"),v("code",[e._v("InetAddress")]),e._v("的三种途径：使用"),v("code",[e._v("null")]),e._v("，使用"),v("code",[e._v("localhost")]),e._v("，或者直接使用保留地址"),v("code",[e._v("127.0.0.1")]),e._v("。当然，如果想通过网络同一台远程主机连接，也可以换用那台机器的IP地址。打印出"),v("code",[e._v("InetAddress addr")]),e._v("后（通过对"),v("code",[e._v("toString()")]),e._v("方法的自动调用），结果如下：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("localhost/127.0.0.1\n")])])]),v("p",[e._v("通过向"),v("code",[e._v("getByName()")]),e._v("传递一个"),v("code",[e._v("null")]),e._v("，它会默认寻找"),v("code",[e._v("localhost")]),e._v("，并生成特殊的保留地址"),v("code",[e._v("127.0.0.1")]),e._v("。注意在名为"),v("code",[e._v("socket")]),e._v("的套接字创建时，同时使用了"),v("code",[e._v("InetAddress")]),e._v("以及端口号。打印这样的某个"),v("code",[e._v("Socket")]),e._v("对象时，为了真正理解它的含义，请记住一次独一无二的因特网连接是用下述四种数据标识的："),v("code",[e._v("clientHost")]),e._v("（客户主机）、"),v("code",[e._v("clientPortNumber")]),e._v("（客户端口号）、"),v("code",[e._v("serverHost")]),e._v("（服务主机）以及"),v("code",[e._v("serverPortNumber")]),e._v("（服务端口号）。服务程序启动后，会在本地主机（"),v("code",[e._v("127.0.0.1")]),e._v("）上建立为它分配的端口（8080）。一旦客户程序发出请求，机器上下一个可用的端口就会分配给它（这种情况下是1077），这一行动也在与服务程序相同的机器（"),v("code",[e._v("127.0.0.1")]),e._v("）上进行。现在，为了使数据能在客户及服务程序之间来回传送，每一端都需要知道把数据发到哪里。所以在同一个“已知”服务程序连接的时候，客户会发出一个“返回地址”，使服务器程序知道将自己的数据发到哪儿。我们在服务器端的示范输出中可以体会到这一情况：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("Socket[addr=127.0.0.1,port=1077,localport=8080]\n")])])]),v("p",[e._v("这意味着服务器刚才已接受了来自"),v("code",[e._v("127.0.0.1")]),e._v("这台机器的端口1077的连接，同时监听自己的本地端口（8080）。而在客户端：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("Socket[addr=localhost/127.0.0.1,PORT=8080,localport=1077]\n")])])]),v("p",[e._v("这意味着客户已用自己的本地端口1077与"),v("code",[e._v("127.0.0.1")]),e._v("机器上的端口8080建立了 连接。")]),e._v(" "),v("p",[e._v("大家会注意到每次重新启动客户程序的时候，本地端口的编号都会增加。这个编号从1025（刚好在系统保留的1-1024之外）开始，并会一直增加下去，除非我们重启机器。若重新启动机器，端口号仍然会从1025开始自增（在Unix机器中，一旦超过保留的套按字范围，数字就会再次从最小的可用数字开始）。")]),e._v(" "),v("p",[e._v("创建好"),v("code",[e._v("Socket")]),e._v("对象后，将其转换成"),v("code",[e._v("BufferedReader")]),e._v("和"),v("code",[e._v("PrintWriter的")]),e._v("过程便与在服务器中相同（同样地，两种情况下都要从一个"),v("code",[e._v("Socket")]),e._v("开始）。在这里，客户通过发出字符串"),v("code",[e._v('"howdy"')]),e._v("，并在后面跟随一个数字，从而初始化通信。注意缓冲区必须再次刷新（这是自动发生的，通过传递给"),v("code",[e._v("PrintWriter")]),e._v("构造器的第二个参数）。若缓冲区没有刷新，那么整个会话（通信）都会被挂起，因为用于初始化的"),v("code",[e._v('"howdy"')]),e._v("永远不会发送出去（缓冲区不够满，不足以造成发送动作的自动进行）。从服务器返回的每一行都会写入"),v("code",[e._v("System.out")]),e._v("，以验证一切都在正常运转。为中止会话，需要发出一个"),v("code",[e._v('"END"')]),e._v("。若客户程序简单地挂起，那么服务器会“抛”出一个异常。")]),e._v(" "),v("p",[e._v("大家在这里可以看到我们采用了同样的措施来确保由"),v("code",[e._v("Socket")]),e._v("代表的网络资源得到正确的清除，这是用一个"),v("code",[e._v("try-finally")]),e._v("块实现的。")]),e._v(" "),v("p",[e._v("套接字建立了一个“专用”连接，它会一直持续到明确断开连接为止（专用连接也可能间接性地断开，前提是某一端或者中间的某条链路出现故障而崩溃）。这意味着参与连接的双方都被锁定在通信中，而且无论是否有数据传递，连接都会连续处于开放状态。从表面看，这似乎是一种合理的连网方式。然而，它也为网络带来了额外的开销。本章后面会介绍进行连网的另一种方式。采用那种方式，连接的建立只是暂时的。")])])}),[],!1,null,null,null);t.default=r.exports}}]);