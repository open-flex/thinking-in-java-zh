(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{451:function(e,n,t){"use strict";t.r(n);var a=t(56),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_13-15-视窗化应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-15-视窗化应用"}},[e._v("#")]),e._v(" 13.15 视窗化应用")]),e._v(" "),t("p",[e._v("出于安全的缘故，我们会看到在程序片我们的行为非常的受到限制。我们真实地感到，程序片是被临时地加入在WEB浏览器中的，因此，它的功能连同它的相关知识，控件都必须加以限制。但是，我们希望Java能制造一个开窗口的程序去运行一些事物，否则宁愿安放在一个WEB页面上，并且也许我们希望它可以运行一些可靠的应用程序，以及夸张的实时便携性。在这本书前面的章节中我们制造了一些命令行应用程序，但在一些操作环境中（例如：Macintosh）没有命令行。所以我们有很多的理由去利用Java创建一个设置窗口，非程序片的程序。这当然是一个十分合理的要求。")]),e._v(" "),t("p",[e._v("一个Java设置窗口应用程序可以拥有菜单和对话框（这对一个程序片来说是不可能的和很困难的），可是如果我们使用一个老版本的Java，我们将会牺牲本地操作系统环境的外观和感受。JFC/Swing库允许我们制造一个保持原来操作系统环境的外观和感受的应用程序。如果我们想建立一个设置窗口应用程序，它会合理地运作，同样，如果我们可以使用最新版本的Java并且集合所有的工具，我们就可以发布不会使用户困惑的应用程序。如果因为一些原因，我们被迫使用老版本的Java，请在毁坏以建立重要的设置窗口的应用程序前仔细地考虑。")]),e._v(" "),t("h2",{attrs:{id:"_13-15-1-菜单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-15-1-菜单"}},[e._v("#")]),e._v(" 13.15.1 菜单")]),e._v(" "),t("p",[e._v("直接在程序片中安放一个菜单是不可能的（Java 1.0,Java1.1和Swing库不允许），因为它们是针对应用程序的。继续，如果您不相信我并且确定在程序片中可以合理地拥有菜单，那么您可以去试验一下。程序片中没有"),t("code",[e._v("setMenuBar()")]),e._v("方法，而这种方法是附在菜单中的（我们会看到它可以合理地在程序片产生一个帧，并且帧包含菜单）。")]),e._v(" "),t("p",[e._v("有四种不同类型的"),t("code",[e._v("MenuComponent")]),e._v("（菜单组件），所有的菜单组件起源于抽象类：菜单条（我们可以在一个事件帧里拥有一个菜单条），菜单去支配一个单独的下拉菜单或者子菜单、菜单项来说明菜单里一个单个的元素，以及起源于"),t("code",[e._v("MenuItem")]),e._v(",产生检查标志（"),t("code",[e._v("checkmark")]),e._v("）去显示菜单项是否被选择的"),t("code",[e._v("CheckBoxMenuItem")]),e._v("。")]),e._v(" "),t("p",[e._v("不同的系统使用不同的资源，对Java和AWT而言，我们必须在源代码中手工汇编所有的菜单。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Menu1.java\n// Menus work only with Frames.\n// Shows submenus, checkbox menu items\n// and swapping menus.\nimport java.awt.*;\n\npublic class Menu1 extends Frame {\n  String[] flavors = { "Chocolate", "Strawberry",\n    "Vanilla Fudge Swirl", "Mint Chip",\n    "Mocha Almond Fudge", "Rum Raisin",\n    "Praline Cream", "Mud Pie" };\n  TextField t = new TextField("No flavor", 30);\n  MenuBar mb1 = new MenuBar();\n  Menu f = new Menu("File");\n  Menu m = new Menu("Flavors");\n  Menu s = new Menu("Safety");\n  // Alternative approach:\n  CheckboxMenuItem[] safety = {\n    new CheckboxMenuItem("Guard"),\n    new CheckboxMenuItem("Hide")\n  };\n  MenuItem[] file = {\n    new MenuItem("Open"),\n    new MenuItem("Exit")\n  };\n  // A second menu bar to swap to:\n  MenuBar mb2 = new MenuBar();\n  Menu fooBar = new Menu("fooBar");\n  MenuItem[] other = {\n    new MenuItem("Foo"),\n    new MenuItem("Bar"),\n    new MenuItem("Baz"),\n  };\n  Button b = new Button("Swap Menus");\n  public Menu1() {\n    for(int i = 0; i < flavors.length; i++) {\n      m.add(new MenuItem(flavors[i]));\n      // Add separators at intervals:\n      if((i+1) % 3 == 0)\n        m.addSeparator();\n    }\n    for(int i = 0; i < safety.length; i++)\n      s.add(safety[i]);\n    f.add(s);\n    for(int i = 0; i < file.length; i++)\n      f.add(file[i]);\n    mb1.add(f);\n    mb1.add(m);\n    setMenuBar(mb1);\n    t.setEditable(false);\n    add("Center", t);\n    // Set up the system for swapping menus:\n    add("North", b);\n    for(int i = 0; i < other.length; i++)\n      fooBar.add(other[i]);\n    mb2.add(fooBar);\n  }\n  public boolean handleEvent(Event evt) {\n    if(evt.id == Event.WINDOW_DESTROY)\n      System.exit(0);\n    else\n      return super.handleEvent(evt);\n    return true;\n  }\n  public boolean action(Event evt, Object arg) {\n    if(evt.target.equals(b)) {\n      MenuBar m = getMenuBar();\n      if(m == mb1) setMenuBar(mb2);\n      else if (m == mb2) setMenuBar(mb1);\n    }\n    else if(evt.target instanceof MenuItem) {\n      if(arg.equals("Open")) {\n        String s = t.getText();\n        boolean chosen = false;\n        for(int i = 0; i < flavors.length; i++)\n          if(s.equals(flavors[i])) chosen = true;\n        if(!chosen)\n          t.setText("Choose a flavor first!");\n        else\n          t.setText("Opening "+ s +". Mmm, mm!");\n      }\n      else if(evt.target.equals(file[1]))\n        System.exit(0);\n      // CheckboxMenuItems cannot use String\n      // matching; you must match the target:\n      else if(evt.target.equals(safety[0]))\n        t.setText("Guard the Ice Cream! " +\n          "Guarding is " + safety[0].getState());\n      else if(evt.target.equals(safety[1]))\n        t.setText("Hide the Ice Cream! " +\n          "Is it cold? " + safety[1].getState());\n      else\n        t.setText(arg.toString());\n    }\n    else\n      return super.action(evt, arg);\n    return true;\n  }\n  public static void main(String[] args) {\n    Menu1 f = new Menu1();\n    f.resize(300,200);\n    f.show();\n  }\n} ///:~\n')])])]),t("p",[e._v("在这个程序中，我避免了为每个菜单编写典型的冗长的"),t("code",[e._v("add()")]),e._v("列表调用，因为那看起来像许多的无用的标志。取而代之的是，我安放菜单项到数组中，然后在一个"),t("code",[e._v("for")]),e._v("的循环中通过每个数组调用"),t("code",[e._v("add()")]),e._v("简单地跳过。这样的话，增加和减少菜单项变得没那么讨厌了。")]),e._v(" "),t("p",[e._v("作为一个可选择的方法（我发现这很难令我满意，因为它需要更多的分配）"),t("code",[e._v("CheckboxMenuItems")]),e._v("在数组的引用中被创建是被称为安全创建；这对数组文件和其它的文件而言是真正的安全。")]),e._v(" "),t("p",[e._v("程序中创建了不是一个而是二个的菜单条来证明菜单条在程序运行时能被交换激活。我们可以看到菜单条怎样组成菜单，每个菜单怎样组成菜单项（"),t("code",[e._v("MenuItems")]),e._v("），"),t("code",[e._v("chenkboxMenuItems")]),e._v("或者其它的菜单（产生子菜单）。当菜单组合后，可以用"),t("code",[e._v("setMenuBar()")]),e._v("方法安装到现在的程序中。值得注意的是当按钮被压下时，它将检查当前的菜单安装使用"),t("code",[e._v("getMenuBar()")]),e._v("，然后安放其它的菜单条在它的位置上。")]),e._v(" "),t("p",[e._v("当测试是"),t("code",[e._v("open")]),e._v("（即开始）时，注意拼写和大写，如果开始时没有对象，Java发出"),t("code",[e._v("no error")]),e._v("（没有错误）的信号。这种字符串比较是一个明显的程序设计错误源。")]),e._v(" "),t("p",[e._v("校验和非校验的菜单项自动地运行，与之相关的"),t("code",[e._v("CheckBoxMenuItems")]),e._v("着实令人吃惊，这是因为一些原因它们不允许字符串匹配。（这似乎是自相矛盾的，尽管字符串匹配并不是一种很好的办法。）因此，我们可以匹配一个目标对象而不是它们的标签。当演示时，"),t("code",[e._v("getState()")]),e._v("方法用来显示状态。我们同样可以用"),t("code",[e._v("setState()")]),e._v("改变"),t("code",[e._v("CheckboxMenuItem")]),e._v("的状态。")]),e._v(" "),t("p",[e._v("我们可能会认为一个菜单可以合理地置入超过一个的菜单条中。这看似合理，因为所有我们忽略的菜单条的"),t("code",[e._v("add()")]),e._v("方法都是一个引用。然而，如果我们试图这样做，这个结果将会变得非常的别扭，而远非我们所希望得到的结果。（很难知道这是一个编程中的错误或者说是他们试图使它以这种方法去运行所产生的。）这个例子同样向我们展示了为什么我们需要建立一个应用程序以替代程序片。（这是因为应用程序能支持菜单，而程序片是不能直接使用菜单的。）我们从帧处继承代替从程序片处继承。另外，我们为类建一个构造器以取代"),t("code",[e._v("init()")]),e._v("安装事件。最后，我们创建一个"),t("code",[e._v("main()")]),e._v("方法并且在我们建的新型对象里，调整它的大小，然后调用"),t("code",[e._v("show()")]),e._v("。它与程序片只在很小的地方有不同之处，然而这时它已经是一个独立的设置窗口应用程序并且我们可以使用菜单。")]),e._v(" "),t("h2",{attrs:{id:"_13-15-2-对话框"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-15-2-对话框"}},[e._v("#")]),e._v(" 13.15.2 对话框")]),e._v(" "),t("p",[e._v("对话框是一个从其它窗口弹出的窗口。它的目的是处理一些特殊的争议和它们的细节而不使原来的窗口陷入混乱之中。对话框大量在设置窗口的编程环境中使用，但就像前面提到的一样，鲜于在程序片中使用。")]),e._v(" "),t("p",[e._v("我们需要从对话类处继承以创建其它类型的窗口、像帧一样的对话框。和窗框不同，对话框不能拥有菜单条也不能改变光标，但除此之外它们十分的相似。一个对话框拥有布局管理器（默认的是"),t("code",[e._v("BorderLayout")]),e._v("布局管理器）和重载"),t("code",[e._v("action()")]),e._v("等等，或用"),t("code",[e._v("handleEvent()")]),e._v("去处理事件。我们会注意到"),t("code",[e._v("handleEvent()")]),e._v("的一个重要差异：当"),t("code",[e._v("WINDOW_DESTORY")]),e._v("事件发生时，我们并不希望关闭正在运行的应用程序！")]),e._v(" "),t("p",[e._v("相反，我们可以使用对话窗口通过调用"),t("code",[e._v("dispace()")]),e._v("释放资源。在下面的例子中，对话框是由定义在那儿作为类的"),t("code",[e._v("ToeButton")]),e._v("的特殊按钮组成的网格构成的（利用"),t("code",[e._v("GridLayout")]),e._v("布局管理器）。"),t("code",[e._v("ToeButton")]),e._v("按钮围绕它自已画了一个帧，并且依赖它的状态：在空的中的"),t("code",[e._v("X")]),e._v("或者"),t("code",[e._v("O")]),e._v("。它从空白开始，然后依靠使用者的选择，转换成"),t("code",[e._v("X")]),e._v("或"),t("code",[e._v("O")]),e._v("。但是，当我们单击在按钮上时，它会在"),t("code",[e._v("X")]),e._v("和"),t("code",[e._v("O")]),e._v("之间来回交换。（这产生了一种类似填字游戏的感觉，当然比它更令人讨厌。）另外，这个对话框可以被设置为在主应用程序窗口中为很多的行和列变更号码。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: ToeTest.java\n// Demonstration of dialog boxes\n// and creating your own components\nimport java.awt.*;\n\nclass ToeButton extends Canvas {\n  int state = ToeDialog.BLANK;\n  ToeDialog parent;\n  ToeButton(ToeDialog parent) {\n    this.parent = parent;\n  }\n  public void paint(Graphics  g) {\n    int x1 = 0;\n    int y1 = 0;\n    int x2 = size().width - 1;\n    int y2 = size().height - 1;\n    g.drawRect(x1, y1, x2, y2);\n    x1 = x2/4;\n    y1 = y2/4;\n    int wide = x2/2;\n    int high = y2/2;\n    if(state == ToeDialog.XX) {\n      g.drawLine(x1, y1, x1 + wide, y1 + high);\n      g.drawLine(x1, y1 + high, x1 + wide, y1);\n    }\n    if(state == ToeDialog.OO) {\n      g.drawOval(x1, y1, x1+wide/2, y1+high/2);\n    }\n  }\n  public boolean\n  mouseDown(Event evt, int x, int y) {\n    if(state == ToeDialog.BLANK) {\n      state = parent.turn;\n      parent.turn= (parent.turn == ToeDialog.XX ?\n        ToeDialog.OO : ToeDialog.XX);\n    }\n    else\n      state = (state == ToeDialog.XX ?\n        ToeDialog.OO : ToeDialog.XX);\n    repaint();\n    return true;\n  }\n}\n\nclass ToeDialog extends Dialog {\n  // w = number of cells wide\n  // h = number of cells high\n  static final int BLANK = 0;\n  static final int XX = 1;\n  static final int OO = 2;\n  int turn = XX; // Start with x\'s turn\n  public ToeDialog(Frame parent, int w, int h) {\n    super(parent, "The game itself", false);\n    setLayout(new GridLayout(w, h));\n    for(int i = 0; i < w * h; i++)\n      add(new ToeButton(this));\n    resize(w * 50, h * 50);\n  }\n  public boolean handleEvent(Event evt) {\n    if(evt.id == Event.WINDOW_DESTROY)\n      dispose();\n    else\n      return super.handleEvent(evt);\n    return true;\n  }\n}\n\npublic class ToeTest extends Frame {\n  TextField rows = new TextField("3");\n  TextField cols = new TextField("3");\n  public ToeTest() {\n    setTitle("Toe Test");\n    Panel p = new Panel();\n    p.setLayout(new GridLayout(2,2));\n    p.add(new Label("Rows", Label.CENTER));\n    p.add(rows);\n    p.add(new Label("Columns", Label.CENTER));\n    p.add(cols);\n    add("North", p);\n    add("South", new Button("go"));\n  }\n  public boolean handleEvent(Event evt) {\n    if(evt.id == Event.WINDOW_DESTROY)\n      System.exit(0);\n    else\n      return super.handleEvent(evt);\n    return true;\n  }\n  public boolean action(Event evt, Object arg) {\n    if(arg.equals("go")) {\n      Dialog d = new ToeDialog(\n        this,\n        Integer.parseInt(rows.getText()),\n        Integer.parseInt(cols.getText()));\n      d.show();\n    }\n    else\n      return super.action(evt, arg);\n    return true;\n  }\n  public static void main(String[] args) {\n    Frame f = new ToeTest();\n    f.resize(200,100);\n    f.show();\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("ToeButton")]),e._v("类保留了一个引用到它"),t("code",[e._v("ToeDialog")]),e._v("型的父类中。正如前面所述，"),t("code",[e._v("ToeButton")]),e._v("和"),t("code",[e._v("ToeDialog")]),e._v("高度的结合因为一个"),t("code",[e._v("ToeButton")]),e._v("只能被一个"),t("code",[e._v("ToeDialog")]),e._v("所使用，但它却解决了一系列的问题，事实上这实在不是一个糟糕的解决方案因为没有另外的可以记录用户选择的对话类。当然我们可以使用其它的制造"),t("code",[e._v("ToeDialog.turn")]),e._v("（"),t("code",[e._v("ToeButton")]),e._v("的静态的一部分）方法。这种方法消除了它们的紧密联系，但却阻止了我们一次拥有多个"),t("code",[e._v("ToeDialog")]),e._v("（无论如何，至少有一个正常地运行）。")]),e._v(" "),t("p",[t("code",[e._v("paint()")]),e._v("是一种与图形有关的方法：它围绕按钮画出矩形并画出"),t("code",[e._v("X")]),e._v("或"),t("code",[e._v("O")]),e._v("。这完全是冗长的计算，但却十分的直观。")]),e._v(" "),t("p",[e._v("一个鼠标单击被重载的"),t("code",[e._v("mouseDown()")]),e._v("方法所俘获，最要紧的是检查是否有事件写在按钮上。如果没有，父窗口会被询问以找出谁选择了它并用来确定按钮的状态。值得注意的是按钮随后交回到父类中并且改变它的选择。如果按钮已经显示这为"),t("code",[e._v("X")]),e._v("和"),t("code",[e._v("O")]),e._v("，那么它们会被改变状态。我们能注意到本书第三章中描述的在这些计算中方便的使用的三个一组的"),t("code",[e._v("If-else")]),e._v("。当一个按钮的状态改变后，按钮会被重画。")]),e._v(" "),t("p",[t("code",[e._v("ToeDialog")]),e._v("的构造器十分的简单：它像我们所需要的一样增加一些按钮到"),t("code",[e._v("GridLayout")]),e._v("布局管理器中，然后调整每个按钮每边大小为50个像素（如果我们不调整窗口，那么它就不会显示出来）。注意"),t("code",[e._v("handleEvent()")]),e._v("正好为"),t("code",[e._v("WINDOW_DESTROY")]),e._v("调用"),t("code",[e._v("dispose()")]),e._v("，因此整个应用程序不会被关闭。")]),e._v(" "),t("p",[t("code",[e._v("ToeTest")]),e._v("设置整个应用程序以创建"),t("code",[e._v("TextField")]),e._v("（为输入按钮网格的行和列）和"),t("code",[e._v("go")]),e._v("按钮。我们会领会"),t("code",[e._v("action()")]),e._v("在这个程序中使用不太令人满意的“字符串匹配”技术来测试按钮的按下（请确定我们拼写和大写都是正确的！）。当按钮按下时，"),t("code",[e._v("TextField")]),e._v("中的数据将被取出，并且，因为它们在字符串结构中，所以需要利用静态的"),t("code",[e._v("Integer.paresInt()")]),e._v("方法来转变成中断。一旦对话类被建立，我们就必须调用"),t("code",[e._v("show()")]),e._v("方法来显示和激活它。")]),e._v(" "),t("p",[e._v("我们会注意到"),t("code",[e._v("ToeDialog")]),e._v("对象赋值给一个对话引用 "),t("code",[e._v("d")]),e._v("。这是一个向上转换的例子，尽管它没有真正地产生重要的差异，因为所有的事件都是"),t("code",[e._v("show()")]),e._v("调用的。但是，如果我们想调用"),t("code",[e._v("ToeDialog")]),e._v("中已经存在的一些方法，我们需要对"),t("code",[e._v("ToeDialog")]),e._v("引用赋值，就不会在一个上溯中丢失信息。")]),e._v(" "),t("p",[e._v("(1) 文件对话类")]),e._v(" "),t("p",[e._v("在一些操作系统中拥有许多的特殊内建对话框去处理选择的事件，例如：字库，颜色，打印机以及类似的事件。几乎所有的操作系统都支持打开和保存文件，但是，Java的"),t("code",[e._v("FileDialog")]),e._v("包更容易使用。当然这会不再检测所有使用的程序片，因为程序片在本地磁盘上既不能读也不能写文件。（这会在新的浏览器中交换程序片的信任关系。）")]),e._v(" "),t("p",[e._v("下面的应用程序运用了两个文件对话类的窗体，一个是打开，一个是保存。大多数的代码到如今已为我们所熟悉，而所有这些有趣的活动发生在两个不同按钮单击事件的"),t("code",[e._v("action()")]),e._v("方法中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: FileDialogTest.java\n// Demonstration of File dialog boxes\nimport java.awt.*;\n\npublic class FileDialogTest extends Frame {\n  TextField filename = new TextField();\n  TextField directory = new TextField();\n  Button open = new Button("Open");\n  Button save = new Button("Save");\n  public FileDialogTest() {\n    setTitle("File Dialog Test");\n    Panel p = new Panel();\n    p.setLayout(new FlowLayout());\n    p.add(open);\n    p.add(save);\n    add("South", p);\n    directory.setEditable(false);\n    filename.setEditable(false);\n    p = new Panel();\n    p.setLayout(new GridLayout(2,1));\n    p.add(filename);\n    p.add(directory);\n    add("North", p);\n  }\n  public boolean handleEvent(Event evt) {\n    if(evt.id == Event.WINDOW_DESTROY)\n      System.exit(0);\n    else\n      return super.handleEvent(evt);\n    return true;\n  }\n  public boolean action(Event evt, Object arg) {\n    if(evt.target.equals(open)) {\n      // Two arguments, defaults to open file:\n      FileDialog d = new FileDialog(this,\n        "What file do you want to open?");\n      d.setFile("*.java"); // Filename filter\n      d.setDirectory("."); // Current directory\n      d.show();\n      String openFile;\n      if((openFile = d.getFile()) != null) {\n        filename.setText(openFile);\n        directory.setText(d.getDirectory());\n      } else {\n        filename.setText("You pressed cancel");\n        directory.setText("");\n      }\n    }\n    else if(evt.target.equals(save)) {\n      FileDialog d = new FileDialog(this,\n        "What file do you want to save?",\n        FileDialog.SAVE);\n      d.setFile("*.java");\n      d.setDirectory(".");\n      d.show();\n      String saveFile;\n      if((saveFile = d.getFile()) != null) {\n        filename.setText(saveFile);\n        directory.setText(d.getDirectory());\n      } else {\n        filename.setText("You pressed cancel");\n        directory.setText("");\n      }\n    }\n    else\n      return super.action(evt, arg);\n    return true;\n  }\n  public static void main(String[] args) {\n    Frame f = new FileDialogTest();\n    f.resize(250,110);\n    f.show();\n  }\n} ///:~\n')])])]),t("p",[e._v("对一个“打开文件”对话框，我们使用构造器设置两个参数；首先是父窗口引用，其次是"),t("code",[e._v("FileDialog")]),e._v("标题条的标题。"),t("code",[e._v("setFile()")]),e._v("方法提供一个初始文件名－－也许本地操作系统支持通配符，因此在这个例子中所有的"),t("code",[e._v(".java")]),e._v("文件最开头会被显示出来。"),t("code",[e._v("setDirectory()")]),e._v("方法选择文件决定开始的目录（一般而言，操作系统允许用户改变目录）。")]),e._v(" "),t("p",[t("code",[e._v("show()")]),e._v("命令直到对话类关闭才返回。"),t("code",[e._v("FileDialog")]),e._v("对象一直存在，因此我们可以从它那里读取数据。如果我们调用"),t("code",[e._v("getFile()")]),e._v("并且它返回空，这意味着用户退出了对话类。文件名和调用"),t("code",[e._v("getDirectory()")]),e._v("方法的结果都显示在"),t("code",[e._v("TextFields")]),e._v("里。")]),e._v(" "),t("p",[e._v("按钮的保存工作使用同样的方法，除了因为"),t("code",[e._v("FileDialog")]),e._v("而使用不同的构造器。这个构造器设置了三个参数并且第三的一个参数必须为"),t("code",[e._v("FileDialog.SAVE")]),e._v("或"),t("code",[e._v("FileDialog.OPEN")]),e._v("。")])])}),[],!1,null,null,null);n.default=o.exports}}]);