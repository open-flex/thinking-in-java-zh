(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{460:function(t,n,a){"use strict";a.r(n);var e=a(56),o=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_13-3-制作按钮"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-3-制作按钮"}},[t._v("#")]),t._v(" 13.3 制作按钮")]),t._v(" "),a("p",[t._v("制作一个按钮非常简单：只需要调用"),a("code",[t._v("Button")]),t._v("构造器，并指定想在按钮上出现的标签就行了（如果不想要标签，亦可使用默认构造器，但那种情况极少出现）。可参照后面的程序为按钮创建一个引用，以便以后能够引用它。")]),t._v(" "),a("p",[a("code",[t._v("Button")]),t._v("是一个组件，象它自己的小窗口一样，会在更新时得以重绘。这意味着我们不必明确描绘一个按钮或者其他任意种类的控件；只需将它们纳入窗体，以后的描绘工作会由它们自行负责。所以为了将一个按钮置入窗体，需要重载"),a("code",[t._v("init()")]),t._v("方法，而不是重载"),a("code",[t._v("paint()")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//: Button1.java\n// Putting buttons on an applet\nimport java.awt.*;\nimport java.applet.*;\n\npublic class Button1 extends Applet {\n  Button\n    b1 = new Button("Button 1"),\n    b2 = new Button("Button 2");\n  public void init() {\n    add(b1);\n    add(b2);\n  }\n} ///:~\n')])])]),a("p",[t._v("但这还不足以创建"),a("code",[t._v("Button")]),t._v("（或其他任何控件）。必须同时调用"),a("code",[t._v("Applet add()")]),t._v("方法，令按钮放置在程序片的窗体中。这看起来似乎比实际简单得多，因为对"),a("code",[t._v("add()")]),t._v("的调用实际会（间接地）决定将控件放在窗体的什么地方。对窗体布局的控件马上就要讲到。")])])}),[],!1,null,null,null);n.default=o.exports}}]);