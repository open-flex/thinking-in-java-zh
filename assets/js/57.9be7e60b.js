(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{455:function(e,n,t){"use strict";t.r(n);var o=t(56),a=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_13-18-可视编程和beans"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-18-可视编程和beans"}},[e._v("#")]),e._v(" 13.18 可视编程和Beans")]),e._v(" "),t("p",[e._v("迄今为止，我们已看到Java对创建可重复使用的代码片工作而言是多么的有价值。“最大限度地可重复使用”的代码单元拥有类，因为它包含一个紧密结合在一起的单元特性（字段）和单元动作（方法），它们可以直接经过混合或通过继承被重复使用。")]),e._v(" "),t("p",[e._v("继承和多态态性是面向对象编程的精华，但在大多数情况下当我们创建一个应用程序时，我们真正最想要的恰恰是我们最需要的组件。我们希望在我们的设计中设置这些部件就像电子工程师在电路板上创造集成电路块一样（在使用Java的情况下，就是放到WEB页面上）。这似乎会成为加快这种“模块集合”编制程序方法的发展。")]),e._v(" "),t("p",[e._v("“可视化编程”最早的成功——非常的成功——要归功于微软公司的Visual Basic（VB，可视化Basic语言），接下来的第二代是Borland公司Delphi（一种客户/服务器数据库应用程序开发工具，也是Java Beans设计的主要灵感）。这些编程工具的组件的像征就是可视化，这是不容置疑的，因为它们通常展示一些类型的可视化组件，例如：一个按惯或一个TextField。事实上，可视化通常表现为组件可以非常精确地访问运行中程序。因此可视化编程方法的一部分包含从一个调色盘从拖放一个组件并将它放置到我们的窗体中。应用程序创建工具像我们所做的一样编写程序代码，该代码将导致正在运行的程序中的组件被创建。")]),e._v(" "),t("p",[e._v("简单地拖放组件到一个窗体中通常不足以构成一个完整的程序。一般情况下，我们需要改变组件的特性，例如组件的色彩，组件的文字，组件连结的数据库，等等。特性可以参照属性在编程时进行修改。我们可以在应用程序构建工具中巧妙处置我们组件的属性，并且当我们创建程序时，构建数据被保存下来，所以当该程序被启动时，数据能被重新恢复。")]),e._v(" "),t("p",[e._v("到如今，我们可能习惯于使用对象的多个特性，这也是一个动作集合。在设计时，可视化组件的动作可由事件部分地代表，意味着“任何事件都可以发生在组件上”。通常，由我们决定想发生的事件，当一个事件发生时，对所发生的事件连接代码。")]),e._v(" "),t("p",[e._v("这是关键性的部分：应用程序构建工具可以动态地询问组件（利用映象）以发现组件支持的事件和属件。一旦它知道它们的状态，应用程序构建工具就可以显示组件的属性并允许我们修改它们的属性（当我们构建程序时，保存它们的状态），并且也显示这些事件。一般而言，我们做一些事件像双击一个事件以及应用程序构建工具创建一个代码并连接到事件上。当事件发生时，我们不得不编写执行代码。应用程序构建工具累计为我们做了大量的工作。结果我们可以注意到程序看起来像它所假定的那样运行，并且依赖应用程序构建工具去为我们管理连接的详细资料。可视化的编程工具如此成功的原因是它们明显加快构建的应用程序的处理过程——当然，用户接口作为应用程序的一部分同样的好。")]),e._v(" "),t("h2",{attrs:{id:"_13-18-1-什么是bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-18-1-什么是bean"}},[e._v("#")]),e._v(" 13.18.1 什么是Bean")]),e._v(" "),t("p",[e._v("在经细节处理后，一个组件在类中被独特的具体化，真正地成为一块代码。关键的争议在于应用程序构建工具发现组件的属性和事件能力。为了创建一个VB组件，程序开发者不得不编写正确的同时也是复杂烦琐的代码片，接下来由某些协议去展现它们的事件和属性。Delphi是第二代的可视化编程工具并且这种开发语言主动地围绕可视化编程来设计因此它更容易去创建一个可视化组件。但是，Java带来了可视化的创作组件做为Java Beans最高级的“装备”，因为一个Bean就是一个类。我们不必再为制造任何的Bean而编写一些特殊的代码或者使用特殊的编程语言。事实上，我们唯一需要做的是略微地修改我们对我们方法命名的办法。方法名通知应用程序构建工具是否是一个属性，一个事件或是一个普通的方法。")]),e._v(" "),t("p",[e._v("在Java的文件中，命名规则被错误地曲解为“设计模式”。这十分的不幸，因为设计模式（参见第16章）惹来不少的麻烦。命名规则不是设计模式，它是相当的简单：")]),e._v(" "),t("p",[e._v("(1) 因为属性被命名为"),t("code",[e._v("xxx")]),e._v("，我们代表性的创建两个方法："),t("code",[e._v("getXxx()")]),e._v("和"),t("code",[e._v("setXxx()")]),e._v("。注意"),t("code",[e._v("get")]),e._v("或"),t("code",[e._v("set")]),e._v("后的第一个字母小写以产生属性名。"),t("code",[e._v("get")]),e._v("和"),t("code",[e._v("set")]),e._v("方法产生同样类型的参数。"),t("code",[e._v("set")]),e._v("和"),t("code",[e._v("get")]),e._v("的属性名和类型名之间没有关系。")]),e._v(" "),t("p",[e._v("(2) 对于布尔逻辑型属性，我们可以使用上面的"),t("code",[e._v("get")]),e._v("和"),t("code",[e._v("set")]),e._v("方法，但我们也可以用"),t("code",[e._v("is")]),e._v("代替 "),t("code",[e._v("get")]),e._v("。")]),e._v(" "),t("p",[e._v("(3) Bean的普通方法不适合上面的命名规则，但它们是公用的。")]),e._v(" "),t("p",[e._v("(4)对于事件，我们使用"),t("code",[e._v("listener")]),e._v("（接收器）方法。这种方法完全同我们看到过的方法相同：("),t("code",[e._v("addFooBarListener(FooBarListener)")]),e._v("和"),t("code",[e._v("removeFooBarListener(FooBarListener)")]),e._v("方法用来处理"),t("code",[e._v("FooBar")]),e._v("事件。大多数时候内建的事件和接收器会满足我们的需要，但我们可以创建自己的事件和接收器接口。")]),e._v(" "),t("p",[e._v("上面的第一点回答了一个关于我们可能注意到的从Java 1.0到Java 1.1的改变的问题：一些方法的名字太过于短小，显然改写名字毫无意义。现在我们可以看到为了制造Bean中的特殊的组件，大多数的这些修改不得不适合于"),t("code",[e._v("get")]),e._v("和"),t("code",[e._v("set")]),e._v("命名规则。\n现在，我们已经可以利用上面的这些指导方针去创建一个简单的Bean：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Frog.java\n// A trivial Java Bean\npackage frogbean;\nimport java.awt.*;\nimport java.awt.event.*;\n\nclass Spots {}\n\npublic class Frog {\n  private int jumps;\n  private Color color;\n  private Spots spots;\n  private boolean jmpr;\n  public int getJumps() { return jumps; }\n  public void setJumps(int newJumps) {\n    jumps = newJumps;\n  }\n  public Color getColor() { return color; }\n  public void setColor(Color newColor) {\n    color = newColor;\n  }\n  public Spots getSpots() { return spots; }\n  public void setSpots(Spots newSpots) {\n    spots = newSpots;\n  }\n  public boolean isJumper() { return jmpr; }\n  public void setJumper(boolean j) { jmpr = j; }\n  public void addActionListener(\n      ActionListener l) {\n    //...\n  }\n  public void removeActionListener(\n      ActionListener l) {\n    // ...\n  }\n  public void addKeyListener(KeyListener l) {\n    // ...\n  }\n  public void removeKeyListener(KeyListener l) {\n    // ...\n  }\n  // An "ordinary" public method:\n  public void croak() {\n    System.out.println("Ribbet!");\n  }\n} ///:~\n')])])]),t("p",[e._v("首先，我们可看到Bean就是一个类。通常，所有我们的字段会被作为专用，并且可以接近的唯一办法是通过方法。紧接着的是命名规则，属性是"),t("code",[e._v("jump")]),e._v("，"),t("code",[e._v("color")]),e._v("，"),t("code",[e._v("jumper")]),e._v("，"),t("code",[e._v("spots")]),e._v("（注意这些修改是在第一个字母在属性名的情况下进行的）。虽然内部确定的名字同最早的三个例子的属性名一样，在"),t("code",[e._v("jumper")]),e._v("中我们可以看到属性名不会强迫我们使用任何特殊的内部可变的名字（或者，真的拥有一些内部的可变的属性名）。")]),e._v(" "),t("p",[e._v("Bean事件的引用是"),t("code",[e._v("ActionEvent")]),e._v("和"),t("code",[e._v("KeyEvent")]),e._v("，这是根据有关接收器的"),t("code",[e._v("add")]),e._v("和"),t("code",[e._v("remove")]),e._v("命名方法得出的。最后我们可以注意到普通的方法"),t("code",[e._v("croak()")]),e._v("一直是Bean的一部分，仅仅是因为它是一个公共的方法，而不是因为它符合一些命名规则。")]),e._v(" "),t("h2",{attrs:{id:"_13-18-2-用introspector提取beaninfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-18-2-用introspector提取beaninfo"}},[e._v("#")]),e._v(" 13.18.2 用Introspector提取BeanInfo")]),e._v(" "),t("p",[e._v("当我们拖放一个Bean的调色板并将它放入到窗体中时，一个Bean的最关键的部分的规则发生了。应用程序构建工具必须可以创建Bean（如果它是默认的构造器的话，它就可以做）然后，在此范围外访问Bean的源代码，提取所有的必要的信息以创立属性表和事件处理器。")]),e._v(" "),t("p",[e._v("解决方案的一部分在11章结尾部分已经显现出来：Java 1.1版的映象允许一个匿名类的所有方法被发现。这完美地解决了Bean的难题而无需我们使用一些特殊的语言关键字像在其它的可视化编程语言中所需要的那样。事实上，一个主要的原因是映象增加到Java 1.1版中以支持Beans（尽管映象同样支持对象串联和远程方法调用）。因为我们可能希望应用程序构建工具的开发者将不得不映象每个Bean并且通过它们的方法搜索以找到Bean的属性和事件。")]),e._v(" "),t("p",[e._v("这当然是可能的，但是Java的研制者们希望为每个使用它的用户提供一个标准的接口，而不仅仅是使Bean更为简单易用，不过他们也同样提供了一个创建更复杂的Bean的标准方法。这个接口就是"),t("code",[e._v("Introspector")]),e._v("类，在这个类中最重要的方法静态的"),t("code",[e._v("getBeanInfo()")]),e._v("。我们通过一个类处理这个方法并且"),t("code",[e._v("getBeanInfo()")]),e._v("方法全面地对类进行查询，返回一个我们可以进行详细研究以发现其属性、方法和事件的"),t("code",[e._v("BeanInfo")]),e._v("对象。")]),e._v(" "),t("p",[e._v("通常我们不会留意这样的一些事物——我们可能会使用我们大多数的现成的Bean，并且我们不需要了解所有的在底层运行的技术细节。我们会简单地拖放我们的Bean到我们窗体中，然后配置它们的属性并且为事件编写处理器。无论如何它都是一个有趣的并且是有教育意义的使用"),t("code",[e._v("Introspector")]),e._v("来显示关于Bean信息的练习，好啦，闲话少说，这里有一个工具请运行它（我们可以在"),t("code",[e._v("forgbean")]),e._v("子目录中找到它）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: BeanDumper.java\n// A method to introspect a Bean\nimport java.beans.*;\nimport java.lang.reflect.*;\n\npublic class BeanDumper {\n  public static void dump(Class bean){\n    BeanInfo bi = null;\n    try {\n      bi = Introspector.getBeanInfo(\n        bean, java.lang.Object.class);\n    } catch(IntrospectionException ex) {\n      System.out.println("Couldn\'t introspect " +\n        bean.getName());\n      System.exit(1);\n    }\n    PropertyDescriptor[] properties =\n      bi.getPropertyDescriptors();\n    for(int i = 0; i < properties.length; i++) {\n      Class p = properties[i].getPropertyType();\n      System.out.println(\n        "Property type:\\n  " + p.getName());\n      System.out.println(\n        "Property name:\\n  " +\n        properties[i].getName());\n      Method readMethod =\n        properties[i].getReadMethod();\n      if(readMethod != null)\n        System.out.println(\n          "Read method:\\n  " +\n          readMethod.toString());\n      Method writeMethod =\n        properties[i].getWriteMethod();\n      if(writeMethod != null)\n        System.out.println(\n          "Write method:\\n  " +\n          writeMethod.toString());\n      System.out.println("====================");\n    }\n    System.out.println("Public methods:");\n    MethodDescriptor[] methods =\n      bi.getMethodDescriptors();\n    for(int i = 0; i < methods.length; i++)\n      System.out.println(\n        methods[i].getMethod().toString());\n    System.out.println("======================");\n    System.out.println("Event support:");\n    EventSetDescriptor[] events =\n      bi.getEventSetDescriptors();\n    for(int i = 0; i < events.length; i++) {\n      System.out.println("Listener type:\\n  " +\n        events[i].getListenerType().getName());\n      Method[] lm =\n        events[i].getListenerMethods();\n      for(int j = 0; j < lm.length; j++)\n        System.out.println(\n          "Listener method:\\n  " +\n          lm[j].getName());\n      MethodDescriptor[] lmd =\n        events[i].getListenerMethodDescriptors();\n      for(int j = 0; j < lmd.length; j++)\n        System.out.println(\n          "Method descriptor:\\n  " +\n          lmd[j].getMethod().toString());\n      Method addListener =\n        events[i].getAddListenerMethod();\n      System.out.println(\n          "Add Listener Method:\\n  " +\n        addListener.toString());\n      Method removeListener =\n        events[i].getRemoveListenerMethod();\n      System.out.println(\n        "Remove Listener Method:\\n  " +\n        removeListener.toString());\n      System.out.println("====================");\n    }\n  }\n  // Dump the class of your choice:\n  public static void main(String[] args) {\n    if(args.length < 1) {\n      System.err.println("usage: \\n" +\n        "BeanDumper fully.qualified.class");\n      System.exit(0);\n    }\n    Class c = null;\n    try {\n      c = Class.forName(args[0]);\n    } catch(ClassNotFoundException ex) {\n      System.err.println(\n        "Couldn\'t find " + args[0]);\n      System.exit(0);\n    }\n    dump(c);\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("BeanDumper.dump()")]),e._v("是一个可以做任何工作的方法。首先它试图创建一个"),t("code",[e._v("BeanInfo")]),e._v("对象，如果成功地调用"),t("code",[e._v("BeanInfo")]),e._v("的方法，就产生关于属性、方法和事件的信息。在"),t("code",[e._v("Introspector.getBeanInfo()")]),e._v("中，我们会注意到有一个另外的参数。由它来通知"),t("code",[e._v("Introspector")]),e._v("访问继承体系的地点。在这种情况下，它在分析所有对象方法前停下，因为我们对看到那些并不感兴趣。")]),e._v(" "),t("p",[e._v("因为属性，"),t("code",[e._v("getPropertyDescriptors()")]),e._v("返回一组的属性描述符号。对于每个描述符号我们可以调用"),t("code",[e._v("getPropertyType()")]),e._v("方法彻底的通过属性方法发现类的对象。这时，我们可以用"),t("code",[e._v("getName()")]),e._v("方法得到每个属性的假名（从方法名中提取），"),t("code",[e._v("getname()")]),e._v("方法用"),t("code",[e._v("getReadMethod()")]),e._v("和"),t("code",[e._v("getWriteMethod()")]),e._v("完成读和写的操作。最后的两个方法返回一个可以真正地用来调用在对象上调用相应的方法方法对象（这是映象的一部分）。对于公共方法（包括属性方法），"),t("code",[e._v("getMethodDescriptors()")]),e._v("返回一组方法描述字符。每一个我们都可以得到相当的方法对象并可以显示出它们的名字。")]),e._v(" "),t("p",[e._v("对于事件而言，"),t("code",[e._v("getEventSetDescriptors()")]),e._v("返回一组事件描述字符。它们中的每一个都可以被查询以找出接收器的类，接收器类的方法以及增加和删除接收器的方法。"),t("code",[e._v("BeanDumper")]),e._v("程序打印出所有的这些信息。")]),e._v(" "),t("p",[e._v("如果我们调用"),t("code",[e._v("BeanDumper")]),e._v("在"),t("code",[e._v("Frog")]),e._v("类中，就像这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("java BeanDumper frogbean.Frog\n")])])]),t("p",[e._v("它的输出结果如下（已删除这儿不需要的额外细节）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class name: Frog\nProperty type:\n  Color\nProperty name:\n  color\nRead method:\n  public Color getColor()\nWrite method:\n  public void setColor(Color)\n====================\nProperty type:\n  Spots\nProperty name:\n  spots\nRead method:\n  public Spots getSpots()\nWrite method:\n  public void setSpots(Spots)\n====================\nProperty type:\n  boolean\nProperty name:\n  jumper\nRead method:\n  public boolean isJumper()\nWrite method:\n  public void setJumper(boolean)\n====================\nProperty type:\n  int\nProperty name:\n  jumps\nRead method:\n  public int getJumps()\nWrite method:\n  public void setJumps(int)\n====================\nPublic methods:\npublic void setJumps(int)\npublic void croak()\npublic void removeActionListener(ActionListener)\npublic void addActionListener(ActionListener)\npublic int getJumps()\npublic void setColor(Color)\npublic void setSpots(Spots)\npublic void setJumper(boolean)\npublic boolean isJumper()\npublic void addKeyListener(KeyListener)\npublic Color getColor()\npublic void removeKeyListener(KeyListener)\npublic Spots getSpots()\n======================\nEvent support:\nListener type:\n  KeyListener\nListener method:\n  keyTyped\nListener method:\n  keyPressed\nListener method:\n  keyReleased\nMethod descriptor:\n  public void keyTyped(KeyEvent)\nMethod descriptor:\n  public void keyPressed(KeyEvent)\nMethod descriptor:\n  public void keyReleased(KeyEvent)\nAdd Listener Method:\n  public void addKeyListener(KeyListener)\nRemove Listener Method:\n  public void removeKeyListener(KeyListener)\n====================\nListener type:\n  ActionListener\nListener method:\n  actionPerformed\nMethod descriptor:\n  public void actionPerformed(ActionEvent)\nAdd Listener Method:\n  public void addActionListener(ActionListener)\nRemove Listener Method:\n  public void removeActionListener(ActionListener)\n====================\n")])])]),t("p",[e._v("这个结果揭示出了"),t("code",[e._v("Introspector")]),e._v("在从我们的Bean产生一个"),t("code",[e._v("BeanInfo")]),e._v("对象时看到的大部分内容。我们可注意到属性的类型和它们的名字是相互独立的。请注意小写的属性名。（当属性名开头在一行中有超过不止的大写字母，这一次程序就不会被执行。）并且请记住我们在这里所见到的方法名（例如读和与方法）真正地从一个可以被用来在对象中调用相关方法的方法对象中产生。")]),e._v(" "),t("p",[e._v("通用方法列表包含了不相关的事件或者属性，例如"),t("code",[e._v("croak()")]),e._v("。列表中所有的方法都是我们可以有计划的为Bean调用，并且应用程序构建工具可以选择列出所有的方法，当我们调用方法时，减轻我们的任务。")]),e._v(" "),t("p",[e._v("最后，我们可以看到事件在接收器中完全地分析研究它的方法、增加和减少接收器的方法。基本上，一旦我们拥有"),t("code",[e._v("BeanInfo")]),e._v("，我们就可以找出对Bean来说任何重要的事物。我们同样可以为Bean调用方法，即使我们除了对象外没有任何其它的信息（此外，这也是映象的特点）。")]),e._v(" "),t("h2",{attrs:{id:"_13-18-3-一个更复杂的bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-18-3-一个更复杂的bean"}},[e._v("#")]),e._v(" 13.18.3 一个更复杂的Bean")]),e._v(" "),t("p",[e._v("接下的程序例子稍微复杂一些，尽管这没有什么价值。这个程序是一张不论鼠标何时移动都围绕它画一个小圆的，并且一个动作接收器被激活。画布。当按下鼠标键时，我们可以改变的属性是圆的大小，除此之外还有被显示文字的色彩，大小，内容。"),t("code",[e._v("BangBean")]),e._v("同样拥有它自己的"),t("code",[e._v("addActionListener()")]),e._v("和"),t("code",[e._v("removeActionListener()")]),e._v("方法，因此我们可以附上自己的当用户单击在"),t("code",[e._v("BangBean")]),e._v("上时会被激活的接收器。这样，我们将能够确认可支持的属性和事件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: BangBean.java\n// A graphical Bean\npackage bangbean;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class BangBean extends Canvas\n     implements Serializable {\n  protected int xm, ym;\n  protected int cSize = 20; // Circle size\n  protected String text = "Bang!";\n  protected int fontSize = 48;\n  protected Color tColor = Color.red;\n  protected ActionListener actionListener;\n  public BangBean() {\n    addMouseListener(new ML());\n    addMouseMotionListener(new MML());\n  }\n  public int getCircleSize() { return cSize; }\n  public void setCircleSize(int newSize) {\n    cSize = newSize;\n  }\n  public String getBangText() { return text; }\n  public void setBangText(String newText) {\n    text = newText;\n  }\n  public int getFontSize() { return fontSize; }\n  public void setFontSize(int newSize) {\n    fontSize = newSize;\n  }\n  public Color getTextColor() { return tColor; }\n  public void setTextColor(Color newColor) {\n    tColor = newColor;\n  }\n  public void paint(Graphics g) {\n    g.setColor(Color.black);\n    g.drawOval(xm - cSize/2, ym - cSize/2,\n      cSize, cSize);\n  }\n  // This is a unicast listener, which is\n  // the simplest form of listener management:\n  public void addActionListener (\n      ActionListener l)\n        throws TooManyListenersException {\n    if(actionListener != null)\n      throw new TooManyListenersException();\n    actionListener = l;\n  }\n  public void removeActionListener(\n      ActionListener l) {\n    actionListener = null;\n  }\n  class ML extends MouseAdapter {\n    public void mousePressed(MouseEvent e) {\n      Graphics g = getGraphics();\n      g.setColor(tColor);\n      g.setFont(\n        new Font(\n          "TimesRoman", Font.BOLD, fontSize));\n      int width =\n        g.getFontMetrics().stringWidth(text);\n      g.drawString(text,\n        (getSize().width - width) /2,\n        getSize().height/2);\n      g.dispose();\n      // Call the listener\'s method:\n      if(actionListener != null)\n        actionListener.actionPerformed(\n          new ActionEvent(BangBean.this,\n            ActionEvent.ACTION_PERFORMED, null));\n    }\n  }\n  class MML extends MouseMotionAdapter {\n    public void mouseMoved(MouseEvent e) {\n      xm = e.getX();\n      ym = e.getY();\n      repaint();\n    }\n  }\n  public Dimension getPreferredSize() {\n    return new Dimension(200, 200);\n  }\n  // Testing the BangBean:\n  public static void main(String[] args) {\n    BangBean bb = new BangBean();\n    try {\n      bb.addActionListener(new BBL());\n    } catch(TooManyListenersException e) {}\n    Frame aFrame = new Frame("BangBean Test");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(bb, BorderLayout.CENTER);\n    aFrame.setSize(300,300);\n    aFrame.setVisible(true);\n  }\n  // During testing, send action information\n  // to the console:\n  static class BBL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      System.out.println("BangBean action");\n    }\n  }\n} ///:~\n')])])]),t("p",[e._v("最重要的是我们会注意到"),t("code",[e._v("BangBean")]),e._v("执行了这种串联化的接口。这意味着应用程序构建工具可以在程序设计者调整完属性值后利用串联为"),t("code",[e._v("BangBean")]),e._v("贮藏所有的信息。当Bean作为运行的应用程序的一部分被创建时，那些被贮藏的属性被重新恢复，因此我们可以正确地得到我们的设计。")]),e._v(" "),t("p",[e._v("我们能看到通常同Bean一起运行的所有的字段都是专用的——允许只能通过方法来访问，通常利用“属性”结构。")]),e._v(" "),t("p",[e._v("当我们注视着"),t("code",[e._v("addActionListener()")]),e._v("的签名时，我们会注意到它可以产生出一个"),t("code",[e._v("TooManyListenerException")]),e._v("（太多接收器异常）。这个异常指明它是一个单一的类型的，意味着当事件发生时，它只能通知一个接收器。一般情况下，我们会使用具有多种类型的事件，以便一个事件通知多个的接收器。但是，那样会陷入直到下一章我们才能准备好的结局中，因此这些内容会被重新回顾（下一个标题是“Java Beans 的重新回顾”）。单一类型的事件回避了这个难题。")]),e._v(" "),t("p",[e._v("当我们按下鼠标键时，文字被安入"),t("code",[e._v("BangBean")]),e._v("中间，并且如果动作接收器字段存在，它的"),t("code",[e._v("actionPerformed()")]),e._v("方法就被调用，创建一个新的"),t("code",[e._v("ActionEvent")]),e._v("对象在处理过程中。无论何时鼠标移动，它的新座标将被捕捉，并且画布会被重画（像我们所看到的抹去一些画布上的文字）。")]),e._v(" "),t("p",[t("code",[e._v("main()")]),e._v("方法增加了允许我们从命令行中测试程序的功能。当一个Bean在一个开发环境中，"),t("code",[e._v("main()")]),e._v("方法不会被使用，但拥有它是绝对有益的，因为它提供了快捷的测试能力。无论何时一个"),t("code",[e._v("ActionEvent")]),e._v("发生，"),t("code",[e._v("main()")]),e._v("方法都将创建了一个帧并安置了一个"),t("code",[e._v("BangBean")]),e._v("在它里面，还在"),t("code",[e._v("BangBean")]),e._v("中附上了一个简单的动作接收器以打印到控制台。当然，一般来说应用程序构建工具将创建大多数的Bean的代码。当我们通过"),t("code",[e._v("BeanDumper")]),e._v("或者安放"),t("code",[e._v("BangBean")]),e._v("到一个可激活Bean的开发环境中去运行"),t("code",[e._v("BangBean")]),e._v("时，我们会注意到会有很多额外的属性和动作明显超过了上面的代码。那是因为"),t("code",[e._v("BangBean")]),e._v("从画布中继承，并且画布就是一个Bean，因此我们看到它的属性和事件同样的合适。")]),e._v(" "),t("h2",{attrs:{id:"_13-18-4-bean的封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-18-4-bean的封装"}},[e._v("#")]),e._v(" 13.18.4 Bean的封装")]),e._v(" "),t("p",[e._v("在我们可以安放一个Bean到一个可激活Bean的可视化构建工具中前，它必须被放入到标准的Bean容器里，也就是包含Bean类和一个表示“这是一个Bean”的清单文件的JAR（Java ARchive，Java文件）文件中。清单文件是一个简单的紧随事件结构的文本文件。对于"),t("code",[e._v("BangBean")]),e._v("而言，清单文件就像下面这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Manifest-Version: 1.0\n\nName: bangbean/BangBean.class\nJava-Bean: True\n")])])]),t("p",[e._v("其中，第一行指出清单文件结构的版本，这是SUN公司在很久以前公布的版本。第二行（空行忽略）对文件命名为"),t("code",[e._v("BangBean.class")]),e._v("。第三行表示“这个文件是一个Bean”。没有第三行，程序构建工具不会将类作为一个Bean来认可。")]),e._v(" "),t("p",[e._v("唯一难以处理的部分是我们必须肯定"),t("code",[e._v("Name:")]),e._v("字段中的路径是正确的。如果我们回顾"),t("code",[e._v("BangBean.java")]),e._v("，我们会看到它在"),t("code",[e._v("package bangbean")]),e._v("（因为存放类路径的子目录称为"),t("code",[e._v("bangbean")]),e._v("）中，并且这个名字在清单文件中必须包括封装的信息。另外，我们必须安放清单文件在我们封装路径的根目录上，在这个例子中意味着安放文件在"),t("code",[e._v("bangbean")]),e._v("子目录中。这之后，我们必须从同一目录中调用Jar来作为清单文件，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("jar cfm BangBean.jar BangBean.mf bangbean\n")])])]),t("p",[e._v("这个例子假定我们想产生一个名为"),t("code",[e._v("BangBean.jar")]),e._v("的文件并且我们将清单放到一个称为"),t("code",[e._v("BangBean.mf")]),e._v("文件中。")]),e._v(" "),t("p",[e._v("我们可能会想“当我编译"),t("code",[e._v("BangBean.java")]),e._v("时，产生的其它类会怎么样呢？”哦，它们会在"),t("code",[e._v("bangbean")]),e._v("子目录中被中止，并且我们会注意到上面"),t("code",[e._v("jar")]),e._v("命令行的最后一个参数就是"),t("code",[e._v("bangbean")]),e._v("子目录。当我们给"),t("code",[e._v("jar")]),e._v("子目录名时，它封装整个的子目录到"),t("code",[e._v("jar")]),e._v("文件中（在这个例子中，包括"),t("code",[e._v("BangBean.java")]),e._v("的源代码文件——对于我们自己的Bean我们可能不会去选择包含源代码文件。）另外，如果我们改变主意，解开打包的JAR文件，我们会发现我们清单文件并不在里面，但"),t("code",[e._v("jar")]),e._v("创建了它自己的清单文件（部分根据我们的文件），称为"),t("code",[e._v("MAINFEST.MF")]),e._v("并且安放它到"),t("code",[e._v("META-INF")]),e._v("子目录中（代表“meta-information”）。如果我们打开这个清单文件，我们同样会注意到"),t("code",[e._v("jar")]),e._v("为每个文件加入数字签名信息，其结构如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Digest-Algorithms: SHA MD5\nSHA-Digest: pDpEAG9NaeCx8aFtqPI4udSX/O0=\nMD5-Digest: O4NcS1hE3Smnzlp2hj6qeg==\n")])])]),t("p",[e._v("一般来说，我们不必担心这些，如果我们要做一些修改，可以修改我们的原始的清单文件并且重新调用"),t("code",[e._v("jar")]),e._v("以为我们的Bean创建了一个新的JAR文件。我们同样也可以简单地通过增加其它的Bean的信息到我们清单文件来增加它们到JAR文件中。")]),e._v(" "),t("p",[e._v("值得注意的是我们或许需要安放每个Bean到它自己的子目录中，因为当我们创建一个JAR文件时，分配JAR应用目录名并且JAR放置子目录中的任何文件到JAR文件中。我们可以看到"),t("code",[e._v("Frog")]),e._v("和"),t("code",[e._v("BangBean")]),e._v("都在它们自己的子目录中。")]),e._v(" "),t("p",[e._v("一旦我们将我们的Bean正确地放入一个JAR文件中，我们就可以携带它到一个可以激活Bean的编程环境中使用。使用这种方法，我们可以从一种工具到另一种工具间交替变换，但SUN公司为Java Beans提供了免费高效的测试工具在它们的“Bean Development Kit，Bean开发工具”（BDK）称为"),t("code",[e._v("beanbox")]),e._v("。（我们可以从"),t("code",[e._v("www.javasoft.com")]),e._v("处下载。）在我们启动"),t("code",[e._v("beanbox")]),e._v("前，放置我们的Bean到"),t("code",[e._v("beanbox")]),e._v("中，复制JAR文件到BDK的"),t("code",[e._v("jars")]),e._v("子目录中。")]),e._v(" "),t("h2",{attrs:{id:"_13-18-5-更复杂的bean支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-18-5-更复杂的bean支持"}},[e._v("#")]),e._v(" 13.18.5 更复杂的Bean支持")]),e._v(" "),t("p",[e._v("我们可以看到创建一个Bean显然多么的简单。在程序设计中我们几乎不受到任何的限制。Java Bean的设计提供了一个简单的输入点，这样可以提高到更复杂的层次上。这些高层次的问题超出了这本书所要讨论的范围，但它们会在此做简要的介绍。我们可以在"),t("code",[e._v("http://java.sun.com/beans")]),e._v("上找到更多的详细资料。")]),e._v(" "),t("p",[e._v("我们增加更加复杂的程序和它的属性到一个位置。上面的例子显示一个独特的属性，当然它也可能代表一个数组的属性。这称为索引属性。我们简单地提供一个相应的方法（再者有一个方法名的命名规则）并且"),t("code",[e._v("Introspector")]),e._v("认可索引属性，因此我们的应用程序构建工具相应的处理。")]),e._v(" "),t("p",[e._v("属性可以被捆绑，这意味着它们将通过"),t("code",[e._v("PropertyChangeEvent")]),e._v("通知其它的对象。其它的对象可以随后根据对Bean的改变选择修改它们自己。")]),e._v(" "),t("p",[e._v("属性可以被束缚，这意味着其它的对象可以在一个属性的改变不能被接受时，拒绝它。其它的对象利用一个"),t("code",[e._v("PropertyChangeEvent")]),e._v("来通知，并且它们产生一个"),t("code",[e._v("ProptertyVetoException")]),e._v("去阻止修改的发生，并恢复为原来的值。")]),e._v(" "),t("p",[e._v("我们同样能够改变我们的Bean在设计时的被描绘成的方法：")]),e._v(" "),t("p",[e._v("(1) 我们可以为我们特殊的Bean提供一个定制的属性表。这个普通的属性表将被所有的Bean所使用，但当我们的Bean被选择时，它会自动地调用这张属性表。")]),e._v(" "),t("p",[e._v("(2) 我们可以为一个特殊的属性创建一个定制的编辑器，因此普通的属性表被使用，但当我们指定的属性被调用时，编辑器会自动地被调用。")]),e._v(" "),t("p",[e._v("(3)我们可以为我们的Bean提供一个定制的"),t("code",[e._v("BeanInfo")]),e._v("类，产生的信息不同于由"),t("code",[e._v("Introspector")]),e._v("默认产生的。")]),e._v(" "),t("p",[e._v("(4) 它同样可能在所有的"),t("code",[e._v("FeatureDescriptors")]),e._v("中改变"),t("code",[e._v("expert")]),e._v("的开关模式，以辨别基本特征和更复杂的特征。")]),e._v(" "),t("h2",{attrs:{id:"_13-18-6-bean更多的知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-18-6-bean更多的知识"}},[e._v("#")]),e._v(" 13.18.6 Bean更多的知识")]),e._v(" "),t("p",[e._v("另外有关的争议是Bean不能被编址。无论何时我们创建一个Bean，都希望它会在一个多线程的环境中运行。这意味着我们必须理解线程的出口，我们将在下一章中介绍。我们会发现有一段称为“Java Beans的回顾”的节会注意到这个问题和它的解决方案。")])])}),[],!1,null,null,null);n.default=a.exports}}]);