(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{431:function(e,t,n){"use strict";n.r(t);var a=n(56),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_10-9-对象序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-9-对象序列化"}},[e._v("#")]),e._v(" 10.9 对象序列化")]),e._v(" "),n("p",[e._v("Java 1.1增添了一种有趣的特性，名为“对象序列化”（Object Serialization）。它面向那些实现了"),n("code",[e._v("Serializable")]),e._v("接口的对象，可将它们转换成一系列字节，并可在以后完全恢复回原来的样子。这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异。换句话说，可以先在Windows机器上创建一个对象，对其序列化，然后通过网络发给一台Unix机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。")]),e._v(" "),n("p",[e._v("就其本身来说，对象的序列化是非常有趣的，因为利用它可以实现“有限持久化”。请记住“持久化”意味着对象的“生存时间”并不取决于程序是否正在执行——它存在或“生存”于程序的每一次调用之间。通过序列化一个对象，将其写入磁盘，以后在程序重新调用时重新恢复那个对象，就能圆满实现一种“持久”效果。之所以称其为“有限”，是因为不能用某种"),n("code",[e._v("persistent")]),e._v("（持久）关键字简单地地定义一个对象，并让系统自动照看其他所有细节问题（尽管将来可能成为现实）。相反，必须在自己的程序中明确地序列化和组装对象。")]),e._v(" "),n("p",[e._v("语言里增加了对象序列化的概念后，可提供对两种主要特性的支持。Java 1.1的“远程方法调用”（RMI）使本来存在于其他机器的对象可以表现出好象就在本地机器上的行为。将消息发给远程对象时，需要通过对象序列化来传输参数和返回值。RMI将在第15章作具体讨论。")]),e._v(" "),n("p",[e._v("对象的序列化也是Java Beans必需的，后者由Java 1.1引入。使用一个Bean时，它的状态信息通常在设计期间配置好。程序启动以后，这种状态信息必须保存下来，以便程序启动以后恢复；具体工作由对象序列化完成。")]),e._v(" "),n("p",[e._v("对象的序列化处理非常简单，只需对象实现了"),n("code",[e._v("Serializable")]),e._v("接口即可（该接口仅是一个标记，没有方法）。在Java 1.1中，许多标准库类都发生了改变，以便能够序列化——其中包括用于基本数据类型的全部包装器、所有集合类以及其他许多东西。甚至"),n("code",[e._v("Class")]),e._v("对象也可以序列化（第11章讲述了具体实现过程）。")]),e._v(" "),n("p",[e._v("为序列化一个对象，首先要创建某些"),n("code",[e._v("OutputStream")]),e._v("对象，然后将其封装到"),n("code",[e._v("ObjectOutputStream")]),e._v("对象内。此时，只需调用"),n("code",[e._v("writeObject()")]),e._v("即可完成对象的序列化，并将其发送给"),n("code",[e._v("OutputStream")]),e._v("。相反的过程是将一个"),n("code",[e._v("InputStream")]),e._v("封装到"),n("code",[e._v("ObjectInputStream")]),e._v("内，然后调用"),n("code",[e._v("readObject()")]),e._v("。和往常一样，我们最后获得的是指向一个向上转换"),n("code",[e._v("Object")]),e._v("的引用，所以必须向下转换，以便能够直接设置。")]),e._v(" "),n("p",[e._v("对象序列化特别“聪明”的一个地方是它不仅保存了对象的“全景图”，而且能追踪对象内包含的所有引用并保存那些对象；接着又能对每个对象内包含的引用进行追踪；以此类推。我们有时将这种情况称为“对象网”，单个对象可与之建立连接。而且它还包含了对象的引用数组以及成员对象。若必须自行操纵一套对象序列化机制，那么在代码里追踪所有这些链接时可能会显得非常麻烦。在另一方面，由于Java对象的序列化似乎找不出什么缺点，所以请尽量不要自己动手，让它用优化的算法自动维护整个对象网。下面这个例子对序列化机制进行了测试。它建立了许多链接对象的一个"),n("code",[e._v("Worm")]),e._v("（蠕虫），每个对象都与"),n("code",[e._v("Worm")]),e._v("中的下一段链接，同时又与属于不同类（"),n("code",[e._v("Data")]),e._v("）的对象引用数组链接：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: Worm.java\n// Demonstrates object serialization in Java 1.1\nimport java.io.*;\n\nclass Data implements Serializable {\n  private int i;\n  Data(int x) { i = x; }\n  public String toString() {\n    return Integer.toString(i);\n  }\n}\n\npublic class Worm implements Serializable {\n  // Generate a random int value:\n  private static int r() {\n    return (int)(Math.random() * 10);\n  }\n  private Data[] d = {\n    new Data(r()), new Data(r()), new Data(r())\n  };\n  private Worm next;\n  private char c;\n  // Value of i == number of segments\n  Worm(int i, char x) {\n    System.out.println(" Worm constructor: " + i);\n    c = x;\n    if(--i > 0)\n      next = new Worm(i, (char)(x + 1));\n  }\n  Worm() {\n    System.out.println("Default constructor");\n  }\n  public String toString() {\n    String s = ":" + c + "(";\n    for(int i = 0; i < d.length; i++)\n      s += d[i].toString();\n    s += ")";\n    if(next != null)\n      s += next.toString();\n    return s;\n  }\n  public static void main(String[] args) {\n    Worm w = new Worm(6, \'a\');\n    System.out.println("w = " + w);\n    try {\n      ObjectOutputStream out =\n        new ObjectOutputStream(\n          new FileOutputStream("worm.out"));\n      out.writeObject("Worm storage");\n      out.writeObject(w);\n      out.close(); // Also flushes output\n      ObjectInputStream in =\n        new ObjectInputStream(\n          new FileInputStream("worm.out"));\n      String s = (String)in.readObject();\n      Worm w2 = (Worm)in.readObject();\n      System.out.println(s + ", w2 = " + w2);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n    try {\n      ByteArrayOutputStream bout =\n        new ByteArrayOutputStream();\n      ObjectOutputStream out =\n        new ObjectOutputStream(bout);\n      out.writeObject("Worm storage");\n      out.writeObject(w);\n      out.flush();\n      ObjectInputStream in =\n        new ObjectInputStream(\n          new ByteArrayInputStream(\n            bout.toByteArray()));\n      String s = (String)in.readObject();\n      Worm w3 = (Worm)in.readObject();\n      System.out.println(s + ", w3 = " + w3);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n')])])]),n("p",[e._v("更有趣的是，"),n("code",[e._v("Worm")]),e._v("内的"),n("code",[e._v("Data")]),e._v("对象数组是用随机数字初始化的（这样便不用怀疑编译器保留了某种原始信息）。每个"),n("code",[e._v("Worm")]),e._v("段都用一个"),n("code",[e._v("Char")]),e._v("标记。这个"),n("code",[e._v("Char")]),e._v("是在重复生成链接的"),n("code",[e._v("Worm")]),e._v("列表时自动产生的。创建一个"),n("code",[e._v("Worm")]),e._v("时，需告诉构造器希望它有多长。为产生下一个引用（"),n("code",[e._v("next")]),e._v("），它总是用减去1的长度来调用"),n("code",[e._v("Worm")]),e._v("构造器。最后一个"),n("code",[e._v("next")]),e._v("引用则保持为"),n("code",[e._v("null")]),e._v("（空），表示已抵达"),n("code",[e._v("Worm")]),e._v("的尾部。")]),e._v(" "),n("p",[e._v("上面的所有操作都是为了加深事情的复杂程度，加大对象序列化的难度。然而，真正的序列化过程却是非常简单的。一旦从另外某个流里创建了"),n("code",[e._v("ObjectOutputStream")]),e._v("，"),n("code",[e._v("writeObject()")]),e._v("就会序列化对象。注意也可以为一个"),n("code",[e._v("String")]),e._v("调用"),n("code",[e._v("writeObject()")]),e._v("。亦可使用与"),n("code",[e._v("DataOutputStream")]),e._v("相同的方法写入所有基本数据类型（它们有相同的接口）。")]),e._v(" "),n("p",[e._v("有两个单独的"),n("code",[e._v("try")]),e._v("块看起来是类似的。第一个读写的是文件，而另一个读写的是一个"),n("code",[e._v("ByteArray")]),e._v("（字节数组）。可利用对任何"),n("code",[e._v("DataInputStream")]),e._v("或者"),n("code",[e._v("DataOutputStream")]),e._v("的序列化来读写特定的对象；正如在关于连网的那一章会讲到的那样，这些对象甚至包括网络。一次循环后的输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Worm constructor: 6\nWorm constructor: 5\nWorm constructor: 4\nWorm constructor: 3\nWorm constructor: 2\nWorm constructor: 1\nw = :a(262):b(100):c(396):d(480):e(316):f(398)\nWorm storage, w2 = :a(262):b(100):c(396):d(480):e(316):f(398)\nWorm storage, w3 = :a(262):b(100):c(396):d(480):e(316):f(398)\n")])])]),n("p",[e._v("可以看出，装配回原状的对象确实包含了原来那个对象里包含的所有链接。")]),e._v(" "),n("p",[e._v("注意在对一个"),n("code",[e._v("Serializable")]),e._v("（可序列化）对象进行重新装配的过程中，不会调用任何构造器（甚至默认构造器）。整个对象都是通过从"),n("code",[e._v("InputStream")]),e._v("中取得数据恢复的。")]),e._v(" "),n("p",[e._v("作为Java 1.1特性的一种，我们注意到对象的序列化并不属于新的"),n("code",[e._v("Reader")]),e._v("和"),n("code",[e._v("Writer")]),e._v("层次结构的一部分，而是沿用老式的"),n("code",[e._v("InputStream")]),e._v("和"),n("code",[e._v("OutputStream")]),e._v("结构。所以在一些特殊的场合下，不得不混合使用两种类型的层次结构。")]),e._v(" "),n("h2",{attrs:{id:"_10-9-1-寻找类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-9-1-寻找类"}},[e._v("#")]),e._v(" 10.9.1 寻找类")]),e._v(" "),n("p",[e._v("读者或许会奇怪为什么需要一个对象从它的序列化状态中恢复。举个例子来说，假定我们序列化一个对象，并通过网络将其作为文件传送给另一台机器。此时，位于另一台机器的程序可以只用文件目录来重新构造这个对象吗？")]),e._v(" "),n("p",[e._v("回答这个问题的最好方法就是做一个实验。下面这个文件位于本章的子目录下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//: Alien.java\n// A serializable class\nimport java.io.*;\n\npublic class Alien implements Serializable {\n} ///:~\n\n")])])]),n("p",[e._v("用于创建和序列化一个"),n("code",[e._v("Alien")]),e._v("对象的文件位于相同的目录下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: FreezeAlien.java\n// Create a serialized output file\nimport java.io.*;\n\npublic class FreezeAlien {\n  public static void main(String[] args)\n      throws Exception {\n    ObjectOutput out =\n      new ObjectOutputStream(\n        new FileOutputStream("file.x"));\n    Alien zorcon = new Alien();\n    out.writeObject(zorcon);\n  }\n} ///:~\n')])])]),n("p",[e._v("该程序并不是捕获和控制异常，而是将异常简单、直接地传递到"),n("code",[e._v("main()")]),e._v("外部，这样便能在命令行报告它们。")]),e._v(" "),n("p",[e._v("程序编译并运行后，将结果产生的"),n("code",[e._v("file.x")]),e._v("复制到名为"),n("code",[e._v("xfiles")]),e._v("的子目录，代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: ThawAlien.java\n// Try to recover a serialized file without the\n// class of object that\'s stored in that file.\npackage c10.xfiles;\nimport java.io.*;\n\npublic class ThawAlien {\n  public static void main(String[] args)\n      throws Exception {\n    ObjectInputStream in =\n      new ObjectInputStream(\n        new FileInputStream("file.x"));\n    Object mystery = in.readObject();\n    System.out.println(\n      mystery.getClass().toString());\n  }\n} ///:~\n\n')])])]),n("p",[e._v("该程序能打开文件，并成功读取"),n("code",[e._v("mystery")]),e._v("对象中的内容。然而，一旦尝试查找与对象有关的任何资料——这要求"),n("code",[e._v("Alien")]),e._v("的"),n("code",[e._v("Class")]),e._v("对象——Java虚拟机（JVM）便找不到"),n("code",[e._v("Alien.class")]),e._v("（除非它正好在类路径内，而本例理应相反）。这样就会得到一个名叫"),n("code",[e._v("ClassNotFoundException")]),e._v("的异常（同样地，若非能够校验"),n("code",[e._v("Alien")]),e._v("存在的证据，否则它等于消失）。")]),e._v(" "),n("p",[e._v("恢复了一个序列化的对象后，如果想对其做更多的事情，必须保证JVM能在本地类路径或者因特网的其他什么地方找到相关的"),n("code",[e._v(".class")]),e._v("文件。")]),e._v(" "),n("h2",{attrs:{id:"_10-9-2-序列化的控制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-9-2-序列化的控制"}},[e._v("#")]),e._v(" 10.9.2 序列化的控制")]),e._v(" "),n("p",[e._v("正如大家看到的那样，默认的序列化机制并不难操纵。然而，假若有特殊要求又该怎么办呢？我们可能有特殊的安全问题，不希望对象的某一部分序列化；或者某一个子对象完全不必序列化，因为对象恢复以后，那一部分需要重新创建。")]),e._v(" "),n("p",[e._v("此时，通过实现"),n("code",[e._v("Externalizable")]),e._v("接口，用它代替"),n("code",[e._v("Serializable")]),e._v("接口，便可控制序列化的具体过程。这个"),n("code",[e._v("Externalizable")]),e._v("接口扩展了"),n("code",[e._v("Serializable")]),e._v("，并增添了两个方法："),n("code",[e._v("writeExternal()")]),e._v("和"),n("code",[e._v("readExternal()")]),e._v("。在序列化和重新装配的过程中，会自动调用这两个方法，以便我们执行一些特殊操作。")]),e._v(" "),n("p",[e._v("下面这个例子展示了"),n("code",[e._v("Externalizable")]),e._v("接口方法的简单应用。注意"),n("code",[e._v("Blip1")]),e._v("和"),n("code",[e._v("Blip2")]),e._v("几乎完全一致，除了极微小的差别（自己研究一下代码，看看是否能发现）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: Blips.java\n// Simple use of Externalizable & a pitfall\nimport java.io.*;\nimport java.util.*;\n\nclass Blip1 implements Externalizable {\n  public Blip1() {\n    System.out.println("Blip1 Constructor");\n  }\n  public void writeExternal(ObjectOutput out)\n      throws IOException {\n    System.out.println("Blip1.writeExternal");\n  }\n  public void readExternal(ObjectInput in)\n     throws IOException, ClassNotFoundException {\n    System.out.println("Blip1.readExternal");\n  }\n}\n\nclass Blip2 implements Externalizable {\n  Blip2() {\n    System.out.println("Blip2 Constructor");\n  }\n  public void writeExternal(ObjectOutput out)\n      throws IOException {\n    System.out.println("Blip2.writeExternal");\n  }\n  public void readExternal(ObjectInput in)\n     throws IOException, ClassNotFoundException {\n    System.out.println("Blip2.readExternal");\n  }\n}\n\npublic class Blips {\n  public static void main(String[] args) {\n    System.out.println("Constructing objects:");\n    Blip1 b1 = new Blip1();\n    Blip2 b2 = new Blip2();\n    try {\n      ObjectOutputStream o =\n        new ObjectOutputStream(\n          new FileOutputStream("Blips.out"));\n      System.out.println("Saving objects:");\n      o.writeObject(b1);\n      o.writeObject(b2);\n      o.close();\n      // Now get them back:\n      ObjectInputStream in =\n        new ObjectInputStream(\n          new FileInputStream("Blips.out"));\n      System.out.println("Recovering b1:");\n      b1 = (Blip1)in.readObject();\n      // OOPS! Throws an exception:\n//!   System.out.println("Recovering b2:");\n//!   b2 = (Blip2)in.readObject();\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n')])])]),n("p",[e._v("该程序输出如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Constructing objects:\nBlip1 Constructor\nBlip2 Constructor\nSaving objects:\nBlip1.writeExternal\nBlip2.writeExternal\nRecovering b1:\nBlip1 Constructor\nBlip1.readExternal\n")])])]),n("p",[e._v("未恢复"),n("code",[e._v("Blip2")]),e._v("对象的原因是那样做会导致一个异常。你找出了"),n("code",[e._v("Blip1")]),e._v("和"),n("code",[e._v("Blip2")]),e._v("之间的区别吗？"),n("code",[e._v("Blip1")]),e._v("的构造器是“公共的”（"),n("code",[e._v("public")]),e._v("），"),n("code",[e._v("Blip2")]),e._v("的构造器则不然，这样便会在恢复时造成异常。试试将"),n("code",[e._v("Blip2")]),e._v("的构造器属性变成"),n("code",[e._v("public")]),e._v("，然后删除"),n("code",[e._v("//!")]),e._v("注释标记，看看是否能得到正确的结果。")]),e._v(" "),n("p",[e._v("恢复"),n("code",[e._v("b1")]),e._v("后，会调用"),n("code",[e._v("Blip1")]),e._v("默认构造器。这与恢复一个"),n("code",[e._v("Serializable")]),e._v("（可序列化）对象不同。在后者的情况下，对象完全以它保存下来的二进制位为基础恢复，不存在构造器调用。而对一个"),n("code",[e._v("Externalizable")]),e._v("对象，所有普通的默认构建行为都会发生（包括在字段定义时的初始化），而且会调用"),n("code",[e._v("readExternal()")]),e._v("。必须注意这一事实——特别注意所有默认的构建行为都会进行——否则很难在自己的"),n("code",[e._v("Externalizable")]),e._v("对象中产生正确的行为。")]),e._v(" "),n("p",[e._v("下面这个例子揭示了保存和恢复一个"),n("code",[e._v("Externalizable")]),e._v("对象必须做的全部事情：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: Blip3.java\n// Reconstructing an externalizable object\nimport java.io.*;\nimport java.util.*;\n\nclass Blip3 implements Externalizable {\n  int i;\n  String s; // No initialization\n  public Blip3() {\n    System.out.println("Blip3 Constructor");\n    // s, i not initialized\n  }\n  public Blip3(String x, int a) {\n    System.out.println("Blip3(String x, int a)");\n    s = x;\n    i = a;\n    // s & i initialized only in non-default\n    // constructor.\n  }\n  public String toString() { return s + i; }\n  public void writeExternal(ObjectOutput out)\n      throws IOException {\n    System.out.println("Blip3.writeExternal");\n    // You must do this:\n    out.writeObject(s); out.writeInt(i);\n  }\n  public void readExternal(ObjectInput in)\n     throws IOException, ClassNotFoundException {\n    System.out.println("Blip3.readExternal");\n    // You must do this:\n    s = (String)in.readObject();\n    i =in.readInt();\n  }\n  public static void main(String[] args) {\n    System.out.println("Constructing objects:");\n    Blip3 b3 = new Blip3("A String ", 47);\n    System.out.println(b3.toString());\n    try {\n      ObjectOutputStream o =\n        new ObjectOutputStream(\n          new FileOutputStream("Blip3.out"));\n      System.out.println("Saving object:");\n      o.writeObject(b3);\n      o.close();\n      // Now get it back:\n      ObjectInputStream in =\n        new ObjectInputStream(\n          new FileInputStream("Blip3.out"));\n      System.out.println("Recovering b3:");\n      b3 = (Blip3)in.readObject();\n      System.out.println(b3.toString());\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n')])])]),n("p",[e._v("其中，字段"),n("code",[e._v("s")]),e._v("和"),n("code",[e._v("i")]),e._v("只在第二个构造器中初始化，不关默认构造器的事。这意味着假如不在"),n("code",[e._v("readExternal")]),e._v("中初始化"),n("code",[e._v("s")]),e._v("和"),n("code",[e._v("i")]),e._v("，它们就会成为"),n("code",[e._v("null")]),e._v("（因为在对象创建的第一步中已将对象的存储空间清除为1）。若注释掉跟随于"),n("code",[e._v('"You must do this"')]),e._v("后面的两行代码，并运行程序，就会发现当对象恢复以后，"),n("code",[e._v("s")]),e._v("是"),n("code",[e._v("null")]),e._v("，而"),n("code",[e._v("i")]),e._v("是零。")]),e._v(" "),n("p",[e._v("若从一个"),n("code",[e._v("Externalizable")]),e._v("对象继承，通常需要调用"),n("code",[e._v("writeExternal()")]),e._v("和"),n("code",[e._v("readExternal()")]),e._v("的基类版本，以便正确地保存和恢复基类组件。")]),e._v(" "),n("p",[e._v("所以为了让一切正常运作起来，千万不可仅在writeExternal()方法执行期间写入对象的重要数据（没有默认的行为可用来为一个"),n("code",[e._v("Externalizable")]),e._v("对象写入所有成员对象）的，而是必须在"),n("code",[e._v("readExternal()")]),e._v("方法中也恢复那些数据。初次操作时可能会有些不习惯，因为"),n("code",[e._v("Externalizable")]),e._v("对象的默认构建行为使其看起来似乎正在进行某种存储与恢复操作。但实情并非如此。")]),e._v(" "),n("p",[e._v("(1) "),n("code",[e._v("transient")]),e._v("（临时）关键字")]),e._v(" "),n("p",[e._v("控制序列化过程时，可能有一个特定的子对象不愿让Java的序列化机制自动保存与恢复。一般地，若那个子对象包含了不想序列化的敏感信息（如密码），就会面临这种情况。即使那种信息在对象中具有"),n("code",[e._v("private")]),e._v("（私有）属性，但一旦经序列化处理，人们就可以通过读取一个文件，或者拦截网络传输得到它。")]),e._v(" "),n("p",[e._v("为防止对象的敏感部分被序列化，一个办法是将自己的类实现为"),n("code",[e._v("Externalizable")]),e._v("，就象前面展示的那样。这样一来，没有任何东西可以自动序列化，只能在"),n("code",[e._v("writeExternal()")]),e._v("明确序列化那些需要的部分。")]),e._v(" "),n("p",[e._v("然而，若操作的是一个"),n("code",[e._v("Serializable")]),e._v("对象，所有序列化操作都会自动进行。为解决这个问题，可以用"),n("code",[e._v("transient")]),e._v("（临时）逐个字段地关闭序列化，它的意思是“不要麻烦你（指自动机制）保存或恢复它了——我会自己处理的”。")]),e._v(" "),n("p",[e._v("例如，假设一个"),n("code",[e._v("Login")]),e._v("对象包含了与一个特定的登录会话有关的信息。校验登录的合法性时，一般都想将数据保存下来，但不包括密码。为做到这一点，最简单的办法是实现"),n("code",[e._v("Serializable")]),e._v("，并将"),n("code",[e._v("password")]),e._v("字段设为"),n("code",[e._v("transient")]),e._v("。下面是具体的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: Logon.java\n// Demonstrates the "transient" keyword\nimport java.io.*;\nimport java.util.*;\n\nclass Logon implements Serializable {\n  private Date date = new Date();\n  private String username;\n  private transient String password;\n  Logon(String name, String pwd) {\n    username = name;\n    password = pwd;\n  }\n  public String toString() {\n    String pwd =\n      (password == null) ? "(n/a)" : password;\n    return "logon info: \\n   " +\n      "username: " + username +\n      "\\n   date: " + date.toString() +\n      "\\n   password: " + pwd;\n  }\n  public static void main(String[] args) {\n    Logon a = new Logon("Hulk", "myLittlePony");\n    System.out.println( "logon a = " + a);\n    try {\n      ObjectOutputStream o =\n        new ObjectOutputStream(\n          new FileOutputStream("Logon.out"));\n      o.writeObject(a);\n      o.close();\n      // Delay:\n      int seconds = 5;\n      long t = System.currentTimeMillis()\n             + seconds * 1000;\n      while(System.currentTimeMillis() < t)\n        ;\n      // Now get them back:\n      ObjectInputStream in =\n        new ObjectInputStream(\n          new FileInputStream("Logon.out"));\n      System.out.println(\n        "Recovering object at " + new Date());\n      a = (Logon)in.readObject();\n      System.out.println( "logon a = " + a);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n\n')])])]),n("p",[e._v("可以看到，其中的"),n("code",[e._v("date")]),e._v("和"),n("code",[e._v("username")]),e._v("字段保持原始状态（未设成"),n("code",[e._v("transient")]),e._v("），所以会自动序列化。然而，"),n("code",[e._v("password")]),e._v("被设为"),n("code",[e._v("transient")]),e._v("，所以不会自动保存到磁盘；另外，自动序列化机制也不会作恢复它的尝试。输出如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("logon a = logon info:\n   username: Hulk\n   date: Sun Mar 23 18:25:53 PST 1997\n   password: myLittlePony\nRecovering object at Sun Mar 23 18:25:59 PST 1997\nlogon a = logon info:\n   username: Hulk\n   date: Sun Mar 23 18:25:53 PST 1997\n   password: (n/a)\n")])])]),n("p",[e._v("一旦对象恢复成原来的样子，"),n("code",[e._v("password")]),e._v("字段就会变成"),n("code",[e._v("null")]),e._v("。注意必须用"),n("code",[e._v("toString()")]),e._v("检查"),n("code",[e._v("password")]),e._v("是否为"),n("code",[e._v("null")]),e._v("，因为若用重载的"),n("code",[e._v("+")]),e._v("运算符来装配一个"),n("code",[e._v("String")]),e._v("对象，而且那个运算符遇到一个"),n("code",[e._v("null")]),e._v("引用，就会造成一个名为"),n("code",[e._v("NullPointerException")]),e._v("的异常（新版Java可能会提供避免这个问题的代码）。")]),e._v(" "),n("p",[e._v("我们也发现"),n("code",[e._v("date")]),e._v("字段被保存到磁盘，并从磁盘恢复，没有重新生成。")]),e._v(" "),n("p",[e._v("由于"),n("code",[e._v("Externalizable")]),e._v("对象默认时不保存它的任何字段，所以"),n("code",[e._v("transient")]),e._v("关键字只能伴随"),n("code",[e._v("Serializable")]),e._v("使用。")]),e._v(" "),n("p",[e._v("(2) "),n("code",[e._v("Externalizable")]),e._v("的替代方法")]),e._v(" "),n("p",[e._v("若不是特别在意要实现"),n("code",[e._v("Externalizable")]),e._v("接口，还有另一种方法可供选用。我们可以实现"),n("code",[e._v("Serializable")]),e._v("接口，并添加（注意是“添加”，而非“覆盖”或者“实现”）名为"),n("code",[e._v("writeObject()")]),e._v("和"),n("code",[e._v("readObject()")]),e._v("的方法。一旦对象被序列化或者重新装配，就会分别调用那两个方法。也就是说，只要提供了这两个方法，就会优先使用它们，而不考虑默认的序列化机制。\n这些方法必须含有下列准确的签名：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void\n  writeObject(ObjectOutputStream stream)\n    throws IOException;\n\nprivate void\n  readObject(ObjectInputStream stream)\n    throws IOException, ClassNotFoundException\n")])])]),n("p",[e._v("从设计的角度出发，情况变得有些扑朔迷离。首先，大家可能认为这些方法不属于基类或者"),n("code",[e._v("Serializable")]),e._v("接口的一部分，它们应该在自己的接口中得到定义。但请注意它们被定义成"),n("code",[e._v("private")]),e._v("，这意味着它们只能由这个类的其他成员调用。然而，我们实际并不从这个类的其他成员中调用它们，而是由"),n("code",[e._v("ObjectOutputStream")]),e._v("和"),n("code",[e._v("ObjectInputStream")]),e._v("的"),n("code",[e._v("writeObject()")]),e._v("及"),n("code",[e._v("readObject()")]),e._v("方法来调用我们对象的"),n("code",[e._v("writeObject()")]),e._v("和"),n("code",[e._v("readObject()")]),e._v("方法（注意我在这里用了很大的抑制力来避免使用相同的方法名——因为怕混淆）。大家可能奇怪"),n("code",[e._v("ObjectOutputStream")]),e._v("和"),n("code",[e._v("ObjectInputStream")]),e._v("如何有权访问我们的类的"),n("code",[e._v("private")]),e._v("方法——只能认为这是序列化机制玩的一个把戏。")]),e._v(" "),n("p",[e._v("在任何情况下，接口中的定义的任何东西都会自动具有"),n("code",[e._v("public")]),e._v("属性，所以假若"),n("code",[e._v("writeObject()")]),e._v("和"),n("code",[e._v("readObject()")]),e._v("必须为"),n("code",[e._v("private")]),e._v("，那么它们不能成为接口（"),n("code",[e._v("interface")]),e._v("）的一部分。但由于我们准确地加上了签名，所以最终的效果实际与实现一个接口是相同的。")]),e._v(" "),n("p",[e._v("看起来似乎我们调用"),n("code",[e._v("ObjectOutputStream.writeObject()")]),e._v("的时候，我们传递给它的"),n("code",[e._v("Serializable")]),e._v("对象似乎会被检查是否实现了自己的"),n("code",[e._v("writeObject()")]),e._v("。若答案是肯定的是，便会跳过常规的序列化过程，并调用"),n("code",[e._v("writeObject()")]),e._v("。"),n("code",[e._v("readObject()")]),e._v("也会遇到同样的情况。")]),e._v(" "),n("p",[e._v("还存在另一个问题。在我们的"),n("code",[e._v("writeObject()")]),e._v("内部，可以调用"),n("code",[e._v("defaultWriteObject()")]),e._v("，从而决定采取默认的"),n("code",[e._v("writeObject()")]),e._v("行动。类似地，在"),n("code",[e._v("readObject()")]),e._v("内部，可以调用"),n("code",[e._v("defaultReadObject()")]),e._v("。下面这个简单的例子演示了如何对一个"),n("code",[e._v("Serializable")]),e._v("对象的存储与恢复进行控制：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: SerialCtl.java\n// Controlling serialization by adding your own\n// writeObject() and readObject() methods.\nimport java.io.*;\n\npublic class SerialCtl implements Serializable {\n  String a;\n  transient String b;\n  public SerialCtl(String aa, String bb) {\n    a = "Not Transient: " + aa;\n    b = "Transient: " + bb;\n  }\n  public String toString() {\n    return a + "\\n" + b;\n  }\n  private void\n    writeObject(ObjectOutputStream stream)\n      throws IOException {\n    stream.defaultWriteObject();\n    stream.writeObject(b);\n  }\n  private void\n    readObject(ObjectInputStream stream)\n      throws IOException, ClassNotFoundException {\n    stream.defaultReadObject();\n    b = (String)stream.readObject();\n  }\n  public static void main(String[] args) {\n    SerialCtl sc =\n      new SerialCtl("Test1", "Test2");\n    System.out.println("Before:\\n" + sc);\n    ByteArrayOutputStream buf =\n      new ByteArrayOutputStream();\n    try {\n      ObjectOutputStream o =\n        new ObjectOutputStream(buf);\n      o.writeObject(sc);\n      // Now get it back:\n      ObjectInputStream in =\n        new ObjectInputStream(\n          new ByteArrayInputStream(\n            buf.toByteArray()));\n      SerialCtl sc2 = (SerialCtl)in.readObject();\n      System.out.println("After:\\n" + sc2);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n\n')])])]),n("p",[e._v("在这个例子中，一个"),n("code",[e._v("String")]),e._v("保持原始状态，其他设为"),n("code",[e._v("transient")]),e._v("（临时），以便证明非临时字段会被"),n("code",[e._v("defaultWriteObject()")]),e._v("方法自动保存，而"),n("code",[e._v("transient")]),e._v("字段必须在程序中明确保存和恢复。字段是在构造器内部初始化的，而不是在定义的时候，这证明了它们不会在重新装配的时候被某些自动化机制初始化。")]),e._v(" "),n("p",[e._v("若准备通过默认机制写入对象的非"),n("code",[e._v("transient")]),e._v("部分，那么必须调用"),n("code",[e._v("defaultWriteObject()")]),e._v("，令其作为"),n("code",[e._v("writeObject()")]),e._v("中的第一个操作；并调用"),n("code",[e._v("defaultReadObject()")]),e._v("，令其作为"),n("code",[e._v("readObject()")]),e._v("的第一个操作。这些都是不常见的调用方法。举个例子来说，当我们为一个"),n("code",[e._v("ObjectOutputStream")]),e._v("调用"),n("code",[e._v("defaultWriteObject()")]),e._v("的时候，而且没有为其传递参数，就需要采取这种操作，使其知道对象的引用以及如何写入所有非"),n("code",[e._v("transient")]),e._v("的部分。这种做法非常不便。")]),e._v(" "),n("p",[n("code",[e._v("transient")]),e._v("对象的存储与恢复采用了我们更熟悉的代码。现在考虑一下会发生一些什么事情。在"),n("code",[e._v("main()")]),e._v("中会创建一个"),n("code",[e._v("SerialCtl")]),e._v("对象，随后会序列化到一个"),n("code",[e._v("ObjectOutputStream")]),e._v("里（注意这种情况下使用的是一个缓冲区，而非文件——与"),n("code",[e._v("ObjectOutputStream")]),e._v("完全一致）。正式的序列化操作是在下面这行代码里发生的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("o.writeObject(sc);\n")])])]),n("p",[e._v("其中，"),n("code",[e._v("writeObject()")]),e._v("方法必须核查"),n("code",[e._v("sc")]),e._v("，判断它是否有自己的"),n("code",[e._v("writeObject()")]),e._v("方法（不是检查它的接口——它根本就没有，也不是检查类的类型，而是利用反射方法实际搜索方法）。若答案是肯定的，就使用那个方法。类似的情况也会在"),n("code",[e._v("readObject()")]),e._v("上发生。或许这是解决问题唯一实际的方法，但确实显得有些古怪。")]),e._v(" "),n("p",[e._v("(3) 版本问题")]),e._v(" "),n("p",[e._v("有时候可能想改变一个可序列化的类的版本（比如原始类的对象可能保存在数据库中）。尽管这种做法得到了支持，但一般只应在非常特殊的情况下才用它。此外，它要求操作者对背后的原理有一个比较深的认识，而我们在这里还不想达到这种深度。JDK 1.1的HTML文档对这一主题进行了非常全面的论述（可从Sun公司下载，但可能也成了Java开发包联机文档的一部分）。")]),e._v(" "),n("h2",{attrs:{id:"_10-9-3-利用-持久性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-9-3-利用-持久性"}},[e._v("#")]),e._v(" 10.9.3 利用“持久性”")]),e._v(" "),n("p",[e._v("一个比较诱人的想法是用序列化技术保存程序的一些状态信息，从而将程序方便地恢复到以前的状态。但在具体实现以前，有些问题是必须解决的。如果两个对象都有指向第三个对象的引用，该如何对这两个对象序列化呢？如果从两个对象序列化后的状态恢复它们，第三个对象的引用只会出现在一个对象身上吗？如果将这两个对象序列化成独立的文件，然后在代码的不同部分重新装配它们，又会得到什么结果呢？")]),e._v(" "),n("p",[e._v("下面这个例子对上述问题进行了很好的说明：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: MyWorld.java\nimport java.io.*;\nimport java.util.*;\n\nclass House implements Serializable {}\n\nclass Animal implements Serializable {\n  String name;\n  House preferredHouse;\n  Animal(String nm, House h) {\n    name = nm;\n    preferredHouse = h;\n  }\n  public String toString() {\n    return name + "[" + super.toString() +\n      "], " + preferredHouse + "\\n";\n  }\n}\n\npublic class MyWorld {\n  public static void main(String[] args) {\n    House house = new House();\n    Vector  animals = new Vector();\n    animals.addElement(\n      new Animal("Bosco the dog", house));\n    animals.addElement(\n      new Animal("Ralph the hamster", house));\n    animals.addElement(\n      new Animal("Fronk the cat", house));\n    System.out.println("animals: " + animals);\n\n    try {\n      ByteArrayOutputStream buf1 =\n        new ByteArrayOutputStream();\n      ObjectOutputStream o1 =\n        new ObjectOutputStream(buf1);\n      o1.writeObject(animals);\n      o1.writeObject(animals); // Write a 2nd set\n      // Write to a different stream:\n      ByteArrayOutputStream buf2 =\n        new ByteArrayOutputStream();\n      ObjectOutputStream o2 =\n        new ObjectOutputStream(buf2);\n      o2.writeObject(animals);\n      // Now get them back:\n      ObjectInputStream in1 =\n        new ObjectInputStream(\n          new ByteArrayInputStream(\n            buf1.toByteArray()));\n      ObjectInputStream in2 =\n        new ObjectInputStream(\n          new ByteArrayInputStream(\n            buf2.toByteArray()));\n      Vector animals1 = (Vector)in1.readObject();\n      Vector animals2 = (Vector)in1.readObject();\n      Vector animals3 = (Vector)in2.readObject();\n      System.out.println("animals1: " + animals1);\n      System.out.println("animals2: " + animals2);\n      System.out.println("animals3: " + animals3);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n')])])]),n("p",[e._v("这里一件有趣的事情是也许是能针对一个字节数组应用对象的序列化，从而实现对任何"),n("code",[e._v("Serializable")]),e._v("（可序列化）对象的一个“全面复制”（全面复制意味着复制的是整个对象网，而不仅是基本对象和它的引用）。复制问题将在第12章进行全面讲述。")]),e._v(" "),n("p",[n("code",[e._v("Animal")]),e._v("对象包含了类型为"),n("code",[e._v("House")]),e._v("的字段。在"),n("code",[e._v("main()")]),e._v("中，会创建这些"),n("code",[e._v("Animal")]),e._v("的一个"),n("code",[e._v("Vector")]),e._v("，并对其序列化两次，分别送入两个不同的数据流内。这些数据重新装配并打印出来后，可看到下面这样的结果（对象在每次运行时都会处在不同的内存位置，所以每次运行的结果有区别）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("animals: [Bosco the dog[Animal@1cc76c], House@1cc769\n, Ralph the hamster[Animal@1cc76d], House@1cc769\n, Fronk the cat[Animal@1cc76e], House@1cc769\n]\nanimals1: [Bosco the dog[Animal@1cca0c], House@1cca16\n, Ralph the hamster[Animal@1cca17], House@1cca16\n, Fronk the cat[Animal@1cca1b], House@1cca16\n]\nanimals2: [Bosco the dog[Animal@1cca0c], House@1cca16\n, Ralph the hamster[Animal@1cca17], House@1cca16\n, Fronk the cat[Animal@1cca1b], House@1cca16\n]\nanimals3: [Bosco the dog[Animal@1cca52], House@1cca5c\n, Ralph the hamster[Animal@1cca5d], House@1cca5c\n, Fronk the cat[Animal@1cca61], House@1cca5c\n]\n\n")])])]),n("p",[e._v("当然，我们希望装配好的对象有与原来不同的地址。但注意在"),n("code",[e._v("animals1")]),e._v("和"),n("code",[e._v("animals2")]),e._v("中出现了相同的地址，其中包括共享的、对"),n("code",[e._v("House")]),e._v("对象的引用。在另一方面，当"),n("code",[e._v("animals3")]),e._v("恢复以后，系统没有办法知道另一个流内的对象是第一个流内对象的化身，所以会产生一个完全不同的对象网。")]),e._v(" "),n("p",[e._v("只要将所有东西都序列化到单独一个数据流里，就能恢复获得与以前写入时完全一样的对象网，不会不慎造成对象的重复。当然，在写第一个和最后一个对象的时间之间，可改变对象的状态，但那必须由我们明确采取操作——序列化时，对象会采用它们当时的任何状态（包括它们与其他对象的连接关系）写入。")]),e._v(" "),n("p",[e._v("若想保存系统状态，最安全的做法是当作一种“微观”操作序列化。如果序列化了某些东西，再去做其他一些工作，再来序列化更多的东西，以此类推，那么最终将无法安全地保存系统状态。相反，应将构成系统状态的所有对象都置入单个集合内，并在一次操作里完成那个集合的写入。这样一来，同样只需一次方法调用，即可成功恢复之。")]),e._v(" "),n("p",[e._v("下面这个例子是一套假想的计算机辅助设计（CAD）系统，对这一方法进行了很好的演示。此外，它还为我们引入了"),n("code",[e._v("static")]),e._v("字段的问题——如留意联机文档，就会发现"),n("code",[e._v("Class")]),e._v("是"),n("code",[e._v("Serializable")]),e._v("（可序列化）的，所以只需简单地序列化"),n("code",[e._v("Class")]),e._v("对象，就能实现"),n("code",[e._v("static")]),e._v("字段的保存。这无论如何都是一种明智的做法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: CADState.java\n// Saving and restoring the state of a\n// pretend CAD system.\nimport java.io.*;\nimport java.util.*;\n\nabstract class Shape implements Serializable {\n  public static final int\n    RED = 1, BLUE = 2, GREEN = 3;\n  private int xPos, yPos, dimension;\n  private static Random r = new Random();\n  private static int counter = 0;\n  abstract public void setColor(int newColor);\n  abstract public int getColor();\n  public Shape(int xVal, int yVal, int dim) {\n    xPos = xVal;\n    yPos = yVal;\n    dimension = dim;\n  }\n  public String toString() {\n    return getClass().toString() +\n      " color[" + getColor() +\n      "] xPos[" + xPos +\n      "] yPos[" + yPos +\n      "] dim[" + dimension + "]\\n";\n  }\n  public static Shape randomFactory() {\n    int xVal = r.nextInt() % 100;\n    int yVal = r.nextInt() % 100;\n    int dim = r.nextInt() % 100;\n    switch(counter++ % 3) {\n      default:\n      case 0: return new Circle(xVal, yVal, dim);\n      case 1: return new Square(xVal, yVal, dim);\n      case 2: return new Line(xVal, yVal, dim);\n    }\n  }\n}\n\nclass Circle extends Shape {\n  private static int color = RED;\n  public Circle(int xVal, int yVal, int dim) {\n    super(xVal, yVal, dim);\n  }\n  public void setColor(int newColor) {\n    color = newColor;\n  }\n  public int getColor() {\n    return color;\n  }\n}\n\nclass Square extends Shape {\n  private static int color;\n  public Square(int xVal, int yVal, int dim) {\n    super(xVal, yVal, dim);\n    color = RED;\n  }\n  public void setColor(int newColor) {\n    color = newColor;\n  }\n  public int getColor() {\n    return color;\n  }\n}\n\nclass Line extends Shape {\n  private static int color = RED;\n  public static void\n  serializeStaticState(ObjectOutputStream os)\n      throws IOException {\n    os.writeInt(color);\n  }\n  public static void\n  deserializeStaticState(ObjectInputStream os)\n      throws IOException {\n    color = os.readInt();\n  }\n  public Line(int xVal, int yVal, int dim) {\n    super(xVal, yVal, dim);\n  }\n  public void setColor(int newColor) {\n    color = newColor;\n  }\n  public int getColor() {\n    return color;\n  }\n}\n\npublic class CADState {\n  public static void main(String[] args)\n      throws Exception {\n    Vector shapeTypes, shapes;\n    if(args.length == 0) {\n      shapeTypes = new Vector();\n      shapes = new Vector();\n      // Add handles to the class objects:\n      shapeTypes.addElement(Circle.class);\n      shapeTypes.addElement(Square.class);\n      shapeTypes.addElement(Line.class);\n      // Make some shapes:\n      for(int i = 0; i < 10; i++)\n        shapes.addElement(Shape.randomFactory());\n      // Set all the static colors to GREEN:\n      for(int i = 0; i < 10; i++)\n        ((Shape)shapes.elementAt(i))\n          .setColor(Shape.GREEN);\n      // Save the state vector:\n      ObjectOutputStream out =\n        new ObjectOutputStream(\n          new FileOutputStream("CADState.out"));\n      out.writeObject(shapeTypes);\n      Line.serializeStaticState(out);\n      out.writeObject(shapes);\n    } else { // There\'s a command-line argument\n      ObjectInputStream in =\n        new ObjectInputStream(\n          new FileInputStream(args[0]));\n      // Read in the same order they were written:\n      shapeTypes = (Vector)in.readObject();\n      Line.deserializeStaticState(in);\n      shapes = (Vector)in.readObject();\n    }\n    // Display the shapes:\n    System.out.println(shapes);\n  }\n} ///:~\n')])])]),n("p",[n("code",[e._v("Shape")]),e._v("（几何形状）类“实现了可序列化”（"),n("code",[e._v("implements Serializable")]),e._v("），所以从"),n("code",[e._v("Shape")]),e._v("继承的任何东西也都会自动“可序列化”。每个"),n("code",[e._v("Shape")]),e._v("都包含了数据，而且每个派生的"),n("code",[e._v("Shape")]),e._v("类都包含了一个特殊的"),n("code",[e._v("static")]),e._v("字段，用于决定所有那些类型的"),n("code",[e._v("Shape")]),e._v("的颜色（如将一个"),n("code",[e._v("static")]),e._v("字段置入基类，结果只会产生一个字段，因为"),n("code",[e._v("static")]),e._v("字段未在派生类中复制）。可对基类中的方法进行覆盖处理，以便为不同的类型设置颜色（"),n("code",[e._v("static")]),e._v("方法不会动态绑定，所以这些都是普通的方法）。每次调用"),n("code",[e._v("randomFactory()")]),e._v("方法时，它都会创建一个不同的"),n("code",[e._v("Shape")]),e._v("（"),n("code",[e._v("Shape")]),e._v("值采用随机值）。")]),e._v(" "),n("p",[n("code",[e._v("Circle")]),e._v("（圆）和"),n("code",[e._v("Square")]),e._v("（矩形）属于对"),n("code",[e._v("Shape")]),e._v("的直接扩展；唯一的差别是"),n("code",[e._v("Circle")]),e._v("在定义时会初始化颜色，而"),n("code",[e._v("Square")]),e._v("在构造器中初始化。"),n("code",[e._v("Line")]),e._v("（直线）的问题将留到以后讨论。")]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("main()")]),e._v("中，一个"),n("code",[e._v("Vector")]),e._v("用于容纳"),n("code",[e._v("Class")]),e._v("对象，而另一个用于容纳形状。若不提供相应的命令行参数，就会创建"),n("code",[e._v("shapeTypes Vector")]),e._v("，并添加"),n("code",[e._v("Class")]),e._v("对象。然后创建"),n("code",[e._v("shapes Vector")]),e._v("，并添加"),n("code",[e._v("Shape")]),e._v("对象。接下来，所有"),n("code",[e._v("static color")]),e._v("值都会设成"),n("code",[e._v("GREEN")]),e._v("，而且所有东西都会序列化到文件"),n("code",[e._v("CADState.out")]),e._v("。")]),e._v(" "),n("p",[e._v("若提供了一个命令行参数（假设"),n("code",[e._v("CADState.out")]),e._v("），便会打开那个文件，并用它恢复程序的状态。无论在哪种情况下，结果产生的"),n("code",[e._v("Shape")]),e._v("的"),n("code",[e._v("Vector")]),e._v("都会打印出来。下面列出它某一次运行的结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(">java CADState\n[class Circle color[3] xPos[-51] yPos[-99] dim[38]\n, class Square color[3] xPos[2] yPos[61] dim[-46]\n, class Line color[3] xPos[51] yPos[73] dim[64]\n, class Circle color[3] xPos[-70] yPos[1] dim[16]\n, class Square color[3] xPos[3] yPos[94] dim[-36]\n, class Line color[3] xPos[-84] yPos[-21] dim[-35]\n, class Circle color[3] xPos[-75] yPos[-43] dim[22]\n, class Square color[3] xPos[81] yPos[30] dim[-45]\n, class Line color[3] xPos[-29] yPos[92] dim[17]\n, class Circle color[3] xPos[17] yPos[90] dim[-76]\n]\n\n>java CADState CADState.out\n[class Circle color[1] xPos[-51] yPos[-99] dim[38]\n, class Square color[0] xPos[2] yPos[61] dim[-46]\n, class Line color[3] xPos[51] yPos[73] dim[64]\n, class Circle color[1] xPos[-70] yPos[1] dim[16]\n, class Square color[0] xPos[3] yPos[94] dim[-36]\n, class Line color[3] xPos[-84] yPos[-21] dim[-35]\n, class Circle color[1] xPos[-75] yPos[-43] dim[22]\n, class Square color[0] xPos[81] yPos[30] dim[-45]\n, class Line color[3] xPos[-29] yPos[92] dim[17]\n, class Circle color[1] xPos[17] yPos[90] dim[-76]\n]\n\n")])])]),n("p",[e._v("从中可以看出，"),n("code",[e._v("xPos")]),e._v("，"),n("code",[e._v("yPos")]),e._v("以及"),n("code",[e._v("dim")]),e._v("的值都已成功保存和恢复出来。但在获取"),n("code",[e._v("static")]),e._v("信息时却出现了问题。所有“3”都已进入，但没有正常地出来。"),n("code",[e._v("Circle")]),e._v("有一个1值（定义为"),n("code",[e._v("RED")]),e._v("），而"),n("code",[e._v("Square")]),e._v("有一个0值（记住，它们是在构造器里初始化的）。看上去似乎"),n("code",[e._v("static")]),e._v("根本没有得到初始化！实情正是如此——尽管类"),n("code",[e._v("Class")]),e._v("是“可以序列化的”，但却不能按我们希望的工作。所以假如想序列化"),n("code",[e._v("static")]),e._v("值，必须亲自动手。")]),e._v(" "),n("p",[e._v("这正是"),n("code",[e._v("Line")]),e._v("中的"),n("code",[e._v("serializeStaticState()")]),e._v("和"),n("code",[e._v("deserializeStaticState()")]),e._v("两个"),n("code",[e._v("static")]),e._v("方法的用途。可以看到，这两个方法都是作为存储和恢复进程的一部分明确调用的（注意写入序列化文件和从中读回的顺序不能改变）。所以为了使"),n("code",[e._v("CADState.java")]),e._v("正确运行起来，必须采用下述三种方法之一：")]),e._v(" "),n("p",[e._v("(1) 为几何形状添加一个"),n("code",[e._v("serializeStaticState()")]),e._v("和"),n("code",[e._v("deserializeStaticState()")]),e._v("。")]),e._v(" "),n("p",[e._v("(2) 删除"),n("code",[e._v("Vector shapeTypes")]),e._v("以及与之有关的所有代码")]),e._v(" "),n("p",[e._v("(3) 在几何形状内添加对新序列化和撤消序列化静态方法的调用")]),e._v(" "),n("p",[e._v("要注意的另一个问题是安全，因为序列化处理也会将"),n("code",[e._v("private")]),e._v("数据保存下来。若有需要保密的字段，应将其标记成"),n("code",[e._v("transient")]),e._v("。但在这之后，必须设计一种安全的信息保存方法。这样一来，一旦需要恢复，就可以重设那些"),n("code",[e._v("private")]),e._v("变量。")])])}),[],!1,null,null,null);t.default=r.exports}}]);