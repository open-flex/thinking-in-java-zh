(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{483:function(e,t,a){"use strict";a.r(t);var n=a(56),v=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_15-7-用jdbc连接数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-7-用jdbc连接数据库"}},[e._v("#")]),e._v(" 15.7 用JDBC连接数据库")]),e._v(" "),a("p",[e._v("据估算，将近一半的软件开发都要涉及客户（机）／服务器方面的操作。Java为自己保证的一项出色能力就是构建与平台无关的客户端／服务器数据库应用。在Java 1.1中，这一保证通过Java数据库连接（JDBC）实现了。")]),e._v(" "),a("p",[e._v("数据库最主要的一个问题就是各家公司之间的规格大战。确实存在一种“标准”数据库语言，即“结构查询语言”（SQL-92），但通常都必须确切知道自己要和哪家数据库公司打交道，否则极易出问题，尽管存在所谓的“标准”。JDBC是面向“与平台无关”设计的，所以在编程的时候不必关心自己要使用的是什么数据库产品。然而，从JDBC里仍有可能发出对某些数据库公司专用功能的调用，所以仍然不可任性妄为。")]),e._v(" "),a("p",[e._v("和Java中的许多API一样，JDBC也做到了尽量的简化。我们发出的方法调用对应于从数据库收集数据时想当然的做法：同数据库连接，创建一个语句并执行查询，然后处理结果集。")]),e._v(" "),a("p",[e._v("为实现这一“与平台无关”的特点，JDBC为我们提供了一个“驱动程序管理器”，它能动态维护数据库查询所需的所有驱动程序对象。所以假如要连接由三家公司开发的不同种类的数据库，就需要三个单独的驱动程序对象。驱动程序对象会在装载时由“驱动程序管理器”自动注册，并可用"),a("code",[e._v("Class.forName()")]),e._v("强行装载。")]),e._v(" "),a("p",[e._v("为打开一个数据库，必须创建一个“数据库URL”，它要指定下述三方面的内容：")]),e._v(" "),a("p",[e._v("(1) 用"),a("code",[e._v("jdbc")]),e._v("指出要使用JDBC。")]),e._v(" "),a("p",[e._v("(2) “子协议”：驱动程序的名字或者一种数据库连接机制的名称。由于JDBC的设计从ODBC吸收了许多灵感，所以可以选用的第一种子协议就是“jdbc-odbc桥”，它用"),a("code",[e._v("odbc")]),e._v("关键字即可指定。")]),e._v(" "),a("p",[e._v("(3) 数据库标识符：随使用的数据库驱动程序的不同而变化，但一般都提供了一个比较符合逻辑的名称，由数据库管理软件映射（对应）到保存了数据表的一个物理目录。为使自己的数据库标识符具有任何含义，必须用自己的数据库管理软件为自己喜欢的名字注册（注册的具体过程又随运行平台的不同而变化）。")]),e._v(" "),a("p",[e._v("所有这些信息都统一编译到一个字符串里，即“数据库URL”。举个例子来说，若想通过ODBC子协议同一个标识为"),a("code",[e._v("people")]),e._v("的数据库连接，相应的数据库URL可设为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('String dbUrl = "jdbc:odbc:people"\n')])])]),a("p",[e._v("如果通过一个网络连接，数据库URL也需要包含对远程机器进行标识的信息。")]),e._v(" "),a("p",[e._v("准备好同数据库连接后，可调用静态方法"),a("code",[e._v("DriverManager.getConnection()")]),e._v("，将数据库的URL以及进入那个数据库所需的用户名密码传递给它。得到的返回结果是一个"),a("code",[e._v("Connection")]),e._v("对象，利用它即可查询和操纵数据库。")]),e._v(" "),a("p",[e._v("下面这个例子将打开一个联络信息数据库，并根据命令行提供的参数查询一个人的姓（Last Name）。它只选择那些有E-mail地址的人的名字，然后列印出符合查询条件的所有人：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Lookup.java\n// Looks up email addresses in a\n// local database using JDBC\nimport java.sql.*;\n\npublic class Lookup {\n  public static void main(String[] args) {\n    String dbUrl = "jdbc:odbc:people";\n    String user = "";\n    String password = "";\n    try {\n      // Load the driver (registers itself)\n      Class.forName(\n        "sun.jdbc.odbc.JdbcOdbcDriver");\n      Connection c = DriverManager.getConnection(\n        dbUrl, user, password);\n      Statement s = c.createStatement();\n      // SQL code:\n      ResultSet r =\n        s.executeQuery(\n          "SELECT FIRST, LAST, EMAIL " +\n          "FROM people.csv people " +\n          "WHERE " +\n          "(LAST=\'" + args[0] + "\') " +\n          " AND (EMAIL Is Not Null) " +\n          "ORDER BY FIRST");\n      while(r.next()) {\n        // Capitalization doesn\'t matter:\n        System.out.println(\n          r.getString("Last") + ", "\n          + r.getString("fIRST")\n          + ": " + r.getString("EMAIL") );\n      }\n      s.close(); // Also closes ResultSet\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n')])])]),a("p",[e._v("可以看到，数据库URL的创建过程与我们前面讲述的完全一样。在该例中，数据库未设密码保护，所以用户名和密码都是空串。")]),e._v(" "),a("p",[e._v("用"),a("code",[e._v("DriverManager.getConnection()")]),e._v("建好连接后，接下来可根据结果"),a("code",[e._v("Connection")]),e._v("对象创建一个"),a("code",[e._v("Statement")]),e._v("（语句）对象，这是用"),a("code",[e._v("createStatement()")]),e._v("方法实现的。根据结果"),a("code",[e._v("Statement")]),e._v("，我们可调用"),a("code",[e._v("executeQuery()")]),e._v("，向其传递包含了SQL-92标准SQL语句的一个字符串（不久就会看到如何自动创建这类语句，所以没必要在这里知道关于SQL更多的东西）。")]),e._v(" "),a("p",[a("code",[e._v("executeQuery()")]),e._v("方法会返回一个"),a("code",[e._v("ResultSet")]),e._v("（结果集）对象，它与迭代器非常相似："),a("code",[e._v("next()")]),e._v("方法将迭代器移至语句中的下一条记录；如果已抵达结果集的末尾，则返回"),a("code",[e._v("null")]),e._v("。我们肯定能从"),a("code",[e._v("executeQuery()")]),e._v("返回一个"),a("code",[e._v("ResultSet")]),e._v("对象，即使查询结果是个空集（也就是说，不会产生一个异常）。注意在试图读取任何记录数据之前，都必须调用一次"),a("code",[e._v("next()")]),e._v("。若结果集为空，那么对"),a("code",[e._v("next()")]),e._v("的这个首次调用就会返回"),a("code",[e._v("false")]),e._v("。对于结果集中的每条记录，都可将字段名作为字符串使用（当然还有其他方法），从而选择不同的字段。另外要注意的是字段名的大小写是无关紧要的——SQL数据库不在乎这个问题。为决定返回的类型，可调用"),a("code",[e._v("getString()")]),e._v("，"),a("code",[e._v("getFloat()")]),e._v("等等。到这个时候，我们已经用Java的原始格式得到了自己的数据库数据，接下去可用Java代码做自己想做的任何事情了。")]),e._v(" "),a("h2",{attrs:{id:"_15-7-1-让示例运行起来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-7-1-让示例运行起来"}},[e._v("#")]),e._v(" 15.7.1 让示例运行起来")]),e._v(" "),a("p",[e._v("就JDBC来说，代码本身是很容易理解的。最令人迷惑的部分是如何使它在自己特定的系统上运行起来。之所以会感到迷惑，是由于它要求我们掌握如何才能使JDBC驱动程序正确装载，以及如何用我们的数据库管理软件来设置一个数据库。\n当然，具体的操作过程在不同的机器上也会有所区别。但这儿提供的在32位Windows环境下操作过程可有效帮助大家理解在其他平台上的操作。")]),e._v(" "),a("p",[e._v("(1) 步骤1：寻找JDBC驱动程序")]),e._v(" "),a("p",[e._v("上述程序包含了下面这条语句：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");\n')])])]),a("p",[e._v("这似乎暗示着一个目录结构，但大家不要被它蒙骗了。在我手上这个JDK 1.1安装版本中，根本不存在叫作"),a("code",[e._v("JdbcOdbcDriver.class")]),e._v("的一个文件。所以假如在看了这个例子后去寻找它，那么必然会徒劳而返。另一些人提供的例子使用的是一个假名字，如"),a("code",[e._v("myDriver.ClassName")]),e._v("，但人们从字面上得不到任何帮助。事实上，上述用于装载jdbc-odbc驱动程序（实际是与JDK 1.1配套提供的唯一驱动）的语句在联机文档的多处地方均有出现（特别是在一个标记为“JDBC-ODBC Bridge Driver”的页内）。若上面的装载语句不能工作，那么它的名字可能已随着Java新版本的发布而改变了；此时应到联机文档里寻找新的表述方式。")]),e._v(" "),a("p",[e._v("若装载语句出错，会在这个时候得到一个异常。为了检验驱动程序装载语句是不是能正常工作，请将该语句后面直到"),a("code",[e._v("catch")]),e._v("从句之间的代码暂时设为注释。如果程序运行时未出现异常，表明驱动程序的装载是正确的。")]),e._v(" "),a("p",[e._v("(2) 步骤2：配置数据库")]),e._v(" "),a("p",[e._v("同样地，我们只限于在32位Windows环境中工作；您可能需要研究一下自己的操作系统，找出适合自己平台的配置方法。")]),e._v(" "),a("p",[e._v("首先打开控制面板。其中可能有两个图标都含有“ODBC”字样，必须选择那个“32位ODBC”，因为另一个是为了保持与16位软件的向后兼容而设置的，和JDBC混用没有任何结果。双击“32位ODBC”图标后，看到的应该是一个卡片式对话框，上面一排有多个卡片标签，其中包括“用户DSN”、“系统DSN”、“文件DSN”等等。其中，“DSN”代表“数据源名称”（Data Source Name）。它们都与JDBC-ODBC桥有关，但设置数据库时唯一重要的地方“系统DSN”。尽管如此，由于需要测试自己的配置以及创建查询，所以也需要在“文件DSN”中设置自己的数据库。这样便可让Microsoft Query工具（与Microsoft Office配套提供）正确地找到数据库。注意一些软件公司也设计了自己的查询工具。")]),e._v(" "),a("p",[e._v("最有趣的数据库是我们已经使用过的一个。标准ODBC支持多种文件格式，其中包括由不同公司专用的一些格式，如dBASE。然而，它也包括了简单的“逗号分隔ASCII”格式，它几乎是每种数据工具都能够生成的。就目前的例子来说，我只选择自己的"),a("code",[e._v("people")]),e._v("数据库。这是我多年来一直在维护的一个数据库，中间使用了各种联络管理工具。我把它导出成为一个逗号分隔的ASCII文件（一般有个"),a("code",[e._v(".csv")]),e._v("扩展名，用Outlook Express导出通信簿时亦可选用同样的文件格式）。在“文件DSN”区域，我按下“添加”按钮，选择用于控制逗号分隔ASCII文件的文本驱动程序（Microsoft Text Driver），然后撤消对“使用当前目录”的选择，以便导出数据文件时可以自行指定目录。")]),e._v(" "),a("p",[e._v("大家会注意到在进行这些工作的时候，并没有实际指定一个文件，只是一个目录。那是因为数据库通常是由某个目录下的一系列文件构成的（尽管也可能采用其他形式）。每个文件一般都包含了单个“数据表”，而且SQL语句可以产生从数据库中多个表摘取出来的结果（这叫作“联合”，或者"),a("code",[e._v("join")]),e._v("）只包含了单张表的数据库（就象目前这个）通常叫作“平面文件数据库”。对于大多数问题，如果已经超过了简单的数据存储与获取力所能及的范围，那么必须使用多个数据表。通过“联合”，从而获得希望的结果。我们把这些叫作“关系型”数据库。")]),e._v(" "),a("p",[e._v("(3) 步骤3：测试配置")]),e._v(" "),a("p",[e._v("为了对配置进行测试，需用一种方式核实数据库是否可由查询它的一个程序“见到”。当然，可以简单地运行上述的JDBC示范程序，并加入下述语句：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Connection c = DriverManager.getConnection(\ndbUrl, user, password);\n")])])]),a("p",[e._v("若抛出一个异常，表明你的配置有误。")]),e._v(" "),a("p",[e._v("然而，此时很有必要使用一个自动化的查询生成工具。我使用的是与Microsoft Office配套提供的Microsoft Query，但你完全可以自行选择一个。查询工具必须知道数据库在什么地方，而Microsoft Query要求我进入ODBC Administrator的“文件DSN”卡片，并在那里新添一个条目。同样指定文本驱动程序以及保存数据库的目录。虽然可将这个条目命名为自己喜欢的任何东西，但最好还是使用与“系统DSN”中相同的名字。")]),e._v(" "),a("p",[e._v("做完这些工作后，再用查询工具创建一个新查询时，便会发现自己的数据库可以使用了。")]),e._v(" "),a("p",[e._v("(4) 步骤4：建立自己的SQL查询")]),e._v(" "),a("p",[e._v("我用Microsoft Query创建的查询不仅指出目标数据库存在且次序良好，也会自动生成SQL代码，以便将其插入我自己的Java程序。我希望这个查询能够检查记录中是否存在与启动Java程序时在命令行键入的相同的“姓”（Last Name）。所以作为一个起点，我搜索自己的姓"),a("code",[e._v("Eckel")]),e._v("。另外，我希望只显示出有对应E-mail地址的那些名字。创建这个查询的步骤如下：")]),e._v(" "),a("p",[e._v("(1) 启动一个新查询，并使用查询向导（Query Wizard）。选择"),a("code",[e._v("people")]),e._v("数据库（等价于用适应的数据库URL打开数据库连接）。")]),e._v(" "),a("p",[e._v("(2) 选择数据库中的"),a("code",[e._v("people")]),e._v("表。从这张数据表中，选择"),a("code",[e._v("FIRST")]),e._v("，"),a("code",[e._v("LAST")]),e._v("和"),a("code",[e._v("EMAIL")]),e._v("列。")]),e._v(" "),a("p",[e._v("(3) 在“Filter Data”（过滤器数据库）下，选择"),a("code",[e._v("LAST")]),e._v("，并选择"),a("code",[e._v("equals")]),e._v("（等于），加上参数"),a("code",[e._v("Eckel")]),e._v("。点选“And”单选钮。")]),e._v(" "),a("p",[e._v("(4) 选择"),a("code",[e._v("EMAIL")]),e._v("，并选中“Is not Null”（不为空）。")]),e._v(" "),a("p",[e._v("(5) 在“Sort By”下，选择"),a("code",[e._v("FIRST")]),e._v("。")]),e._v(" "),a("p",[e._v("查询结果会向我们展示出是否能得到自己希望的东西。\n现在可以按下SQL按钮。不需要我们任何方面的介入，正确的SQL代码会立即弹现出来，以便我们粘贴和复制。对于这个查询，相应的SQL代码如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SELECT people.FIRST, people.LAST, people.EMAIL\nFROM people.csv people\nWHERE (people.LAST='Eckel') AND\n(people.EMAIL Is Not Null)\nORDER BY people.FIRST\n")])])]),a("p",[e._v("若查询比较复杂，手工编码极易出错。但利用一个查询工具，就可以交互式地测试自己的查询，并自动获得正确的代码。事实上，亲手为这些事情编码是难以让人接受的。")]),e._v(" "),a("p",[e._v("(5) 步骤5：在自己的查询中修改和粘贴")]),e._v(" "),a("p",[e._v("我们注意到上述代码与程序中使用的代码是有所区别的。那是由于查询工具对所有名字都进行了限定，即便涉及的仅有一个数据表（若真的涉及多个数据表，这种限定可避免来自不同表的同名数据列发生冲突）。由于这个查询只需要用到一个数据表，所以可考虑从大多数名字中删除“people”限定符，就象下面这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SELECT FIRST, LAST, EMAIL\nFROM people.csv people\nWHERE (LAST='Eckel') AND\n(EMAIL Is Not Null)\nORDER BY FIRST\n")])])]),a("p",[e._v("此外，我们不希望“硬编码”这个程序，从而只能查找一个特定的名字。相反，它应该能查找我们在命令行动态提供的一个名字。所以还要进行必要的修改，并将SQL语句转换成一个动态生成的字符串。如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"SELECT FIRST, LAST, EMAIL " +\n"FROM people.csv people " +\n"WHERE " +\n"(LAST=\'" + args[0] + "\') " +\n" AND (EMAIL Is Not Null) " +\n"ORDER BY FIRST");\n')])])]),a("p",[e._v("SQL还有一种方式可将名字插入一个查询，名为“过程”（"),a("code",[e._v("Procedures")]),e._v("），它的速度非常快。但对于我们的大多数实验性数据库操作，以及一些初级应用，用Java构建查询字符串已经很不错了。")]),e._v(" "),a("p",[e._v("从这个例子可以看出，利用目前找得到的工具——特别是查询构建工具——涉及SQL及JDBC的数据库编程是非常简单和直观的。")]),e._v(" "),a("h2",{attrs:{id:"_15-7-2-查找程序的gui版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-7-2-查找程序的gui版本"}},[e._v("#")]),e._v(" 15.7.2 查找程序的GUI版本")]),e._v(" "),a("p",[e._v("最好的方法是让查找程序一直保持运行，要查找什么东西时只需简单地切换到它，并键入要查找的名字即可。下面这个程序将查找程序作为一个“application/applet”创建，且添加了名字自动填写功能，所以不必键入完整的姓，即可看到数据：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: VLookup.java\n// GUI version of Lookup.java\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\nimport java.sql.*;\n\npublic class VLookup extends Applet {\n  String dbUrl = "jdbc:odbc:people";\n  String user = "";\n  String password = "";\n  Statement s;\n  TextField searchFor = new TextField(20);\n  Label completion =\n    new Label("                        ");\n  TextArea results = new TextArea(40, 20);\n  public void init() {\n    searchFor.addTextListener(new SearchForL());\n    Panel p = new Panel();\n    p.add(new Label("Last name to search for:"));\n    p.add(searchFor);\n    p.add(completion);\n    setLayout(new BorderLayout());\n    add(p, BorderLayout.NORTH);\n    add(results, BorderLayout.CENTER);\n    try {\n      // Load the driver (registers itself)\n      Class.forName(\n        "sun.jdbc.odbc.JdbcOdbcDriver");\n      Connection c = DriverManager.getConnection(\n        dbUrl, user, password);\n      s = c.createStatement();\n    } catch(Exception e) {\n      results.setText(e.getMessage());\n    }\n  }\n  class SearchForL implements TextListener {\n    public void textValueChanged(TextEvent te) {\n      ResultSet r;\n      if(searchFor.getText().length() == 0) {\n        completion.setText("");\n        results.setText("");\n        return;\n      }\n      try {\n        // Name completion:\n        r = s.executeQuery(\n          "SELECT LAST FROM people.csv people " +\n          "WHERE (LAST Like \'" +\n          searchFor.getText()  +\n          "%\') ORDER BY LAST");\n        if(r.next())\n          completion.setText(\n            r.getString("last"));\n        r = s.executeQuery(\n          "SELECT FIRST, LAST, EMAIL " +\n          "FROM people.csv people " +\n          "WHERE (LAST=\'" +\n          completion.getText() +\n          "\') AND (EMAIL Is Not Null) " +\n          "ORDER BY FIRST");\n      } catch(Exception e) {\n        results.setText(\n          searchFor.getText() + "\\n");\n        results.append(e.getMessage());\n        return;\n      }\n      results.setText("");\n      try {\n        while(r.next()) {\n          results.append(\n            r.getString("Last") + ", "\n            + r.getString("fIRST") +\n            ": " + r.getString("EMAIL") + "\\n");\n        }\n      } catch(Exception e) {\n        results.setText(e.getMessage());\n      }\n    }\n  }\n  public static void main(String[] args) {\n    VLookup applet = new VLookup();\n    Frame aFrame = new Frame("Email lookup");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(500,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),a("p",[e._v("数据库的许多逻辑都是相同的，但大家可看到这里添加了一个"),a("code",[e._v("TextListener")]),e._v("，用于监视在"),a("code",[e._v("TextField")]),e._v("（文本字段）的输入。所以只要键入一个新字符，它首先就会试着查找数据库中的“姓”，并显示出与当前输入相符的第一条记录（将其置入"),a("code",[e._v("completion Label")]),e._v("，并用它作为要查找的文本）。因此，只要我们键入了足够的字符，使程序能找到与之相符的唯一一条记录，就可以停手了。")]),e._v(" "),a("h2",{attrs:{id:"_15-7-3-jdbc-api为何如何复杂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-7-3-jdbc-api为何如何复杂"}},[e._v("#")]),e._v(" 15.7.3 JDBC API为何如何复杂")]),e._v(" "),a("p",[e._v("阅览JDBC的联机帮助文档时，我们往往会产生畏难情绪。特别是"),a("code",[e._v("DatabaseMetaData")]),e._v("接口——与Java中看到的大多数接口相反，它的体积显得非常庞大——存在着数量众多的方法，比如"),a("code",[e._v("dataDefinitionCausesTransactionCommit()")]),e._v("，"),a("code",[e._v("getMaxColumnNameLength()")]),e._v("，"),a("code",[e._v("getMaxStatementLength()")]),e._v("，"),a("code",[e._v("storesMixedCaseQuotedIdentifiers()")]),e._v("，"),a("code",[e._v("supportsANSI92IntermediateSQL()")]),e._v("，"),a("code",[e._v("supportsLimitedOuterJoins()")]),e._v("等等。它们有这儿有什么意义吗？")]),e._v(" "),a("p",[e._v("正如早先指出的那样，数据库起初一直处于一种混乱状态。这主要是由于各种数据库应用提出的要求造成的，所以数据库工具显得非常“强大”——换言之，“庞大”。只是近几年才涌现出了SQL的通用语言（常用的还有其他许多数据库语言）。但即便象SQL这样的“标准”，也存在无数的变种，所以JDBC必须提供一个巨大的"),a("code",[e._v("DatabaseMetaData")]),e._v("接口，使我们的代码能真正利用当前要连接的一种“标准”SQL数据库的能力。简言之，我们可编写出简单的、能移植的SQL。但如果想优化代码的执行速度，那么为了适应不同数据库类型的特点，我们的编写代码的麻烦就大了。")]),e._v(" "),a("p",[e._v("当然，这并不是Java的缺陷。数据库产品之间的差异是我们和JDBC都要面对的一个现实。但是，如果能编写通用的查询，而不必太关心性能，那么事情就要简单得多。即使必须对性能作一番调整，只要知道最终面向的平台，也不必针对每一种情况都编写不同的优化代码。")]),e._v(" "),a("p",[e._v("在Sun发布的Java 1.1产品中，配套提供了一系列电子文档，其中有对JDBC更全面的介绍。此外，在由Hamilton Cattel和Fisher编著、Addison-Wesley于1997年出版的《JDBC Database Access with Java》中，也提供了有关这一主题的许多有用资料。同时，书店里也经常出现一些有关JDBC的新书。")])])}),[],!1,null,null,null);t.default=v.exports}}]);