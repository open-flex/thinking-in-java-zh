(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{436:function(n,t,e){"use strict";e.r(t);var s=e(56),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_11-3-反射-运行期类信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-反射-运行期类信息"}},[n._v("#")]),n._v(" 11.3 反射：运行期类信息")]),n._v(" "),e("p",[n._v("如果不知道一个对象的准确类型，RTTI会帮助我们调查。但却有一个限制：类型必须是在编译期间已知的，否则就不能用RTTI调查它，进而无法展开下一步的工作。换言之，编译器必须明确知道RTTI要处理的所有类。")]),n._v(" "),e("p",[n._v("从表面看，这似乎并不是一个很大的限制，但假若得到的是一个不在自己程序空间内的对象的引用，这时又会怎样呢？事实上，对象的类即使在编译期间也不可由我们的程序使用。例如，假设我们从磁盘或者网络获得一系列字节，而且被告知那些字节代表一个类。由于编译器在编译代码时并不知道那个类的情况，所以怎样才能顺利地使用这个类呢？")]),n._v(" "),e("p",[n._v("在传统的程序设计环境中，出现这种情况的概率或许很小。但当我们转移到一个规模更大的编程世界中，却必须对这个问题加以高度重视。第一个要注意的是基于组件的程序设计。在这种环境下，我们用“快速应用开发”（RAD）模型来构建程序项目。RAD一般是在应用程序构建工具中内建的。这是编制程序的一种可视途径（在屏幕上以窗体的形式出现）。可将代表不同组件的图标拖曳到窗体中。随后，通过设定这些组件的属性或者值，进行正确的配置。设计期间的配置要求任何组件都是可以“例示”的（即可以自由获得它们的实例）。这些组件也要揭示出自己的一部分内容，允许程序员读取和设置各种值。此外，用于控制GUI事件的组件必须揭示出与相应的方法有关的信息，以便RAD环境帮助程序员用自己的代码覆盖这些由事件驱动的方法。“反射”提供了一种特殊的机制，可以侦测可用的方法，并产生方法名。通过Java Beans（第13章将详细介绍），Java 1.1为这种基于组件的程序设计提供了一个基础结构。")]),n._v(" "),e("p",[n._v("在运行期查询类信息的另一个原动力是通过网络创建与执行位于远程系统上的对象。这就叫作“远程方法调用”（RMI），它允许Java程序（版本1.1以上）使用由多台机器发布或分布的对象。这种对象的分布可能是由多方面的原因引起的：可能要做一件计算密集型的工作，想对它进行分割，让处于空闲状态的其他机器分担部分工作，从而加快处理进度。某些情况下，可能需要将用于控制特定类型任务（比如多层客户／服务器架构中的“运作规则”）的代码放置在一台特殊的机器上，使这台机器成为对那些行动进行描述的一个通用储藏所。而且可以方便地修改这个场所，使其对系统内的所有方面产生影响（这是一种特别有用的设计思路，因为机器是独立存在的，所以能轻易修改软件！）。分布式计算也能更充分地发挥某些专用硬件的作用，它们特别擅长执行一些特定的任务——例如矩阵逆转——但对常规编程来说却显得太夸张或者太昂贵了。")]),n._v(" "),e("p",[n._v("在Java 1.1中，"),e("code",[n._v("Class")]),n._v("类（本章前面已有详细论述）得到了扩展，可以支持“反射”的概念。针对"),e("code",[n._v("Field")]),n._v("，"),e("code",[n._v("Method")]),n._v("以及"),e("code",[n._v("Constructor")]),n._v("类（每个都实现了"),e("code",[n._v("Memberinterface")]),n._v("——成员接口），它们都新增了一个库："),e("code",[n._v("java.lang.reflect")]),n._v("。这些类型的对象都是JVM在运行期创建的，用于代表未知类里对应的成员。这样便可用构造器创建新对象，用"),e("code",[n._v("get()")]),n._v("和"),e("code",[n._v("set()")]),n._v("方法读取和修改与"),e("code",[n._v("Field")]),n._v("对象关联的字段，以及用"),e("code",[n._v("invoke()")]),n._v("方法调用与"),e("code",[n._v("Method")]),n._v("对象关联的方法。此外，我们可调用方法"),e("code",[n._v("getFields()")]),n._v("，"),e("code",[n._v("getMethods()")]),n._v("，"),e("code",[n._v("getConstructors()")]),n._v("，分别返回用于表示字段、方法以及构造器的对象数组（在联机文档中，还可找到与"),e("code",[n._v("Class")]),n._v("类有关的更多的资料）。因此，匿名对象的类信息可在运行期被完整的揭露出来，而在编译期间不需要知道任何东西。")]),n._v(" "),e("p",[n._v("大家要认识的很重要的一点是“反射”并没有什么神奇的地方。通过“反射”同一个未知类型的对象打交道时，JVM只是简单地检查那个对象，并调查它从属于哪个特定的类（就象以前的RTTI那样）。但在这之后，在我们做其他任何事情之前，"),e("code",[n._v("Class")]),n._v("对象必须载入。因此，用于那种特定类型的"),e("code",[n._v(".class")]),n._v("文件必须能由JVM调用（要么在本地机器内，要么可以通过网络取得）。所以RTTI和“反射”之间唯一的区别就是对RTTI来说，编译器会在编译期打开和检查"),e("code",[n._v(".class")]),n._v("文件。换句话说，我们可以用“普通”方式调用一个对象的所有方法；但对“反射”来说，"),e("code",[n._v(".class")]),n._v("文件在编译期间是不可使用的，而是由运行期环境打开和检查。")]),n._v(" "),e("h2",{attrs:{id:"_11-3-1-一个类方法提取器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-1-一个类方法提取器"}},[n._v("#")]),n._v(" 11.3.1 一个类方法提取器")]),n._v(" "),e("p",[n._v("很少需要直接使用反射工具；之所以在语言中提供它们，仅仅是为了支持其他Java特性，比如对象序列化（第10章介绍）、Java Beans以及RMI（本章后面介绍）。但是，我们许多时候仍然需要动态提取与一个类有关的资料。其中特别有用的工具便是一个类方法提取器。正如前面指出的那样，若检视类定义源码或者联机文档，只能看到在那个类定义中被定义或覆盖的方法，基类那里还有大量资料拿不到。幸运的是，“反射”做到了这一点，可用它写一个简单的工具，令其自动展示整个接口。下面便是具体的程序：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: ShowMethods.java\n// Using Java 1.1 reflection to show all the\n// methods of a class, even if the methods are\n// defined in the base class.\nimport java.lang.reflect.*;\n\npublic class ShowMethods {\n  static final String usage =\n    "usage: \\n" +\n    "ShowMethods qualified.class.name\\n" +\n    "To show all methods in class or: \\n" +\n    "ShowMethods qualified.class.name word\\n" +\n    "To search for methods involving \'word\'";\n  public static void main(String[] args) {\n    if(args.length < 1) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n    try {\n      Class c = Class.forName(args[0]);\n      Method[] m = c.getMethods();\n      Constructor[] ctor = c.getConstructors();\n      if(args.length == 1) {\n        for (int i = 0; i < m.length; i++)\n          System.out.println(m[i].toString());\n        for (int i = 0; i < ctor.length; i++)\n          System.out.println(ctor[i].toString());\n      }\n      else {\n        for (int i = 0; i < m.length; i++)\n          if(m[i].toString()\n             .indexOf(args[1])!= -1)\n            System.out.println(m[i].toString());\n        for (int i = 0; i < ctor.length; i++)\n          if(ctor[i].toString()\n             .indexOf(args[1])!= -1)\n          System.out.println(ctor[i].toString());\n      }\n    } catch (ClassNotFoundException e) {\n      System.out.println("No such class: " + e);\n    }\n  }\n} ///:~\n')])])]),e("p",[e("code",[n._v("Class")]),n._v("方法"),e("code",[n._v("getMethods()")]),n._v("和"),e("code",[n._v("getConstructors()")]),n._v("可以分别返回"),e("code",[n._v("Method")]),n._v("和"),e("code",[n._v("Constructor")]),n._v("的一个数组。每个类都提供了进一步的方法，可解析出它们所代表的方法的名字、参数以及返回值。但也可以象这样一样只使用"),e("code",[n._v("toString()")]),n._v("，生成一个含有完整方法签名的字符串。代码剩余的部分只是用于提取命令行信息，判断特定的签名是否与我们的目标字符串相符（使用"),e("code",[n._v("indexOf()")]),n._v("），并打印出结果。")]),n._v(" "),e("p",[n._v("这里便用到了“反射”技术，因为由"),e("code",[n._v("Class.forName()")]),n._v("产生的结果不能在编译期间获知，所以所有方法签名信息都会在运行期间提取。若研究一下联机文档中关于“反射”（Reflection）的那部分文字，就会发现它已提供了足够多的支持，可对一个编译期完全未知的对象进行实际的设置以及发出方法调用。同样地，这也属于几乎完全不用我们操心的一个步骤——Java自己会利用这种支持，所以程序设计环境能够控制Java Beans——但它无论如何都是非常有趣的。")]),n._v(" "),e("p",[n._v("一个有趣的试验是运行"),e("code",[n._v("java ShowMehods ShowMethods")]),n._v("。这样做可得到一个列表，其中包括一个"),e("code",[n._v("public")]),n._v("默认构造器，尽管我们在代码中看见并没有定义一个构造器。我们看到的是由编译器自动生成的那一个构造器。如果随之将"),e("code",[n._v("ShowMethods")]),n._v("设为一个非"),e("code",[n._v("public")]),n._v("类（即换成“友好”类），生成的默认构造器便不会在输出结果中出现。生成的默认构造器会自动获得与类一样的访问权限。\n"),e("code",[n._v("ShowMethods")]),n._v("的输出仍然有些“不爽”。例如，下面是通过调用"),e("code",[n._v("java ShowMethods java.lang.String")]),n._v("得到的输出结果的一部分：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public boolean\n  java.lang.String.startsWith(java.lang.String,int)\npublic boolean\n  java.lang.String.startsWith(java.lang.String)\npublic boolean\n  java.lang.String.endsWith(java.lang.String)\n")])])]),e("p",[n._v("若能去掉象"),e("code",[n._v("java.lang")]),n._v("这样的限定词，结果显然会更令人满意。有鉴于此，可引入上一章介绍的"),e("code",[n._v("StreamTokenizer")]),n._v("类，解决这个问题：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: ShowMethodsClean.java\n// ShowMethods with the qualifiers stripped\n// to make the results easier to read\nimport java.lang.reflect.*;\nimport java.io.*;\n\npublic class ShowMethodsClean {\n  static final String usage =\n    "usage: \\n" +\n    "ShowMethodsClean qualified.class.name\\n" +\n    "To show all methods in class or: \\n" +\n    "ShowMethodsClean qualif.class.name word\\n" +\n    "To search for methods involving \'word\'";\n  public static void main(String[] args) {\n    if(args.length < 1) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n    try {\n      Class c = Class.forName(args[0]);\n      Method[] m = c.getMethods();\n      Constructor[] ctor = c.getConstructors();\n      // Convert to an array of cleaned Strings:\n      String[] n =\n        new String[m.length + ctor.length];\n      for(int i = 0; i < m.length; i++) {\n        String s = m[i].toString();\n        n[i] = StripQualifiers.strip(s);\n      }\n      for(int i = 0; i < ctor.length; i++) {\n        String s = ctor[i].toString();\n        n[i + m.length] =\n          StripQualifiers.strip(s);\n      }\n      if(args.length == 1)\n        for (int i = 0; i < n.length; i++)\n          System.out.println(n[i]);\n      else\n        for (int i = 0; i < n.length; i++)\n          if(n[i].indexOf(args[1])!= -1)\n            System.out.println(n[i]);\n    } catch (ClassNotFoundException e) {\n      System.out.println("No such class: " + e);\n    }\n  }\n}\n\nclass StripQualifiers {\n  private StreamTokenizer st;\n  public StripQualifiers(String qualified) {\n      st = new StreamTokenizer(\n        new StringReader(qualified));\n      st.ordinaryChar(\' \'); // Keep the spaces\n  }\n  public String getNext() {\n    String s = null;\n    try {\n      if(st.nextToken() !=\n            StreamTokenizer.TT_EOF) {\n        switch(st.ttype) {\n          case StreamTokenizer.TT_EOL:\n            s = null;\n            break;\n          case StreamTokenizer.TT_NUMBER:\n            s = Double.toString(st.nval);\n            break;\n          case StreamTokenizer.TT_WORD:\n            s = new String(st.sval);\n            break;\n          default: // single character in ttype\n            s = String.valueOf((char)st.ttype);\n        }\n      }\n    } catch(IOException e) {\n      System.out.println(e);\n    }\n    return s;\n  }\n  public static String strip(String qualified) {\n    StripQualifiers sq =\n      new StripQualifiers(qualified);\n    String s = "", si;\n    while((si = sq.getNext()) != null) {\n      int lastDot = si.lastIndexOf(\'.\');\n      if(lastDot != -1)\n        si = si.substring(lastDot + 1);\n      s += si;\n    }\n    return s;\n  }\n} ///:~\n')])])]),e("p",[e("code",[n._v("ShowMethodsClean")]),n._v("方法非常接近前一个"),e("code",[n._v("ShowMethods")]),n._v("，只是它取得了"),e("code",[n._v("Method")]),n._v("和"),e("code",[n._v("Constructor")]),n._v("数组，并将它们转换成单个"),e("code",[n._v("String")]),n._v("数组。随后，每个这样的"),e("code",[n._v("String")]),n._v("对象都在"),e("code",[n._v("StripQualifiers.Strip()")]),n._v("里“过”一遍，删除所有方法限定词。正如大家看到的那样，此时用到了"),e("code",[n._v("StreamTokenizer")]),n._v("和"),e("code",[n._v("String")]),n._v("来完成这个工作。")]),n._v(" "),e("p",[n._v("假如记不得一个类是否有一个特定的方法，而且不想在联机文档里逐步检查类结构，或者不知道那个类是否能对某个对象（如"),e("code",[n._v("Color")]),n._v("对象）做某件事情，该工具便可节省大量编程时间。")]),n._v(" "),e("p",[n._v("第17章提供了这个程序的一个GUI版本，可在自己写代码的时候运行它，以便快速查找需要的东西。")])])}),[],!1,null,null,null);t.default=a.exports}}]);