(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{513:function(n,t,e){"use strict";e.r(t);var a=e(56),v=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_3-1-使用java运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-使用java运算符"}},[n._v("#")]),n._v(" 3.1 使用Java运算符")]),n._v(" "),e("p",[n._v("运算符以一个或多个参数为基础，可生成一个新值。参数采用与原始方法调用不同的一种形式，但效果是相同的。根据以前写程序的经验，运算符的常规概念应该不难理解。")]),n._v(" "),e("p",[n._v("加号（"),e("code",[n._v("+")]),n._v("）、减号和负号（"),e("code",[n._v("-")]),n._v("）、乘号（"),e("code",[n._v("*")]),n._v("）、除号（"),e("code",[n._v("/")]),n._v("）以及等号（"),e("code",[n._v("=")]),n._v("）的用法与其他所有编程语言都是类似的。")]),n._v(" "),e("p",[n._v("所有运算符都能根据自己的运算对象生成一个值。除此以外，一个运算符可改变运算对象的值，这叫作“副作用”（Side Effect）。运算符最常见的用途就是修改自己的运算对象，从而产生副作用。但要注意生成的值亦可由没有副作用的运算符生成。\n几乎所有运算符都只能操作“基本类型”（Primitives）。唯一的例外是"),e("code",[n._v("=")]),n._v("、"),e("code",[n._v("==")]),n._v("和"),e("code",[n._v("!=")]),n._v("，它们能操作所有对象（也是对象易令人混淆的一个地方）。除此以外，"),e("code",[n._v("String")]),n._v("类支持"),e("code",[n._v("+")]),n._v("和"),e("code",[n._v("+=")]),n._v("。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-1-优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-优先级"}},[n._v("#")]),n._v(" 3.1.1 优先级")]),n._v(" "),e("p",[n._v("运算符的优先级决定了存在多个运算符时一个表达式各部分的计算顺序。Java对计算顺序作出了特别的规定。其中，最简单的规则就是乘法和除法在加法和减法之前完成。程序员经常都会忘记其他优先级规则，所以应该用括号明确规定计算顺序。例如：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("A = X + Y - 2/2 + Z;\n")])])]),e("p",[n._v("为上述表达式加上括号后，就有了一个不同的含义。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("A = X + (Y - 2)/(2 + Z);\n")])])]),e("h2",{attrs:{id:"_3-1-2-赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-赋值"}},[n._v("#")]),n._v(" 3.1.2 赋值")]),n._v(" "),e("p",[n._v("赋值是用等号运算符（"),e("code",[n._v("=")]),n._v("）进行的。它的意思是“取得右边的值，把它复制到左边”。右边的值可以是任何常数、变量或者表达式，只要能产生一个值就行。但左边的值必须是一个明确的、已命名的变量。也就是说，它必须有一个物理性的空间来保存右边的值。举个例子来说，可将一个常数赋给一个变量（"),e("code",[n._v("A=4;")]),n._v("），但不可将任何东西赋给一个常数（比如不能"),e("code",[n._v("4=A")]),n._v("）。")]),n._v(" "),e("p",[n._v("对主数据类型的赋值是非常直接的。由于基本类型容纳了实际的值，而且并非指向一个对象的引用，所以在为其赋值的时候，可将来自一个地方的内容复制到另一个地方。例如，假设为基本类型使用"),e("code",[n._v("A=B")]),n._v("，那么"),e("code",[n._v("B")]),n._v("处的内容就复制到"),e("code",[n._v("A")]),n._v("。若接着又修改了"),e("code",[n._v("A")]),n._v("，那么"),e("code",[n._v("B")]),n._v("根本不会受这种修改的影响。作为一名程序员，这应成为自己的常识。")]),n._v(" "),e("p",[n._v("但在为对象“赋值”的时候，情况却发生了变化。对一个对象进行操作时，我们真正操作的是它的引用。所以倘若“从一个对象到另一个对象”赋值，实际就是将引用从一个地方复制到另一个地方。这意味着假若为对象使用"),e("code",[n._v("C=D")]),n._v("，那么"),e("code",[n._v("C")]),n._v("和"),e("code",[n._v("D")]),n._v("最终都会指向最初只有"),e("code",[n._v("D")]),n._v("才指向的那个对象。下面这个例子将向大家阐示这一点。")]),n._v(" "),e("p",[n._v("这里有一些题外话。在后面，大家在代码示例里看到的第一个语句将是"),e("code",[n._v("package 03")]),n._v("使用的"),e("code",[n._v("package")]),n._v("语句，它代表本书第3章。本书每一章的第一个代码清单都会包含象这样的一个"),e("code",[n._v("package")]),n._v("（封装、打包、包裹）语句，它的作用是为那一章剩余的代码建立章节编号。在第17章，大家会看到第3章的所有代码清单（除那些有不同封装名称的以外）都会自动置入一个名为"),e("code",[n._v("c0")]),n._v("3的子目录里；第4章的代码置入"),e("code",[n._v("c04")]),n._v("；以此类推。所有这些都是通过第17章展示的"),e("code",[n._v("CodePackage.java")]),n._v("程序实现的；“封装”的基本概念会在第5章进行详尽的解释。就目前来说，大家只需记住象"),e("code",[n._v("package 03")]),n._v("这样的形式只是用于为某一章的代码清单建立相应的子目录。")]),n._v(" "),e("p",[n._v("为运行程序，必须保证在"),e("code",[n._v("classpath")]),n._v("里包含了我们安装本书源码文件的根目录（那个目录里包含了"),e("code",[n._v("c02")]),n._v("，"),e("code",[n._v("c03c")]),n._v("，"),e("code",[n._v("c04")]),n._v("等等子目录）。\n对于Java后续的版本（1.1.4和更高版本），如果您的"),e("code",[n._v("main()")]),n._v("用"),e("code",[n._v("package")]),n._v("语句封装到一个文件里，那么必须在程序名前面指定完整的包裹名称，否则不能运行程序。在这种情况下，命令行是：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("java c03.Assignment\n")])])]),e("p",[n._v("运行位于一个“包裹”里的程序时，随时都要注意这方面的问题。\n下面是例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: Assignment.java\n// Assignment with objects is a bit tricky\npackage c03;\n\nclass Number {\n  int i;\n}\n\npublic class Assignment {\n  public static void main(String[] args) {\n    Number n1 = new Number();\n    Number n2 = new Number();\n    n1.i = 9;\n    n2.i = 47;\n    System.out.println("1: n1.i: " + n1.i +\n      ", n2.i: " + n2.i);\n    n1 = n2;\n    System.out.println("2: n1.i: " + n1.i +\n      ", n2.i: " + n2.i);\n    n1.i = 27;\n    System.out.println("3: n1.i: " + n1.i +\n      ", n2.i: " + n2.i);\n  }\n} ///:~\n')])])]),e("p",[e("code",[n._v("Number")]),n._v("类非常简单，它的两个实例（"),e("code",[n._v("n1")]),n._v("和"),e("code",[n._v("n2")]),n._v("）是在"),e("code",[n._v("main()")]),n._v("里创建的。每个"),e("code",[n._v("Number")]),n._v("中的"),e("code",[n._v("i")]),n._v("值都赋予了一个不同的值。随后，将"),e("code",[n._v("n2")]),n._v("赋给"),e("code",[n._v("n1")]),n._v("，而且"),e("code",[n._v("n1")]),n._v("发生改变。在许多程序设计语言中，我们都希望"),e("code",[n._v("n1")]),n._v("和"),e("code",[n._v("n2")]),n._v("任何时候都相互独立。但由于我们已赋予了一个引用，所以下面才是真实的输出：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("1: n1.i: 9, n2.i: 47\n2: n1.i: 47, n2.i: 47\n3: n1.i: 27, n2.i: 27\n")])])]),e("p",[n._v("看来改变"),e("code",[n._v("n1")]),n._v("的同时也改变了"),e("code",[n._v("n2")]),n._v("！这是由于无论"),e("code",[n._v("n1")]),n._v("还是"),e("code",[n._v("n2")]),n._v("都包含了相同的引用，它指向相同的对象（最初的引用位于"),e("code",[n._v("n1")]),n._v("内部，指向容纳了值9的一个对象。在赋值过程中，那个引用实际已经丢失；它的对象会由“垃圾收集器”自动清除）。")]),n._v(" "),e("p",[n._v("这种特殊的现象通常也叫作“别名”，是Java操作对象的一种基本方式。但假若不愿意在这种情况下出现别名，又该怎么操作呢？可放弃赋值，并写入下述代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("n1.i = n2.i;\n")])])]),e("p",[n._v("这样便可保留两个独立的对象，而不是将"),e("code",[n._v("n1")]),n._v("和"),e("code",[n._v("n2")]),n._v("绑定到相同的对象。但您很快就会意识到，这样做会使对象内部的字段处理发生混乱，并与标准的面向对象设计准则相悖。由于这并非一个简单的话题，所以留待第12章详细论述，那一章是专门讨论别名的。其时，大家也会注意到对象的赋值会产生一些令人震惊的效果。")]),n._v(" "),e("p",[e("strong",[n._v("1. 方法调用中的别名处理")])]),n._v(" "),e("p",[n._v("将一个对象传递到方法内部时，也会产生别名现象。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//: PassObject.java\n// Passing objects to methods can be a bit tricky\n\nclass Letter {\n  char c;\n}\n\npublic class PassObject {\n  static void f(Letter y) {\n    y.c = 'z';\n  }\n  public static void main(String[] args) {\n    Letter x = new Letter();\n    x.c = 'a';\n    System.out.println(\"1: x.c: \" + x.c);\n    f(x);\n    System.out.println(\"2: x.c: \" + x.c);\n  }\n} ///:~\n")])])]),e("p",[n._v("在许多程序设计语言中，"),e("code",[n._v("f()")]),n._v("方法表面上似乎要在方法的作用域内制作自己的参数"),e("code",[n._v("Letter y")]),n._v("的一个副本。但同样地，实际传递的是一个引用。所以下面这个程序行：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("y.c = 'z';\n")])])]),e("p",[n._v("实际改变的是"),e("code",[n._v("f()")]),n._v("之外的对象。输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("1: x.c: a\n2: x.c: z\n")])])]),e("p",[n._v("别名和它的对策是非常复杂的一个问题。尽管必须等至第12章才可获得所有答案，但从现在开始就应加以重视，以便提早发现它的缺点。")]),n._v(" "),e("p",[e("strong",[n._v("3.1.3 算术运算符")])]),n._v(" "),e("p",[n._v("Java的基本算术运算符与其他大多数程序设计语言是相同的。其中包括加号（"),e("code",[n._v("+")]),n._v("）、减号（"),e("code",[n._v("-")]),n._v("）、除号（"),e("code",[n._v("/")]),n._v("）、乘号（"),e("code",[n._v("*")]),n._v("）以及模数（"),e("code",[n._v("%")]),n._v("，从整数除法中获得余数）。整数除法会直接砍掉小数，而不是进位。")]),n._v(" "),e("p",[n._v("Java也用一种简写形式进行运算，并同时进行赋值操作。这是由等号前的一个运算符标记的，而且对于语言中的所有运算符都是固定的。例如，为了将4加到变量"),e("code",[n._v("x")]),n._v("，并将结果赋给"),e("code",[n._v("x")]),n._v("，可用："),e("code",[n._v("x+=4")]),n._v("。")]),n._v(" "),e("p",[n._v("下面这个例子展示了算术运算符的各种用法：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: MathOps.java\n// Demonstrates the mathematical operators\nimport java.util.*;\n\npublic class MathOps {\n  // Create a shorthand to save typing:\n  static void prt(String s) {\n    System.out.println(s);\n  }\n  // shorthand to print a string and an int:\n  static void pInt(String s, int i) {\n    prt(s + " = " + i);\n  }\n  // shorthand to print a string and a float:\n  static void pFlt(String s, float f) {\n    prt(s + " = " + f);\n  }\n  public static void main(String[] args) {\n    // Create a random number generator,\n    // seeds with current time by default:\n    Random rand = new Random();\n    int i, j, k;\n    // \'%\' limits maximum value to 99:\n    j = rand.nextInt() % 100;\n    k = rand.nextInt() % 100;\n    pInt("j",j);  pInt("k",k);\n    i = j + k; pInt("j + k", i);\n    i = j - k; pInt("j - k", i);\n    i = k / j; pInt("k / j", i);\n    i = k * j; pInt("k * j", i);\n    i = k % j; pInt("k % j", i);\n    j %= k; pInt("j %= k", j);\n    // Floating-point number tests:\n    float u,v,w;  // applies to doubles, too\n    v = rand.nextFloat();\n    w = rand.nextFloat();\n    pFlt("v", v); pFlt("w", w);\n    u = v + w; pFlt("v + w", u);\n    u = v - w; pFlt("v - w", u);\n    u = v * w; pFlt("v * w", u);\n    u = v / w; pFlt("v / w", u);\n    // the following also works for\n    // char, byte, short, int, long,\n    // and double:\n    u += v; pFlt("u += v", u);\n    u -= v; pFlt("u -= v", u);\n    u *= v; pFlt("u *= v", u);\n    u /= v; pFlt("u /= v", u);\n  }\n} ///:~\n')])])]),e("p",[n._v("我们注意到的第一件事情就是用于打印（显示）的一些快捷方法："),e("code",[n._v("prt()")]),n._v("方法打印一个"),e("code",[n._v("String")]),n._v("；"),e("code",[n._v("pInt()")]),n._v("先打印一个"),e("code",[n._v("String")]),n._v("，再打印一个"),e("code",[n._v("int")]),n._v("；而"),e("code",[n._v("pFlt()")]),n._v("先打印一个"),e("code",[n._v("String")]),n._v("，再打印一个"),e("code",[n._v("float")]),n._v("。当然，它们最终都要用"),e("code",[n._v("System.out.println()")]),n._v("结尾。")]),n._v(" "),e("p",[n._v("为生成数字，程序首先会创建一个"),e("code",[n._v("Random")]),n._v("（随机）对象。由于参数是在创建过程中传递的，所以Java将当前时间作为一个“种子值”，由随机数生成器利用。通过"),e("code",[n._v("Random")]),n._v("对象，程序可生成许多不同类型的随机数字。做法很简单，只需调用不同的方法即可："),e("code",[n._v("nextInt()")]),n._v("，"),e("code",[n._v("nextLong()")]),n._v("，"),e("code",[n._v("nextFloat()")]),n._v("或者"),e("code",[n._v("nextDouble()")]),n._v("。")]),n._v(" "),e("p",[n._v("若随同随机数生成器的结果使用，模数运算符（"),e("code",[n._v("%")]),n._v("）可将结果限制到运算对象减1的上限（本例是99）之下。")]),n._v(" "),e("p",[e("strong",[n._v("1. 一元加、减运算符")])]),n._v(" "),e("p",[n._v("一元减号（"),e("code",[n._v("-")]),n._v("）和一元加号（"),e("code",[n._v("+")]),n._v("）与二元加号和减号都是相同的运算符。根据表达式的书写形式，编译器会自动判断使用哪一种。例如下述语句：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("x = -a;\n")])])]),e("p",[n._v("它的含义是显然的。编译器能正确识别下述语句：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("x = a * -b;\n")])])]),e("p",[n._v("但读者会被搞糊涂，所以最好更明确地写成：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("x = a * (-b);\n")])])]),e("p",[n._v("一元减号得到的运算对象的负值。一元加号的含义与一元减号相反，虽然它实际并不做任何事情。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-4-自动递增和递减"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-自动递增和递减"}},[n._v("#")]),n._v(" 3.1.4 自动递增和递减")]),n._v(" "),e("p",[n._v("和C类似，Java提供了丰富的快捷运算方式。这些快捷运算可使代码更清爽，更易录入，也更易读者辨读。")]),n._v(" "),e("p",[n._v("两种很不错的快捷运算方式是递增和递减运算符（常称作“自动递增”和“自动递减”运算符）。其中，递减运算符是"),e("code",[n._v("--")]),n._v("，意为“减少一个单位”；递增运算符是"),e("code",[n._v("++")]),n._v("，意为“增加一个单位”。举个例子来说，假设A是一个"),e("code",[n._v("int")]),n._v("（整数）值，则表达式"),e("code",[n._v("++A")]),n._v("就等价于（"),e("code",[n._v("A = A + 1")]),n._v("）。递增和递减运算符结果生成的是变量的值。")]),n._v(" "),e("p",[n._v("对每种类型的运算符，都有两个版本可供选用；通常将其称为“前缀版”和“后缀版”。“前递增”表示"),e("code",[n._v("++")]),n._v("运算符位于变量或表达式的前面；而“后递增”表示"),e("code",[n._v("++")]),n._v("运算符位于变量或表达式的后面。类似地，“前递减”意味着"),e("code",[n._v("--")]),n._v("运算符位于变量或表达式的前面；而“后递减”意味着"),e("code",[n._v("--")]),n._v("运算符位于变量或表达式的后面。对于前递增和前递减（如"),e("code",[n._v("++A")]),n._v("或"),e("code",[n._v("--A")]),n._v("），会先执行运算，复用成值。而对于后递增和后递减（如"),e("code",[n._v("A++")]),n._v("或"),e("code",[n._v("A--")]),n._v("），会先生成值，再执行运算。下面是一个例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: AutoInc.java\n// Demonstrates the ++ and -- operators\n\npublic class AutoInc {\n  public static void main(String[] args) {\n    int i = 1;\n    prt("i : " + i);\n    prt("++i : " + ++i); // Pre-increment\n    prt("i++ : " + i++); // Post-increment\n    prt("i : " + i);\n    prt("--i : " + --i); // Pre-decrement\n    prt("i-- : " + i--); // Post-decrement\n    prt("i : " + i);\n  }\n  static void prt(String s) {\n    System.out.println(s);\n  }\n} ///:~\n')])])]),e("p",[n._v("该程序的输出如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("i : 1\n++i : 2\ni++ : 2\ni : 3\n--i : 2\ni-- : 2\ni : 1\n")])])]),e("p",[n._v("从中可以看到，对于前缀形式，我们在执行完运算后才得到值。但对于后缀形式，则是在运算执行之前就得到值。它们是唯一具有“副作用”的运算符（除那些涉及赋值的以外）。也就是说，它们会改变运算对象，而不仅仅是使用自己的值。")]),n._v(" "),e("p",[n._v("递增运算符正是对“C++”这个名字的一种解释，暗示着“超载C的一步”。在早期的一次Java演讲中，Bill Joy（始创人之一）声称“Java=C++--”（C加加减减），意味着Java已去除了C++一些没来由折磨人的地方，形成一种更精简的语言。正如大家会在这本书中学到的那样，Java的许多地方都得到了简化，所以Java的学习比C++更容易。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-5-关系运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-关系运算符"}},[n._v("#")]),n._v(" 3.1.5 关系运算符")]),n._v(" "),e("p",[n._v("关系运算符生成的是一个“布尔”（"),e("code",[n._v("Boolean")]),n._v("）结果。它们评价的是运算对象值之间的关系。若关系是真实的，关系表达式会生成"),e("code",[n._v("true")]),n._v("（真）；若关系不真实，则生成"),e("code",[n._v("false")]),n._v("（假）。关系运算符包括小于（"),e("code",[n._v("<")]),n._v("）、大于（"),e("code",[n._v(">")]),n._v("）、小于或等于（"),e("code",[n._v("<=")]),n._v("）、大于或等于（"),e("code",[n._v(">=")]),n._v("）、等于（"),e("code",[n._v("==")]),n._v("）以及不等于（"),e("code",[n._v("!=")]),n._v("）。等于和不等于适用于所有内建的数据类型，但其他比较不适用于"),e("code",[n._v("boolean")]),n._v("类型。")]),n._v(" "),e("p",[e("strong",[n._v("1. 检查对象是否相等")])]),n._v(" "),e("p",[n._v("关系运算符"),e("code",[n._v("==")]),n._v("和"),e("code",[n._v("!=")]),n._v("也适用于所有对象，但它们的含义通常会使初涉Java领域的人找不到北。下面是一个例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//: Equivalence.java\n\npublic class Equivalence {\n  public static void main(String[] args) {\n    Integer n1 = new Integer(47);\n    Integer n2 = new Integer(47);\n    System.out.println(n1 == n2);\n    System.out.println(n1 != n2);\n  }\n} ///:~\n")])])]),e("p",[n._v("其中，表达式"),e("code",[n._v("System.out.println(n1 == n2)")]),n._v("可打印出内部的布尔比较结果。一般人都会认为输出结果肯定先是"),e("code",[n._v("true")]),n._v("，再是"),e("code",[n._v("false")]),n._v("，因为两个"),e("code",[n._v("Integer")]),n._v("对象都是相同的。但尽管对象的内容相同，引用却是不同的，而"),e("code",[n._v("==")]),n._v("和"),e("code",[n._v("!=")]),n._v("比较的正好就是对象引用。所以输出结果实际上先是"),e("code",[n._v("false")]),n._v("，再是"),e("code",[n._v("true")]),n._v("。这自然会使第一次接触的人感到惊奇。")]),n._v(" "),e("p",[n._v("若想对比两个对象的实际内容是否相同，又该如何操作呢？此时，必须使用所有对象都适用的特殊方法"),e("code",[n._v("equals()")]),n._v("。但这个方法不适用于“基本类型”，那些类型直接使用"),e("code",[n._v("==")]),n._v("和"),e("code",[n._v("!=")]),n._v("即可。下面举例说明如何使用：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//: EqualsMethod.java\n\npublic class EqualsMethod {\n  public static void main(String[] args) {\n    Integer n1 = new Integer(47);\n    Integer n2 = new Integer(47);\n    System.out.println(n1.equals(n2));\n  }\n} ///:~\n")])])]),e("p",[n._v("正如我们预计的那样，此时得到的结果是"),e("code",[n._v("true")]),n._v("。但事情并未到此结束！假设您创建了自己的类，就象下面这样：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//: EqualsMethod2.java\n\nclass Value {\n  int i;\n}\n\npublic class EqualsMethod2 {\n  public static void main(String[] args) {\n    Value v1 = new Value();\n    Value v2 = new Value();\n    v1.i = v2.i = 100;\n    System.out.println(v1.equals(v2));\n  }\n} ///:~\n")])])]),e("p",[n._v("此时的结果又变回了"),e("code",[n._v("false")]),n._v("！这是由于"),e("code",[n._v("equals()")]),n._v("的默认行为是比较引用。所以除非在自己的新类中改变了"),e("code",[n._v("equals()")]),n._v("，否则不可能表现出我们希望的行为。不幸的是，要到第7章才会学习如何改变行为。但要注意"),e("code",[n._v("equals()")]),n._v("的这种行为方式同时或许能够避免一些“灾难”性的事件。")]),n._v(" "),e("p",[n._v("大多数Java类库都实现了"),e("code",[n._v("equals()")]),n._v("，所以它实际比较的是对象的内容，而非它们的引用。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-6-逻辑运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-6-逻辑运算符"}},[n._v("#")]),n._v(" 3.1.6 逻辑运算符")]),n._v(" "),e("p",[n._v("逻辑运算符AND（"),e("code",[n._v("&&")]),n._v("）、OR（"),e("code",[n._v("||")]),n._v("）以及NOT（"),e("code",[n._v("!")]),n._v("）能生成一个布尔值（"),e("code",[n._v("true")]),n._v("或"),e("code",[n._v("false")]),n._v("）——以参数的逻辑关系为基础。下面这个例子向大家展示了如何使用关系和逻辑运算符。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: Bool.java\n// Relational and logical operators\nimport java.util.*;\n\npublic class Bool {\n  public static void main(String[] args) {\n    Random rand = new Random();\n    int i = rand.nextInt() % 100;\n    int j = rand.nextInt() % 100;\n    prt("i = " + i);\n    prt("j = " + j);\n    prt("i > j is " + (i > j));\n    prt("i < j is " + (i < j));\n    prt("i >= j is " + (i >= j));\n    prt("i <= j is " + (i <= j));\n    prt("i == j is " + (i == j));\n    prt("i != j is " + (i != j));\n\n    // Treating an int as a boolean is\n    // not legal Java\n//! prt("i && j is " + (i && j));\n//! prt("i || j is " + (i || j));\n//! prt("!i is " + !i);\n\n    prt("(i < 10) && (j < 10) is "\n       + ((i < 10) && (j < 10)) );\n    prt("(i < 10) || (j < 10) is "\n       + ((i < 10) || (j < 10)) );\n  }\n  static void prt(String s) {\n    System.out.println(s);\n  }\n} ///:~\n')])])]),e("p",[n._v("只可将AND，OR或NOT应用于布尔值。与在C及C++中不同，不可将一个非布尔值当作布尔值在逻辑表达式中使用。若这样做，就会发现尝试失败，并用一个"),e("code",[n._v("//!")]),n._v("标出。然而，后续的表达式利用关系比较生成布尔值，然后对结果进行逻辑运算。")]),n._v(" "),e("p",[n._v("输出列表看起来象下面这个样子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("i = 85\nj = 4\ni > j is true\ni < j is false\ni >= j is true\ni <= j is false\ni == j is false\ni != j is true\n(i < 10) && (j < 10) is false\n(i < 10) || (j < 10) is true\n")])])]),e("p",[n._v("注意若在预计为"),e("code",[n._v("String")]),n._v("值的地方使用，布尔值会自动转换成适当的文本形式。")]),n._v(" "),e("p",[n._v("在上述程序中，可将对"),e("code",[n._v("int")]),n._v("的定义替换成除"),e("code",[n._v("boolean")]),n._v("以外的其他任何主数据类型。但要注意，对浮点数字的比较是非常严格的。即使一个数字仅在小数部分与另一个数字存在极微小的差异，仍然认为它们是“不相等”的。即使一个数字只比零大一点点（例如2不停地开平方根），它仍然属于“非零”值。")]),n._v(" "),e("p",[e("strong",[n._v("1. 短路")])]),n._v(" "),e("p",[n._v("操作逻辑运算符时，我们会遇到一种名为“短路”的情况。这意味着只有明确得出整个表达式真或假的结论，才会对表达式进行逻辑求值。因此，一个逻辑表达式的所有部分都有可能不进行求值：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: ShortCircuit.java\n// Demonstrates short-circuiting behavior\n// with logical operators.\n\npublic class ShortCircuit {\n  static boolean test1(int val) {\n    System.out.println("test1(" + val + ")");\n    System.out.println("result: " + (val < 1));\n    return val < 1;\n  }\n  static boolean test2(int val) {\n    System.out.println("test2(" + val + ")");\n    System.out.println("result: " + (val < 2));\n    return val < 2;\n  }\n  static boolean test3(int val) {\n    System.out.println("test3(" + val + ")");\n    System.out.println("result: " + (val < 3));\n    return val < 3;\n  }\n  public static void main(String[] args) {\n    if(test1(0) && test2(2) && test3(2))\n      System.out.println("expression is true");\n    else\n      System.out.println("expression is false");\n  }\n} ///:~\n')])])]),e("p",[n._v("每次测试都会比较参数，并返回真或假。它不会显示与准备调用什么有关的资料。测试在下面这个表达式中进行：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("if(test1(0)) && test2(2) && test3(2))\n")])])]),e("p",[n._v("很自然地，你也许认为所有这三个测试都会得以执行。但希望输出结果不至于使你大吃一惊：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("if(test1(0) && test2(2) && test3(2))\n")])])]),e("p",[n._v("第一个测试生成一个"),e("code",[n._v("true")]),n._v("结果，所以表达式求值会继续下去。然而，第二个测试产生了一个"),e("code",[n._v("false")]),n._v("结果。由于这意味着整个表达式肯定为"),e("code",[n._v("false")]),n._v("，所以为什么还要继续剩余的表达式呢？这样做只会徒劳无益。事实上，“短路”一词的由来正种因于此。如果一个逻辑表达式的所有部分都不必执行下去，那么潜在的性能提升将是相当可观的。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-7-按位运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-7-按位运算符"}},[n._v("#")]),n._v(" 3.1.7 按位运算符")]),n._v(" "),e("p",[n._v("按位运算符允许我们操作一个整数主数据类型中的单个“比特”，即二进制位。按位运算符会对两个参数中对应的位执行布尔代数，并最终生成一个结果。")]),n._v(" "),e("p",[n._v("按位运算来源于C语言的低级操作。我们经常都要直接操纵硬件，需要频繁设置硬件寄存器内的二进制位。Java的设计初衷是嵌入电视顶置盒内，所以这种低级操作仍被保留下来了。然而，由于操作系统的进步，现在也许不必过于频繁地进行按位运算。")]),n._v(" "),e("p",[n._v("若两个输入位都是1，则按位AND运算符（"),e("code",[n._v("&")]),n._v("）在输出位里生成一个1；否则生成0。若两个输入位里至少有一个是1，则按位OR运算符（"),e("code",[n._v("|")]),n._v("）在输出位里生成一个1；只有在两个输入位都是0的情况下，它才会生成一个0。若两个输入位的某一个是1，但不全都是1，那么按位XOR（"),e("code",[n._v("^")]),n._v("，异或）在输出位里生成一个1。按位NOT（"),e("code",[n._v("~")]),n._v("，也叫作“非”运算符）属于一元运算符；它只对一个参数进行操作（其他所有运算符都是二元运算符）。按位NOT生成与输入位的相反的值——若输入0，则输出1；输入1，则输出0。")]),n._v(" "),e("p",[n._v("按位运算符和逻辑运算符都使用了同样的字符，只是数量不同。因此，我们能方便地记忆各自的含义：由于“位”是非常“小”的，所以按位运算符仅使用了一个字符。")]),n._v(" "),e("p",[n._v("按位运算符可与等号（"),e("code",[n._v("=")]),n._v("）联合使用，以便合并运算及赋值："),e("code",[n._v("&=")]),n._v("，"),e("code",[n._v("|=")]),n._v("和"),e("code",[n._v("^=")]),n._v("都是合法的（由于"),e("code",[n._v("~")]),n._v("是一元运算符，所以不可与"),e("code",[n._v("=")]),n._v("联合使用）。")]),n._v(" "),e("p",[n._v("我们将"),e("code",[n._v("boolean")]),n._v("（布尔）类型当作一种“单位”或“单比特”值对待，所以它多少有些独特的地方。我们可执行按位AND，OR和XOR，但不能执行按位NOT（大概是为了避免与逻辑NOT混淆）。对于布尔值，按位运算符具有与逻辑运算符相同的效果，只是它们不会中途“短路”。此外，针对布尔值进行的按位运算为我们新增了一个XOR逻辑运算符，它并未包括在“逻辑”运算符的列表中。在移位表达式中，我们被禁止使用布尔运算，原因将在下面解释。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-8-移位运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-8-移位运算符"}},[n._v("#")]),n._v(" 3.1.8 移位运算符")]),n._v(" "),e("p",[n._v("移位运算符面向的运算对象也是二进制的“位”。可单独用它们处理整数类型（基本类型的一种）。左移位运算符（"),e("code",[n._v("<<")]),n._v("）能将运算符左边的运算对象向左移动运算符右侧指定的位数（在低位补0）。“有符号”右移位运算符（"),e("code",[n._v(">>")]),n._v("）则将运算符左边的运算对象向右移动运算符右侧指定的位数。“有符号”右移位运算符使用了“符号扩展”：若值为正，则在高位插入0；若值为负，则在高位插入1。Java也添加了一种“无符号”右移位运算符（"),e("code",[n._v(">>>")]),n._v("），它使用了“零扩展”：无论正负，都在高位插入0。这一运算符是C或C++没有的。")]),n._v(" "),e("p",[n._v("若对"),e("code",[n._v("char")]),n._v("，"),e("code",[n._v("byte")]),n._v("或者"),e("code",[n._v("short")]),n._v("进行移位处理，那么在移位进行之前，它们会自动转换成一个"),e("code",[n._v("int")]),n._v("。只有右侧的5个低位才会用到。这样可防止我们在一个"),e("code",[n._v("int")]),n._v("数里移动不切实际的位数。若对一个"),e("code",[n._v("long")]),n._v("值进行处理，最后得到的结果也是"),e("code",[n._v("long")]),n._v("。此时只会用到右侧的6个低位，防止移动超过"),e("code",[n._v("long")]),n._v("值里现成的位数。但在进行“无符号”右移位时，也可能遇到一个问题。若对"),e("code",[n._v("byte")]),n._v("或"),e("code",[n._v("short")]),n._v("值进行右移位运算，得到的可能不是正确的结果（Java 1.0和Java 1.1特别突出）。它们会自动转换成"),e("code",[n._v("int")]),n._v("类型，并进行右移位。但“零扩展”不会发生，所以在那些情况下会得到-1的结果。可用下面这个例子检测自己的实现方案：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//: URShift.java\n// Test of unsigned right shift\n\npublic class URShift {\n  public static void main(String[] args) {\n    int i = -1;\n    i >>>= 10;\n    System.out.println(i);\n    long l = -1;\n    l >>>= 10;\n    System.out.println(l);\n    short s = -1;\n    s >>>= 10;\n    System.out.println(s);\n    byte b = -1;\n    b >>>= 10;\n    System.out.println(b);\n  }\n} ///:~\n")])])]),e("p",[n._v("移位可与等号（"),e("code",[n._v("<<=")]),n._v("或"),e("code",[n._v(">>=")]),n._v("或"),e("code",[n._v(">>>=")]),n._v("）组合使用。此时，运算符左边的值会移动由右边的值指定的位数，再将得到的结果赋回左边的值。")]),n._v(" "),e("p",[n._v("下面这个例子向大家阐示了如何应用涉及“按位”操作的所有运算符，以及它们的效果：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: BitManipulation.java\n// Using the bitwise operators\nimport java.util.*;\n\npublic class BitManipulation {\n  public static void main(String[] args) {\n    Random rand = new Random();\n    int i = rand.nextInt();\n    int j = rand.nextInt();\n    pBinInt("-1", -1);\n    pBinInt("+1", +1);\n    int maxpos = 2147483647;\n    pBinInt("maxpos", maxpos);\n    int maxneg = -2147483648;\n    pBinInt("maxneg", maxneg);\n    pBinInt("i", i);\n    pBinInt("~i", ~i);\n    pBinInt("-i", -i);\n    pBinInt("j", j);\n    pBinInt("i & j", i & j);\n    pBinInt("i | j", i | j);\n    pBinInt("i ^ j", i ^ j);\n    pBinInt("i << 5", i << 5);\n    pBinInt("i >> 5", i >> 5);\n    pBinInt("(~i) >> 5", (~i) >> 5);\n    pBinInt("i >>> 5", i >>> 5);\n    pBinInt("(~i) >>> 5", (~i) >>> 5);\n\n    long l = rand.nextLong();\n    long m = rand.nextLong();\n    pBinLong("-1L", -1L);\n    pBinLong("+1L", +1L);\n    long ll = 9223372036854775807L;\n    pBinLong("maxpos", ll);\n    long lln = -9223372036854775808L;\n    pBinLong("maxneg", lln);\n    pBinLong("l", l);\n    pBinLong("~l", ~l);\n    pBinLong("-l", -l);\n    pBinLong("m", m);\n    pBinLong("l & m", l & m);\n    pBinLong("l | m", l | m);\n    pBinLong("l ^ m", l ^ m);\n    pBinLong("l << 5", l << 5);\n    pBinLong("l >> 5", l >> 5);\n    pBinLong("(~l) >> 5", (~l) >> 5);\n    pBinLong("l >>> 5", l >>> 5);\n    pBinLong("(~l) >>> 5", (~l) >>> 5);\n  }\n  static void pBinInt(String s, int i) {\n    System.out.println(\n      s + ", int: " + i + ", binary: ");\n    System.out.print("   ");\n    for(int j = 31; j >=0; j--)\n      if(((1 << j) &  i) != 0)\n        System.out.print("1");\n      else\n        System.out.print("0");\n    System.out.println();\n  }\n  static void pBinLong(String s, long l) {\n    System.out.println(\n      s + ", long: " + l + ", binary: ");\n    System.out.print("   ");\n    for(int i = 63; i >=0; i--)\n      if(((1L << i) & l) != 0)\n        System.out.print("1");\n      else\n        System.out.print("0");\n    System.out.println();\n  }\n} ///:~\n')])])]),e("p",[n._v("程序末尾调用了两个方法："),e("code",[n._v("pBinInt()")]),n._v("和"),e("code",[n._v("pBinLong()")]),n._v("。它们分别操作一个"),e("code",[n._v("int")]),n._v("和"),e("code",[n._v("long")]),n._v("值，并用一种二进制格式输出，同时附有简要的说明文字。目前，可暂时忽略它们具体的实现方案。")]),n._v(" "),e("p",[n._v("大家要注意的是"),e("code",[n._v("System.out.print()")]),n._v("的使用，而不是"),e("code",[n._v("System.out.println()")]),n._v("。"),e("code",[n._v("print()")]),n._v("方法不会产生一个新行，以便在同一行里罗列多种信息。")]),n._v(" "),e("p",[n._v("除展示所有按位运算符针对"),e("code",[n._v("int")]),n._v("和"),e("code",[n._v("long")]),n._v("的效果之外，本例也展示了"),e("code",[n._v("int")]),n._v("和"),e("code",[n._v("long")]),n._v("的最小值、最大值、+1和-1值，使大家能体会它们的情况。注意高位代表正负号：0为正，1为负。下面列出"),e("code",[n._v("int")]),n._v("部分的输出：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("-1, int: -1, binary:\n   11111111111111111111111111111111\n+1, int: 1, binary:\n   00000000000000000000000000000001\nmaxpos, int: 2147483647, binary:\n   01111111111111111111111111111111\nmaxneg, int: -2147483648, binary:\n   10000000000000000000000000000000\ni, int: 59081716, binary:\n   00000011100001011000001111110100\n~i, int: -59081717, binary:\n   11111100011110100111110000001011\n-i, int: -59081716, binary:\n   11111100011110100111110000001100\nj, int: 198850956, binary:\n   00001011110110100011100110001100\ni & j, int: 58720644, binary:\n   00000011100000000000000110000100\ni | j, int: 199212028, binary:\n   00001011110111111011101111111100\ni ^ j, int: 140491384, binary:\n   00001000010111111011101001111000\ni << 5, int: 1890614912, binary:\n   01110000101100000111111010000000\ni >> 5, int: 1846303, binary:\n   00000000000111000010110000011111\n(~i) >> 5, int: -1846304, binary:\n   11111111111000111101001111100000\ni >>> 5, int: 1846303, binary:\n   00000000000111000010110000011111\n(~i) >>> 5, int: 132371424, binary:\n   00000111111000111101001111100000\n")])])]),e("p",[n._v("数字的二进制形式表现为“有符号2的补值”。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-9-三元if-else运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-9-三元if-else运算符"}},[n._v("#")]),n._v(" 3.1.9 三元"),e("code",[n._v("if-else")]),n._v("运算符")]),n._v(" "),e("p",[n._v("这种运算符比较罕见，因为它有三个运算对象。但它确实属于运算符的一种，因为它最终也会生成一个值。这与本章后一节要讲述的普通"),e("code",[n._v("if-else")]),n._v("语句是不同的。表达式采取下述形式：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("布尔表达式 ? 值0:值1\n")])])]),e("p",[n._v("若“布尔表达式”的结果为"),e("code",[n._v("true")]),n._v("，就计算“值0”，而且它的结果成为最终由运算符产生的值。但若“布尔表达式”的结果为"),e("code",[n._v("false")]),n._v("，计算的就是“值1”，而且它的结果成为最终由运算符产生的值。")]),n._v(" "),e("p",[n._v("当然，也可以换用普通的"),e("code",[n._v("if-else")]),n._v("语句（在后面介绍），但三元运算符更加简洁。尽管C引以为傲的就是它是一种简练的语言，而且三元运算符的引入多半就是为了体现这种高效率的编程，但假若您打算频繁用它，还是要先多作一些思量——它很容易就会产生可读性极差的代码。")]),n._v(" "),e("p",[n._v("可将条件运算符用于自己的“副作用”，或用于它生成的值。但通常都应将其用于值，因为那样做可将运算符与"),e("code",[n._v("if-else")]),n._v("明确区别开。下面便是一个例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("static int ternary(int i) {\nreturn i < 10 ? i * 100 : i * 10;\n}\n")])])]),e("p",[n._v("可以看出，假设用普通的"),e("code",[n._v("if-else")]),n._v("结构写上述代码，代码量会比上面多出许多。如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("static int alternative(int i) {\nif (i < 10)\nreturn i * 100;\nreturn i * 10;\n}\n")])])]),e("p",[n._v("但第二种形式更易理解，而且不要求更多的录入。所以在挑选三元运算符时，请务必权衡一下利弊。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-10-逗号运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-10-逗号运算符"}},[n._v("#")]),n._v(" 3.1.10 逗号运算符")]),n._v(" "),e("p",[n._v("在C和C++里，逗号不仅作为函数参数列表的分隔符使用，也作为进行后续计算的一个运算符使用。在Java里需要用到逗号的唯一场所就是"),e("code",[n._v("for")]),n._v("循环，本章稍后会对此详加解释。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-11-字符串运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-11-字符串运算符"}},[n._v("#")]),n._v(" 3.1.11 字符串运算符"),e("code",[n._v("+")])]),n._v(" "),e("p",[n._v("这个运算符在Java里有一项特殊用途：连接不同的字符串。这一点已在前面的例子中展示过了。尽管与"),e("code",[n._v("+")]),n._v("的传统意义不符，但用"),e("code",[n._v("+")]),n._v("来做这件事情仍然是非常自然的。在C++里，这一功能看起来非常不错，所以引入了一项“运算符重载”机制，以便C++程序员为几乎所有运算符增加特殊的含义。但非常不幸，与C++的另外一些限制结合，运算符重载成为一种非常复杂的特性，程序员在设计自己的类时必须对此有周到的考虑。与C++相比，尽管运算符重载在Java里更易实现，但迄今为止仍然认为这一特性过于复杂。所以Java程序员不能象C++程序员那样设计自己的重载运算符。")]),n._v(" "),e("p",[n._v("我们注意到运用"),e("code",[n._v("String +")]),n._v("时一些有趣的现象。若表达式以一个"),e("code",[n._v("String")]),n._v("起头，那么后续所有运算对象都必须是字符串。如下所示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('int x = 0, y = 1, z = 2;\nString sString = "x, y, z ";\nSystem.out.println(sString + x + y + z);\n')])])]),e("p",[n._v("在这里，Java编译程序会将"),e("code",[n._v("x")]),n._v("，"),e("code",[n._v("y")]),n._v("和"),e("code",[n._v("z")]),n._v("转换成它们的字符串形式，而不是先把它们加到一起。然而，如果使用下述语句：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("System.out.println(x + sString);\n")])])]),e("p",[n._v("那么早期版本的Java就会提示出错（以后的版本能将"),e("code",[n._v("x")]),n._v("转换成一个字符串）。因此，如果想通过“加号”连接字符串（使用Java的早期版本），请务必保证第一个元素是字符串（或加上引号的一系列字符，编译能将其识别成一个字符串）。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-12-运算符常规操作规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-12-运算符常规操作规则"}},[n._v("#")]),n._v(" 3.1.12 运算符常规操作规则")]),n._v(" "),e("p",[n._v("使用运算符的一个缺点是括号的运用经常容易搞错。即使对一个表达式如何计算有丝毫不确定的因素，都容易混淆括号的用法。这个问题在Java里仍然存在。\n在C和C++中，一个特别常见的错误如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("while(x = y) {\n//...\n}\n")])])]),e("p",[n._v("程序的意图是测试是否“相等”（"),e("code",[n._v("==")]),n._v("），而不是进行赋值操作。在C和C++中，若"),e("code",[n._v("y")]),n._v("是一个非零值，那么这种赋值的结果肯定是"),e("code",[n._v("true")]),n._v("。这样使可能得到一个无限循环。在Java里，这个表达式的结果并不是布尔值，而编译器期望的是一个布尔值，而且不会从一个"),e("code",[n._v("int")]),n._v("数值中转换得来。所以在编译时，系统就会提示出现错误，有效地阻止我们进一步运行程序。所以这个缺点在Java里永远不会造成更严重的后果。唯一不会得到编译错误的时候是"),e("code",[n._v("x")]),n._v("和"),e("code",[n._v("y")]),n._v("都为布尔值。在这种情况下，"),e("code",[n._v("x = y")]),n._v("属于合法表达式。而在上述情况下，则可能是一个错误。")]),n._v(" "),e("p",[n._v("在C和C++里，类似的一个问题是使用按位AND和OR，而不是逻辑AND和OR。按位AND和OR使用两个字符之一（"),e("code",[n._v("&")]),n._v("或"),e("code",[n._v("|")]),n._v("），而逻辑AND和OR使用两个相同的字符（"),e("code",[n._v("&&")]),n._v("或"),e("code",[n._v("||")]),n._v("）。就象"),e("code",[n._v("=")]),n._v("和"),e("code",[n._v("==")]),n._v("一样，键入一个字符当然要比键入两个简单。在Java里，编译器同样可防止这一点，因为它不允许我们强行使用一种并不属于的类型。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-13-转换运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-13-转换运算符"}},[n._v("#")]),n._v(" 3.1.13 转换运算符")]),n._v(" "),e("p",[n._v("“转换”（Cast）的作用是“与一个模型匹配”。在适当的时候，Java会将一种数据类型自动转换成另一种。例如，假设我们为浮点变量分配一个整数值，计算机会将"),e("code",[n._v("int")]),n._v("自动转换成"),e("code",[n._v("float")]),n._v("。通过转换，我们可明确设置这种类型的转换，或者在一般没有可能进行的时候强迫它进行。")]),n._v(" "),e("p",[n._v("为进行一次转换，要将括号中希望的数据类型（包括所有修改符）置于其他任何值的左侧。下面是一个例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("void casts() {\nint i = 200;\nlong l = (long)i;\nlong l2 = (long)200;\n}\n")])])]),e("p",[n._v("正如您看到的那样，既可对一个数值进行转换处理，亦可对一个变量进行转换处理。但在这儿展示的两种情况下，转换均是多余的，因为编译器在必要的时候会自动进行"),e("code",[n._v("int")]),n._v("值到"),e("code",[n._v("long")]),n._v("值的转换。当然，仍然可以设置一个转换，提醒自己留意，也使程序更清楚。在其他情况下，转换只有在代码编译时才显出重要性。")]),n._v(" "),e("p",[n._v("在C和C++中，转换有时会让人头痛。在Java里，转换则是一种比较安全的操作。但是，若进行一种名为“缩小转换”（Narrowing Conversion）的操作（也就是说，脚本是能容纳更多信息的数据类型，将其转换成容量较小的类型），此时就可能面临信息丢失的危险。此时，编译器会强迫我们进行转换，就好象说：“这可能是一件危险的事情——如果您想让我不顾一切地做，那么对不起，请明确转换。”而对于“放大转换”（Widening conversion），则不必进行明确转换，因为新类型肯定能容纳原来类型的信息，不会造成任何信息的丢失。")]),n._v(" "),e("p",[n._v("Java允许我们将任何基本类型“转换”为其他任何一种基本类型，但布尔值（"),e("code",[n._v("bollean")]),n._v("）要除外，后者根本不允许进行任何转换处理。“类”不允许进行转换。为了将一种类转换成另一种，必须采用特殊的方法（字符串是一种特殊的情况，本书后面会讲到将对象转换到一个类型“家族”里；例如，“橡树”可转换为“树”；反之亦然。但对于其他外来类型，如“岩石”，则不能转换为“树”）。")]),n._v(" "),e("p",[e("strong",[n._v("1. 字面值")])]),n._v(" "),e("p",[n._v("最开始的时候，若在一个程序里插入“字面值”（Literal），编译器通常能准确知道要生成什么样的类型。但在有些时候，对于类型却是暧昧不清的。若发生这种情况，必须对编译器加以适当的“指导”。方法是用与字面值关联的字符形式加入一些额外的信息。下面这段代码向大家展示了这些字符。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//: Literals.java\n\nclass Literals {\n  char c = 0xffff; // max char hex value\n  byte b = 0x7f; // max byte hex value\n  short s = 0x7fff; // max short hex value\n  int i1 = 0x2f; // Hexadecimal (lowercase)\n  int i2 = 0X2F; // Hexadecimal (uppercase)\n  int i3 = 0177; // Octal (leading zero)\n  // Hex and Oct also work with long.\n  long n1 = 200L; // long suffix\n  long n2 = 200l; // long suffix\n  long n3 = 200;\n  //! long l6(200); // not allowed\n  float f1 = 1;\n  float f2 = 1F; // float suffix\n  float f3 = 1f; // float suffix\n  float f4 = 1e-45f; // 10 to the power\n  float f5 = 1e+9f; // float suffix\n  double d1 = 1d; // double suffix\n  double d2 = 1D; // double suffix\n  double d3 = 47e47d; // 10 to the power\n} ///:~\n")])])]),e("p",[n._v("十六进制（Base 16）——它适用于所有整数数据类型——用一个前置的"),e("code",[n._v("0x")]),n._v("或"),e("code",[n._v("0X")]),n._v("指示。并在后面跟随采用大写或小写形式的"),e("code",[n._v("0-9")]),n._v("以及"),e("code",[n._v("a-f")]),n._v("。若试图将一个变量初始化成超出自身能力的一个值（无论这个值的数值形式如何），编译器就会向我们报告一条出错消息。注意在上述代码中，最大的十六进制值只会在"),e("code",[n._v("char")]),n._v("，"),e("code",[n._v("byte")]),n._v("以及"),e("code",[n._v("short")]),n._v("身上出现。若超出这一限制，编译器会将值自动变成一个"),e("code",[n._v("int")]),n._v("，并告诉我们需要对这一次赋值进行“缩小转换”。这样一来，我们就可清楚获知自己已超载了边界。")]),n._v(" "),e("p",[n._v("八进制（Base 8）是用数字中的一个前置"),e("code",[n._v("0")]),n._v("以及"),e("code",[n._v("0-7")]),n._v("的数位指示的。在C，C++或者Java中，对二进制数字没有相应的“字面”表示方法。")]),n._v(" "),e("p",[n._v("字面值后的尾随字符标志着它的类型。若为大写或小写的"),e("code",[n._v("L")]),n._v("，代表"),e("code",[n._v("long")]),n._v("；大写或小写的"),e("code",[n._v("F")]),n._v("，代表"),e("code",[n._v("float")]),n._v("；大写或小写的"),e("code",[n._v("D")]),n._v("，则代表"),e("code",[n._v("double")]),n._v("。")]),n._v(" "),e("p",[n._v("指数总是采用一种我们认为很不直观的记号方法："),e("code",[n._v("1.39e-47f")]),n._v("。在科学与工程学领域，"),e("code",[n._v("e")]),n._v("代表自然对数的基数，约等于"),e("code",[n._v("2.718")]),n._v("（Java一种更精确的"),e("code",[n._v("double")]),n._v("值采用"),e("code",[n._v("Math.E")]),n._v("的形式）。它在象“"),e("code",[n._v("1.39×e")]),n._v("的-47次方”这样的指数表达式中使用，意味着“"),e("code",[n._v("1.39×2.718")]),n._v("的-47次方”。然而，自FORTRAN语言发明后，人们自然而然地觉得"),e("code",[n._v("e")]),n._v("代表“10多少次幂”。这种做法显得颇为古怪，因为FORTRAN最初面向的是科学与工程设计领域。理所当然，它的设计者应对这样的混淆概念持谨慎态度（注释①）。但不管怎样，这种特别的表达方法在C，C++以及现在的Java中顽固地保留下来了。所以倘若您习惯将"),e("code",[n._v("e")]),n._v("作为自然对数的基数使用，那么在Java中看到象"),e("code",[n._v("1.39e-47f")]),n._v("这样的表达式时，请转换您的思维，从程序设计的角度思考它；它真正的含义是“"),e("code",[n._v("1.39×10")]),n._v("的-47次方”。")]),n._v(" "),e("p",[n._v("①：John Kirkham这样写道：“我最早于1962年在一部IBM 1620机器上使用FORTRAN II。那时——包括60年代以及70年代的早期，FORTRAN一直都是使用大写字母。之所以会出现这一情况，可能是由于早期的输入设备大多是老式电传打字机，使用5位Baudot码，那种码并不具备小写能力。乘幂表达式中的‘E’也肯定是大写的，所以不会与自然对数的基数"),e("code",[n._v("e")]),n._v("发生冲突，后者必然是小写的。"),e("code",[n._v("E")]),n._v("这个字母的含义其实很简单，就是‘Exponential’的意思，即‘指数’或‘幂数’，代表计算系统的基数——一般都是10。当时，八进制也在程序员中广泛使用。尽管我自己未看到它的使用，但假若我在乘幂表达式中看到一个八进制数字，就会把它认作Base 8。我记得第一次看到用小写"),e("code",[n._v("e")]),n._v("表示指数是在70年代末期。我当时也觉得它极易产生混淆。所以说，这个问题完全是自己‘潜入’FORTRAN里去的，并非一开始就有。如果你真的想使用自然对数的基数，实际有现成的函数可供利用，但它们都是大写的。”")]),n._v(" "),e("p",[n._v("注意如果编译器能够正确地识别类型，就不必使用尾随字符。对于下述语句：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("long n3 = 200;\n")])])]),e("p",[n._v("它并不存在含混不清的地方，所以200后面的一个"),e("code",[n._v("L")]),n._v("大可省去。然而，对于下述语句：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("float f4 = 1e-47f; //10的幂数\n")])])]),e("p",[n._v("编译器通常会将指数作为双精度数（"),e("code",[n._v("double")]),n._v("）处理，所以假如没有这个尾随的"),e("code",[n._v("f")]),n._v("，就会收到一条出错提示，告诉我们须用一个“转换”将"),e("code",[n._v("double")]),n._v("转换成"),e("code",[n._v("float")]),n._v("。")]),n._v(" "),e("p",[e("strong",[n._v("2. 转型")])]),n._v(" "),e("p",[n._v("大家会发现假若对主数据类型执行任何算术或按位运算，只要它们“比"),e("code",[n._v("int")]),n._v("小”（即"),e("code",[n._v("char")]),n._v("，"),e("code",[n._v("byte")]),n._v("或者"),e("code",[n._v("short")]),n._v("），那么在正式执行运算之前，那些值会自动转换成"),e("code",[n._v("int")]),n._v("。这样一来，最终生成的值就是"),e("code",[n._v("int")]),n._v("类型。所以只要把一个值赋回较小的类型，就必须使用“转换”。此外，由于是将值赋回给较小的类型，所以可能出现信息丢失的情况）。通常，表达式中最大的数据类型是决定了表达式最终结果大小的那个类型。若将一个"),e("code",[n._v("float")]),n._v("值与一个"),e("code",[n._v("double")]),n._v("值相乘，结果就是"),e("code",[n._v("double")]),n._v("；如将一个"),e("code",[n._v("int")]),n._v("和一个"),e("code",[n._v("long")]),n._v("值相加，则结果为"),e("code",[n._v("long")]),n._v("。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-14-java没有sizeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-14-java没有sizeof"}},[n._v("#")]),n._v(" 3.1.14 Java没有"),e("code",[n._v("sizeof")])]),n._v(" "),e("p",[n._v("在C和C++中，"),e("code",[n._v("sizeof()")]),n._v("运算符能满足我们的一项特殊需要：获知为数据项目分配的字符数量。在C和C++中，"),e("code",[n._v("size()")]),n._v("最常见的一种应用就是“移植”。不同的数据在不同的机器上可能有不同的大小，所以在进行一些对大小敏感的运算时，程序员必须对那些类型有多大做到心中有数。例如，一台计算机可用32位来保存整数，而另一台只用16位保存。显然，在第一台机器中，程序可保存更大的值。正如您可能已经想到的那样，移植是令C和C++程序员颇为头痛的一个问题。\nJava不需要"),e("code",[n._v("sizeof()")]),n._v("运算符来满足这方面的需要，因为所有数据类型在所有机器的大小都是相同的。我们不必考虑移植问题——Java本身就是一种“与平台无关”的语言。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-15-复习计算顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-15-复习计算顺序"}},[n._v("#")]),n._v(" 3.1.15 复习计算顺序")]),n._v(" "),e("p",[n._v("在我举办的一次培训班中，有人抱怨运算符的优先顺序太难记了。一名学生推荐用一句话来帮助记忆：“Ulcer Addicts Really Like C A lot”，即“溃疡患者特别喜欢（维生素）C”。")]),n._v(" "),e("table",[e("thead",[e("tr",[e("th",[n._v("助记词")]),n._v(" "),e("th",{staticStyle:{"text-align":"center"}},[n._v("运算符类型")]),n._v(" "),e("th",{staticStyle:{"text-align":"right"}},[n._v("运算符")])])]),n._v(" "),e("tbody",[e("tr",[e("td",[n._v("Ulcer")]),n._v(" "),e("td",{staticStyle:{"text-align":"center"}},[n._v("Unary")]),n._v(" "),e("td",{staticStyle:{"text-align":"right"}},[e("code",[n._v("+ - ++ – [[ rest...]]")])])]),n._v(" "),e("tr",[e("td",[n._v("Addicts")]),n._v(" "),e("td",{staticStyle:{"text-align":"center"}},[n._v("Arithmetic (and shift)")]),n._v(" "),e("td",{staticStyle:{"text-align":"right"}},[e("code",[n._v("* / % + - << >>")])])]),n._v(" "),e("tr",[e("td",[n._v("Really")]),n._v(" "),e("td",{staticStyle:{"text-align":"center"}},[n._v("Relational")]),n._v(" "),e("td",{staticStyle:{"text-align":"right"}},[e("code",[n._v("> < >= <= == !=")])])]),n._v(" "),e("tr",[e("td",[n._v("Like")]),n._v(" "),e("td",{staticStyle:{"text-align":"center"}},[n._v("Logical (and bitwise)")]),n._v(" "),e("td",{staticStyle:{"text-align":"right"}},[n._v("** &&")])]),n._v(" "),e("tr",[e("td",[n._v("C")]),n._v(" "),e("td",{staticStyle:{"text-align":"center"}},[n._v("Conditional (ternary)")]),n._v(" "),e("td",{staticStyle:{"text-align":"right"}},[e("code",[n._v("A > B ? X : Y")])])]),n._v(" "),e("tr",[e("td",[n._v("A Lot")]),n._v(" "),e("td",{staticStyle:{"text-align":"center"}},[n._v("Assignment")]),n._v(" "),e("td",{staticStyle:{"text-align":"right"}},[e("code",[n._v("= (and compound assignment like *=)")])])])])]),n._v(" "),e("p",[n._v("当然，对于移位和按位运算符，上表并不是完美的助记方法；但对于其他运算来说，它确实很管用。")]),n._v(" "),e("h2",{attrs:{id:"_3-1-16-运算符总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-16-运算符总结"}},[n._v("#")]),n._v(" 3.1.16 运算符总结")]),n._v(" "),e("p",[n._v("下面这个例子向大家展示了如何随同特定的运算符使用主数据类型。从根本上说，它是同一个例子反迭代复地执行，只是使用了不同的主数据类型。文件编译时不会报错，因为那些会导致错误的行已用"),e("code",[n._v("//!")]),n._v("变成了注释内容。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//: AllOps.java\n// Tests all the operators on all the\n// primitive data types to show which\n// ones are accepted by the Java compiler.\n\nclass AllOps {\n  // To accept the results of a boolean test:\n  void f(boolean b) {}\n  void boolTest(boolean x, boolean y) {\n    // Arithmetic operators:\n    //! x = x * y;\n    //! x = x / y;\n    //! x = x % y;\n    //! x = x + y;\n    //! x = x - y;\n    //! x++;\n    //! x--;\n    //! x = +y;\n    //! x = -y;\n    // Relational and logical:\n    //! f(x > y);\n    //! f(x >= y);\n    //! f(x < y);\n    //! f(x <= y);\n    f(x == y);\n    f(x != y);\n    f(!y);\n    x = x && y;\n    x = x || y;\n    // Bitwise operators:\n    //! x = ~y;\n    x = x & y;\n    x = x | y;\n    x = x ^ y;\n    //! x = x << 1;\n    //! x = x >> 1;\n    //! x = x >>> 1;\n    // Compound assignment:\n    //! x += y;\n    //! x -= y;\n    //! x *= y;\n    //! x /= y;\n    //! x %= y;\n    //! x <<= 1;\n    //! x >>= 1;\n    //! x >>>= 1;\n    x &= y;\n    x ^= y;\n    x |= y;\n    // Casting:\n    //! char c = (char)x;\n    //! byte B = (byte)x;\n    //! short s = (short)x;\n    //! int i = (int)x;\n    //! long l = (long)x;\n    //! float f = (float)x;\n    //! double d = (double)x;\n  }\n  void charTest(char x, char y) {\n    // Arithmetic operators:\n    x = (char)(x * y);\n    x = (char)(x / y);\n    x = (char)(x % y);\n    x = (char)(x + y);\n    x = (char)(x - y);\n    x++;\n    x--;\n    x = (char)+y;\n    x = (char)-y;\n    // Relational and logical:\n    f(x > y);\n    f(x >= y);\n    f(x < y);\n    f(x <= y);\n    f(x == y);\n    f(x != y);\n    //! f(!x);\n    //! f(x && y);\n    //! f(x || y);\n    // Bitwise operators:\n    x= (char)~y;\n    x = (char)(x & y);\n    x  = (char)(x | y);\n    x = (char)(x ^ y);\n    x = (char)(x << 1);\n    x = (char)(x >> 1);\n    x = (char)(x >>> 1);\n    // Compound assignment:\n    x += y;\n    x -= y;\n    x *= y;\n    x /= y;\n    x %= y;\n    x <<= 1;\n    x >>= 1;\n    x >>>= 1;\n    x &= y;\n    x ^= y;\n    x |= y;\n    // Casting:\n    //! boolean b = (boolean)x;\n    byte B = (byte)x;\n    short s = (short)x;\n    int i = (int)x;\n    long l = (long)x;\n    float f = (float)x;\n    double d = (double)x;\n  }\n  void byteTest(byte x, byte y) {\n    // Arithmetic operators:\n    x = (byte)(x* y);\n    x = (byte)(x / y);\n    x = (byte)(x % y);\n    x = (byte)(x + y);\n    x = (byte)(x - y);\n    x++;\n    x--;\n    x = (byte)+ y;\n    x = (byte)- y;\n    // Relational and logical:\n    f(x > y);\n    f(x >= y);\n    f(x < y);\n    f(x <= y);\n    f(x == y);\n    f(x != y);\n    //! f(!x);\n    //! f(x && y);\n    //! f(x || y);\n    // Bitwise operators:\n    x = (byte)~y;\n    x = (byte)(x & y);\n    x = (byte)(x | y);\n    x = (byte)(x ^ y);\n    x = (byte)(x << 1);\n    x = (byte)(x >> 1);\n    x = (byte)(x >>> 1);\n    // Compound assignment:\n    x += y;\n    x -= y;\n    x *= y;\n    x /= y;\n    x %= y;\n    x <<= 1;\n    x >>= 1;\n    x >>>= 1;\n    x &= y;\n    x ^= y;\n    x |= y;\n    // Casting:\n    //! boolean b = (boolean)x;\n    char c = (char)x;\n    short s = (short)x;\n    int i = (int)x;\n    long l = (long)x;\n    float f = (float)x;\n    double d = (double)x;\n  }\n  void shortTest(short x, short y) {\n    // Arithmetic operators:\n    x = (short)(x * y);\n    x = (short)(x / y);\n    x = (short)(x % y);\n    x = (short)(x + y);\n    x = (short)(x - y);\n    x++;\n    x--;\n    x = (short)+y;\n    x = (short)-y;\n    // Relational and logical:\n    f(x > y);\n    f(x >= y);\n    f(x < y);\n    f(x <= y);\n    f(x == y);\n    f(x != y);\n    //! f(!x);\n    //! f(x && y);\n    //! f(x || y);\n    // Bitwise operators:\n    x = (short)~y;\n    x = (short)(x & y);\n    x = (short)(x | y);\n    x = (short)(x ^ y);\n    x = (short)(x << 1);\n    x = (short)(x >> 1);\n    x = (short)(x >>> 1);\n    // Compound assignment:\n    x += y;\n    x -= y;\n    x *= y;\n    x /= y;\n    x %= y;\n    x <<= 1;\n    x >>= 1;\n    x >>>= 1;\n    x &= y;\n    x ^= y;\n    x |= y;\n    // Casting:\n    //! boolean b = (boolean)x;\n    char c = (char)x;\n    byte B = (byte)x;\n    int i = (int)x;\n    long l = (long)x;\n    float f = (float)x;\n    double d = (double)x;\n  }\n  void intTest(int x, int y) {\n    // Arithmetic operators:\n    x = x * y;\n    x = x / y;\n    x = x % y;\n    x = x + y;\n    x = x - y;\n    x++;\n    x--;\n    x = +y;\n    x = -y;\n    // Relational and logical:\n    f(x > y);\n    f(x >= y);\n    f(x < y);\n    f(x <= y);\n    f(x == y);\n    f(x != y);\n    //! f(!x);\n    //! f(x && y);\n    //! f(x || y);\n    // Bitwise operators:\n    x = ~y;\n    x = x & y;\n    x = x | y;\n    x = x ^ y;\n    x = x << 1;\n    x = x >> 1;\n    x = x >>> 1;\n    // Compound assignment:\n    x += y;\n    x -= y;\n    x *= y;\n    x /= y;\n    x %= y;\n    x <<= 1;\n    x >>= 1;\n    x >>>= 1;\n    x &= y;\n    x ^= y;\n    x |= y;\n    // Casting:\n    //! boolean b = (boolean)x;\n    char c = (char)x;\n    byte B = (byte)x;\n    short s = (short)x;\n    long l = (long)x;\n    float f = (float)x;\n    double d = (double)x;\n  }\n  void longTest(long x, long y) {\n    // Arithmetic operators:\n    x = x * y;\n    x = x / y;\n    x = x % y;\n    x = x + y;\n    x = x - y;\n    x++;\n    x--;\n    x = +y;\n    x = -y;\n    // Relational and logical:\n    f(x > y);\n    f(x >= y);\n    f(x < y);\n    f(x <= y);\n    f(x == y);\n    f(x != y);\n    //! f(!x);\n    //! f(x && y);\n    //! f(x || y);\n    // Bitwise operators:\n    x = ~y;\n    x = x & y;\n    x = x | y;\n    x = x ^ y;\n    x = x << 1;\n    x = x >> 1;\n    x = x >>> 1;\n    // Compound assignment:\n    x += y;\n    x -= y;\n    x *= y;\n    x /= y;\n    x %= y;\n    x <<= 1;\n    x >>= 1;\n    x >>>= 1;\n    x &= y;\n    x ^= y;\n    x |= y;\n    // Casting:\n    //! boolean b = (boolean)x;\n    char c = (char)x;\n    byte B = (byte)x;\n    short s = (short)x;\n    int i = (int)x;\n    float f = (float)x;\n    double d = (double)x;\n  }\n  void floatTest(float x, float y) {\n    // Arithmetic operators:\n    x = x * y;\n    x = x / y;\n    x = x % y;\n    x = x + y;\n    x = x - y;\n    x++;\n    x--;\n    x = +y;\n    x = -y;\n    // Relational and logical:\n    f(x > y);\n    f(x >= y);\n    f(x < y);\n    f(x <= y);\n    f(x == y);\n    f(x != y);\n    //! f(!x);\n    //! f(x && y);\n    //! f(x || y);\n    // Bitwise operators:\n    //! x = ~y;\n    //! x = x & y;\n    //! x = x | y;\n    //! x = x ^ y;\n    //! x = x << 1;\n    //! x = x >> 1;\n    //! x = x >>> 1;\n    // Compound assignment:\n    x += y;\n    x -= y;\n    x *= y;\n    x /= y;\n    x %= y;\n    //! x <<= 1;\n    //! x >>= 1;\n    //! x >>>= 1;\n    //! x &= y;\n    //! x ^= y;\n    //! x |= y;\n    // Casting:\n    //! boolean b = (boolean)x;\n    char c = (char)x;\n    byte B = (byte)x;\n    short s = (short)x;\n    int i = (int)x;\n    long l = (long)x;\n    double d = (double)x;\n  }\n  void doubleTest(double x, double y) {\n    // Arithmetic operators:\n    x = x * y;\n    x = x / y;\n    x = x % y;\n    x = x + y;\n    x = x - y;\n    x++;\n    x--;\n    x = +y;\n    x = -y;\n    // Relational and logical:\n    f(x > y);\n    f(x >= y);\n    f(x < y);\n    f(x <= y);\n    f(x == y);\n    f(x != y);\n    //! f(!x);\n    //! f(x && y);\n    //! f(x || y);\n    // Bitwise operators:\n    //! x = ~y;\n    //! x = x & y;\n    //! x = x | y;\n    //! x = x ^ y;\n    //! x = x << 1;\n    //! x = x >> 1;\n    //! x = x >>> 1;\n    // Compound assignment:\n    x += y;\n    x -= y;\n    x *= y;\n    x /= y;\n    x %= y;\n    //! x <<= 1;\n    //! x >>= 1;\n    //! x >>>= 1;\n    //! x &= y;\n    //! x ^= y;\n    //! x |= y;\n    // Casting:\n    //! boolean b = (boolean)x;\n    char c = (char)x;\n    byte B = (byte)x;\n    short s = (short)x;\n    int i = (int)x;\n    long l = (long)x;\n    float f = (float)x;\n  }\n} ///:~\n")])])]),e("p",[n._v("注意布尔值（"),e("code",[n._v("boolean")]),n._v("）的能力非常有限。我们只能为其赋予"),e("code",[n._v("true")]),n._v("和"),e("code",[n._v("false")]),n._v("值。而且可测试它为真还是为假，但不可为它们再添加布尔值，或进行其他其他任何类型运算。")]),n._v(" "),e("p",[n._v("在"),e("code",[n._v("char")]),n._v("，"),e("code",[n._v("byte")]),n._v("和"),e("code",[n._v("short")]),n._v("中，我们可看到算术运算符的“转型”效果。对这些类型的任何一个进行算术运算，都会获得一个"),e("code",[n._v("int")]),n._v("结果。必须将其明确“转换”回原来的类型（缩小转换会造成信息的丢失），以便将值赋回那个类型。但对于"),e("code",[n._v("int")]),n._v("值，却不必进行转换处理，因为所有数据都已经属于"),e("code",[n._v("int")]),n._v("类型。然而，不要放松警惕，认为一切事情都是安全的。如果对两个足够大的int值执行乘法运算，结果值就会溢出。下面这个例子向大家展示了这一点：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//: Overflow.java\n// Surprise! Java lets you overflow.\n\npublic class Overflow {\n  public static void main(String[] args) {\n    int big = 0x7fffffff; // max int value\n    prt("big = " + big);\n    int bigger = big * 4;\n    prt("bigger = " + bigger);\n  }\n  static void prt(String s) {\n    System.out.println(s);\n  }\n} ///:~\n')])])]),e("p",[n._v("输出结果如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("big = 2147483647\nbigger = -4\n")])])]),e("p",[n._v("而且不会从编译器那里收到出错提示，运行时也不会出现异常反应。爪哇咖啡（Java）确实是很好的东西，但却没有“那么”好！")]),n._v(" "),e("p",[n._v("对于"),e("code",[n._v("char")]),n._v("，"),e("code",[n._v("byte")]),n._v("或者"),e("code",[n._v("short")]),n._v("，混合赋值并不需要转换。即使它们执行转型操作，也会获得与直接算术运算相同的结果。而在另一方面，将转换略去可使代码显得更加简练。")]),n._v(" "),e("p",[n._v("大家可以看到，除"),e("code",[n._v("boolean")]),n._v("以外，任何一种基本类型都可通过转换变为其他基本类型。同样地，当转换成一种较小的类型时，必须留意“缩小转换”的后果。否则会在转换过程中不知不觉地丢失信息。")])])}),[],!1,null,null,null);t.default=v.exports}}]);