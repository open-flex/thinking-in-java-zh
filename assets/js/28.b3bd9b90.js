(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{425:function(e,n,t){"use strict";t.r(n);var i=t(56),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_10-4-file类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-file类"}},[e._v("#")]),e._v(" 10.4 File类")]),e._v(" "),t("p",[t("code",[e._v("File")]),e._v("类有一个欺骗性的名字——通常会认为它对付的是一个文件，但实情并非如此。它既代表一个特定文件的名字，也代表目录内一系列文件的名字。若代表一个文件集，便可用"),t("code",[e._v("list()")]),e._v("方法查询这个集，返回的是一个字符串数组。之所以要返回一个数组，而非某个灵活的集合类，是因为元素的数量是固定的。而且若想得到一个不同的目录列表，只需创建一个不同的"),t("code",[e._v("File")]),e._v("对象即可。事实上，"),t("code",[e._v("FilePath")]),e._v("（文件路径）似乎是一个更好的名字。本节将向大家完整地例示如何使用这个类，其中包括相关的"),t("code",[e._v("FilenameFilter")]),e._v("（文件名过滤器）接口。")]),e._v(" "),t("h2",{attrs:{id:"_10-4-1-目录列表器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-1-目录列表器"}},[e._v("#")]),e._v(" 10.4.1 目录列表器")]),e._v(" "),t("p",[e._v("现在假设我们想观看一个目录列表。可用两种方式列出"),t("code",[e._v("File")]),e._v("对象。若在不含参数的情况下调用"),t("code",[e._v("list()")]),e._v("，会获得"),t("code",[e._v("File")]),e._v("对象包含的一个完整列表。然而，若想对这个列表进行某些限制，就需要使用一个“目录过滤器”，该类的作用是指出应如何选择"),t("code",[e._v("File")]),e._v("对象来完成显示。")]),e._v(" "),t("p",[e._v("下面是用于这个例子的代码（或在执行该程序时遇到困难，请参考第3章3.1.2小节“赋值”）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: DirList.java\n// Displays directory listing\npackage c10;\nimport java.io.*;\n\npublic class DirList {\n  public static void main(String[] args) {\n    try {\n      File path = new File(".");\n      String[] list;\n      if(args.length == 0)\n        list = path.list();\n      else\n        list = path.list(new DirFilter(args[0]));\n      for(int i = 0; i < list.length; i++)\n        System.out.println(list[i]);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n\nclass DirFilter implements FilenameFilter {\n  String afn;\n  DirFilter(String afn) { this.afn = afn; }\n  public boolean accept(File dir, String name) {\n    // Strip path information:\n    String f = new File(name).getName();\n    return f.indexOf(afn) != -1;\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("DirFilter")]),e._v("类“实现”了"),t("code",[e._v("interface FilenameFilter")]),e._v("（关于接口的问题，已在第7章进行了详述）。下面让我们看看"),t("code",[e._v("FilenameFilter")]),e._v("接口有多么简单：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public interface FilenameFilter {\nboolean accept(文件目录, 字符串名);\n}\n")])])]),t("p",[e._v("它指出这种类型的所有对象都提供了一个名为"),t("code",[e._v("accept()")]),e._v("的方法。之所以要创建这样的一个类，背后的全部原因就是把"),t("code",[e._v("accept()")]),e._v("方法提供给"),t("code",[e._v("list()")]),e._v("方法，使"),t("code",[e._v("list()")]),e._v("能够“回调”"),t("code",[e._v("accept()")]),e._v("，从而判断应将哪些文件名包括到列表中。因此，通常将这种技术称为“回调”，有时也称为“算子”（也就是说，"),t("code",[e._v("DirFilter")]),e._v("是一个算子，因为它唯一的作用就是容纳一个方法）。由于"),t("code",[e._v("list()")]),e._v("采用一个"),t("code",[e._v("FilenameFilter")]),e._v("对象作为自己的参数使用，所以我们能传递实现了"),t("code",[e._v("FilenameFilter")]),e._v("的任何类的一个对象，用它决定（甚至在运行期）"),t("code",[e._v("list()")]),e._v("方法的行为方式。回调的目的是在代码的行为上提供更大的灵活性。")]),e._v(" "),t("p",[e._v("通过"),t("code",[e._v("DirFilter")]),e._v("，我们看出尽管一个“接口”只包含了一系列方法，但并不局限于只能写那些方法（但是，至少必须提供一个接口内所有方法的定义。在这种情况下，"),t("code",[e._v("DirFilter")]),e._v("构造器也会创建）。")]),e._v(" "),t("p",[t("code",[e._v("accept()")]),e._v("方法必须接纳一个"),t("code",[e._v("File")]),e._v("对象，用它指示用于寻找一个特定文件的目录；并接纳一个"),t("code",[e._v("String")]),e._v("，其中包含了要寻找之文件的名字。可决定使用或忽略这两个参数之一，但有时至少要使用文件名。记住"),t("code",[e._v("list()")]),e._v("方法准备为目录对象中的每个文件名调用")]),e._v(" "),t("p",[t("code",[e._v("accept()")]),e._v("，核实哪个应包含在内——具体由"),t("code",[e._v("accept()")]),e._v("返回的“布尔”结果决定。\n为确定我们操作的只是文件名，其中没有包含路径信息，必须采用"),t("code",[e._v("String")]),e._v("对象，并在它的外部创建一个"),t("code",[e._v("File")]),e._v("对象。然后调用")]),e._v(" "),t("p",[t("code",[e._v("getName()")]),e._v("，它的作用是去除所有路径信息（采用与平台无关的方式）。随后，"),t("code",[e._v("accept()")]),e._v("用"),t("code",[e._v("String")]),e._v("类的"),t("code",[e._v("indexOf()")]),e._v("方法检查文件名内部是否存在搜索字符串"),t("code",[e._v('"afn"')]),e._v("。若在字符串内找到"),t("code",[e._v("afn")]),e._v("，那么返回值就是"),t("code",[e._v("afn")]),e._v("的起点索引；但假如没有找到，返回值就是-1。注意这只是一个简单的字符串搜索例子，未使用常见的表达式“通配符”方案，比如"),t("code",[e._v('"fo?.b?r*"')]),e._v("；这种方案更难实现。")]),e._v(" "),t("p",[t("code",[e._v("list()")]),e._v("方法返回的是一个数组。可查询这个数组的长度，然后在其中遍历，选定数组元素。与C和C++的类似行为相比，这种于方法内外方便游历数组的行为无疑是一个显著的进步。")]),e._v(" "),t("p",[e._v("(1) 匿名内部类")]),e._v(" "),t("p",[e._v("下例用一个匿名内部类（已在第7章讲述）来重写显得非常理想。首先创建了一个"),t("code",[e._v("filter()")]),e._v("方法，它返回指向"),t("code",[e._v("FilenameFilter")]),e._v("的一个引用：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: DirList2.java\n// Uses Java 1.1 anonymous inner classes\nimport java.io.*;\n\npublic class DirList2 {\n  public static FilenameFilter\n  filter(final String afn) {\n    // Creation of anonymous inner class:\n    return new FilenameFilter() {\n      String fn = afn;\n      public boolean accept(File dir, String n) {\n        // Strip path information:\n        String f = new File(n).getName();\n        return f.indexOf(fn) != -1;\n      }\n    }; // End of anonymous inner class\n  }\n  public static void main(String[] args) {\n    try {\n      File path = new File(".");\n      String[] list;\n      if(args.length == 0)\n        list = path.list();\n      else\n        list = path.list(filter(args[0]));\n      for(int i = 0; i < list.length; i++)\n        System.out.println(list[i]);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n\n')])])]),t("p",[e._v("注意"),t("code",[e._v("filter()")]),e._v("的参数必须是"),t("code",[e._v("final")]),e._v("。这一点是匿名内部类要求的，使其能使用来自本身作用域以外的一个对象。")]),e._v(" "),t("p",[e._v("之所以认为这样做更好，是由于"),t("code",[e._v("FilenameFilter")]),e._v("类现在同"),t("code",[e._v("DirList2")]),e._v("紧密地结合在一起。然而，我们可采取进一步的操作，将匿名内部类定义成"),t("code",[e._v("list()")]),e._v("的一个参数，使其显得更加精简。如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: DirList3.java\n// Building the anonymous inner class "in-place"\nimport java.io.*;\n\npublic class DirList3 {\n  public static void main(final String[] args) {\n    try {\n      File path = new File(".");\n      String[] list;\n      if(args.length == 0)\n        list = path.list();\n      else\n        list = path.list(\n          new FilenameFilter() {\n            public boolean\n            accept(File dir, String n) {\n              String f = new File(n).getName();\n              return f.indexOf(args[0]) != -1;\n            }\n          });\n      for(int i = 0; i < list.length; i++)\n        System.out.println(list[i]);\n    } catch(Exception e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("main()")]),e._v("现在的参数是"),t("code",[e._v("final")]),e._v("，因为匿名内部类直接使用"),t("code",[e._v("args[0]")]),e._v("。")]),e._v(" "),t("p",[e._v("这展示了如何利用匿名内部类快速创建精简的类，以便解决一些复杂的问题。由于Java中的所有东西都与类有关，所以它无疑是一种相当有用的编码技术。它的一个好处是将特定的问题隔离在一个地方统一解决。但在另一方面，这样生成的代码不是十分容易阅读，所以使用时必须慎重。")]),e._v(" "),t("p",[e._v("(2) 顺序目录列表")]),e._v(" "),t("p",[e._v("经常都需要文件名以排好序的方式提供。由于Java 1.0和Java 1.1都没有提供对排序的支持（从Java 1.2开始提供），所以必须用第8章创建的"),t("code",[e._v("SortVector")]),e._v("将这一能力直接加入自己的程序。就象下面这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: SortedDirList.java\n// Displays sorted directory listing\nimport java.io.*;\nimport c08.*;\n\npublic class SortedDirList {\n  private File path;\n  private String[] list;\n  public SortedDirList(final String afn) {\n    path = new File(".");\n    if(afn == null)\n      list = path.list();\n    else\n      list = path.list(\n          new FilenameFilter() {\n            public boolean\n            accept(File dir, String n) {\n              String f = new File(n).getName();\n              return f.indexOf(afn) != -1;\n            }\n          });\n    sort();\n  }\n  void print() {\n    for(int i = 0; i < list.length; i++)\n      System.out.println(list[i]);\n  }\n  private void sort() {\n    StrSortVector sv = new StrSortVector();\n    for(int i = 0; i < list.length; i++)\n      sv.addElement(list[i]);\n    // The first time an element is pulled from\n    // the StrSortVector the list is sorted:\n    for(int i = 0; i < list.length; i++)\n      list[i] = sv.elementAt(i);\n  }\n  // Test it:\n  public static void main(String[] args) {\n    SortedDirList sd;\n    if(args.length == 0)\n      sd = new SortedDirList(null);\n    else\n      sd = new SortedDirList(args[0]);\n    sd.print();\n  }\n} ///:~\n')])])]),t("p",[e._v("这里进行了另外少许改进。不再是将"),t("code",[e._v("path")]),e._v("（路径）和"),t("code",[e._v("list")]),e._v("（列表）创建为"),t("code",[e._v("main()")]),e._v("的本地变量，它们变成了类的成员，使它们的值能在对象“生存”期间方便地访问。事实上，"),t("code",[e._v("main()")]),e._v("现在只是对类进行测试的一种方式。大家可以看到，一旦列表创建完毕，类的构造器就会自动开始对列表进行排序。")]),e._v(" "),t("p",[e._v("这种排序不要求区分大小写，所以最终不会得到一组全部单词都以大写字母开头的列表，跟着是全部以小写字母开头的列表。然而，我们注意到在以相同字母开头的一组文件名中，大写字母是排在前面的——这对标准的排序来说仍是一种不合格的行为。Java 1.2已成功解决了这个问题。")]),e._v(" "),t("h2",{attrs:{id:"_10-4-2-检查与创建目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-2-检查与创建目录"}},[e._v("#")]),e._v(" 10.4.2 检查与创建目录")]),e._v(" "),t("p",[t("code",[e._v("File")]),e._v("类并不仅仅是对现有目录路径、文件或者文件组的一个表示。亦可用一个"),t("code",[e._v("File")]),e._v("对象新建一个目录，甚至创建一个完整的目录路径——假如它尚不存在的话。亦可用它了解文件的属性（长度、上一次修改日期、读／写属性等），检查一个"),t("code",[e._v("File")]),e._v("对象到底代表一个文件还是一个目录，以及删除一个文件等等。下列程序完整展示了如何运用"),t("code",[e._v("File")]),e._v("类剩下的这些方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: MakeDirectories.java\n// Demonstrates the use of the File class to\n// create directories and manipulate files.\nimport java.io.*;\n\npublic class MakeDirectories {\n  private final static String usage =\n    "Usage:MakeDirectories path1 ...\\n" +\n    "Creates each path\\n" +\n    "Usage:MakeDirectories -d path1 ...\\n" +\n    "Deletes each path\\n" +\n    "Usage:MakeDirectories -r path1 path2\\n" +\n    "Renames from path1 to path2\\n";\n  private static void usage() {\n    System.err.println(usage);\n    System.exit(1);\n  }\n  private static void fileData(File f) {\n    System.out.println(\n      "Absolute path: " + f.getAbsolutePath() +\n      "\\n Can read: " + f.canRead() +\n      "\\n Can write: " + f.canWrite() +\n      "\\n getName: " + f.getName() +\n      "\\n getParent: " + f.getParent() +\n      "\\n getPath: " + f.getPath() +\n      "\\n length: " + f.length() +\n      "\\n lastModified: " + f.lastModified());\n    if(f.isFile())\n      System.out.println("it\'s a file");\n    else if(f.isDirectory())\n      System.out.println("it\'s a directory");\n  }\n  public static void main(String[] args) {\n    if(args.length < 1) usage();\n    if(args[0].equals("-r")) {\n      if(args.length != 3) usage();\n      File\n        old = new File(args[1]),\n        rname = new File(args[2]);\n      old.renameTo(rname);\n      fileData(old);\n      fileData(rname);\n      return; // Exit main\n    }\n    int count = 0;\n    boolean del = false;\n    if(args[0].equals("-d")) {\n      count++;\n      del = true;\n    }\n    for( ; count < args.length; count++) {\n      File f = new File(args[count]);\n      if(f.exists()) {\n        System.out.println(f + " exists");\n        if(del) {\n          System.out.println("deleting..." + f);\n          f.delete();\n        }\n      }\n      else { // Doesn\'t exist\n        if(!del) {\n          f.mkdirs();\n          System.out.println("created " + f);\n        }\n      }\n      fileData(f);\n    }  \n  }\n} ///:~\n')])])]),t("p",[e._v("在"),t("code",[e._v("fileData()")]),e._v("中，可看到应用了各种文件调查方法来显示与文件或目录路径有关的信息。")]),e._v(" "),t("p",[t("code",[e._v("main()")]),e._v("应用的第一个方法是"),t("code",[e._v("renameTo()")]),e._v("，利用它可以重命名（或移动）一个文件至一个全新的路径（该路径由参数决定），它属于另一个"),t("code",[e._v("File")]),e._v("对象。这也适用于任何长度的目录。")]),e._v(" "),t("p",[e._v("若试验上述程序，就可发现自己能制作任意复杂程度的一个目录路径，因为"),t("code",[e._v("mkdirs()")]),e._v("会帮我们完成所有工作。在Java 1.0中，"),t("code",[e._v("-d")]),e._v("标志报告目录虽然已被删除，但它依然存在；但在Java 1.1中，目录会被实际删除。")])])}),[],!1,null,null,null);n.default=a.exports}}]);