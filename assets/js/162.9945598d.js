(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{558:function(e,t,n){"use strict";n.r(t);var o=n(56),v=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_8-2-集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-集合"}},[e._v("#")]),e._v(" 8.2 集合")]),e._v(" "),n("p",[e._v("现在总结一下我们前面学过的东西：为容纳一组对象，最适宜的选择应当是数组。而且假如容纳的是一系列基本数据类型，更是必须采用数组。在本章剩下的部分，大家将接触到一些更常规的情况。当我们编写程序时，通常并不能确切地知道最终需要多少个对象。有些时候甚至想用更复杂的方式来保存对象。为解决这个问题，Java提供了四种类型的“集合类”："),n("code",[e._v("Vector")]),e._v("（向量）、"),n("code",[e._v("BitSet")]),e._v("（位集）、"),n("code",[e._v("Stack")]),e._v("（栈）以及"),n("code",[e._v("Hashtable")]),e._v("（散列表）。与拥有集合功能的其他语言相比，尽管这儿的数量显得相当少，但仍然能用它们解决数量惊人的实际问题。")]),e._v(" "),n("p",[e._v("这些集合类具有形形色色的特征。例如，"),n("code",[e._v("Stack")]),e._v("实现了一个LIFO（后入先出）序列，而"),n("code",[e._v("Hashtable")]),e._v("是一种“关联数组”，允许我们将任何对象关联起来。除此以外，所有Java集合类都能自动改变自身的大小。所以，我们在编程时可使用数量众多的对象，同时不必担心会将集合弄得有多大。")]),e._v(" "),n("h2",{attrs:{id:"_8-2-1-缺点-类型未知"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-1-缺点-类型未知"}},[e._v("#")]),e._v(" 8.2.1 缺点：类型未知")]),e._v(" "),n("p",[e._v("使用Java集合的“缺点”是在将对象置入一个集合时丢失了类型信息。之所以会发生这种情况，是由于当初编写集合时，那个集合的程序员根本不知道用户到底想把什么类型置入集合。若指示某个集合只允许特定的类型，会妨碍它成为一个“常规用途”的工具，为用户带来麻烦。为解决这个问题，集合实际容纳的是类型为"),n("code",[e._v("Object")]),e._v("的一些对象的引用。这种类型当然代表Java中的所有对象，因为它是所有类的根。当然，也要注意这并不包括基本数据类型，因为它们并不是从“任何东西”继承来的。这是一个很好的方案，只是不适用下述场合：")]),e._v(" "),n("p",[e._v("(1) 将一个对象引用置入集合时，由于类型信息会被抛弃，所以任何类型的对象都可进入我们的集合——即便特别指示它只能容纳特定类型的对象。举个例子来说，虽然指示它只能容纳猫，但事实上任何人都可以把一条狗扔进来。")]),e._v(" "),n("p",[e._v("(2) 由于类型信息不复存在，所以集合能肯定的唯一事情就是自己容纳的是指向一个对象的引用。正式使用它之前，必须对其进行转换，使其具有正确的类型。")]),e._v(" "),n("p",[e._v("值得欣慰的是，Java不允许人们滥用置入集合的对象。假如将一条狗扔进一个猫的集合，那么仍会将集合内的所有东西都看作猫，所以在使用那条狗时会得到一个“异常”错误。在同样的意义上，假若试图将一条狗的引用“转换”到一只猫，那么运行期间仍会得到一个“异常”错误。")]),e._v(" "),n("p",[e._v("下面是个例子：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: CatsAndDogs.java\n// Simple collection example (Vector)\nimport java.util.*;\n\nclass Cat {\n  private int catNumber;\n  Cat(int i) {\n    catNumber = i;\n  }\n  void print() {\n    System.out.println("Cat #" + catNumber);\n  }\n}\n\nclass Dog {\n  private int dogNumber;\n  Dog(int i) {\n    dogNumber = i;\n  }\n  void print() {\n    System.out.println("Dog #" + dogNumber);\n  }\n}\n\npublic class CatsAndDogs {\n  public static void main(String[] args) {\n    Vector cats = new Vector();\n    for(int i = 0; i < 7; i++)\n      cats.addElement(new Cat(i));\n    // Not a problem to add a dog to cats:\n    cats.addElement(new Dog(7));\n    for(int i = 0; i < cats.size(); i++)\n      ((Cat)cats.elementAt(i)).print();\n    // Dog is detected only at run-time\n  }\n} ///:~\n')])])]),n("p",[e._v("可以看出，"),n("code",[e._v("Vector")]),e._v("的使用是非常简单的：先创建一个，再用"),n("code",[e._v("addElement()")]),e._v("置入对象，以后用"),n("code",[e._v("elementAt()")]),e._v("取得那些对象（注意"),n("code",[e._v("Vector")]),e._v("有一个"),n("code",[e._v("size()")]),e._v("方法，可使我们知道已添加了多少个元素，以便防止误超边界，造成异常错误）。")]),e._v(" "),n("p",[n("code",[e._v("Cat")]),e._v("和"),n("code",[e._v("Dog")]),e._v("类都非常浅显——除了都是“对象”之外，它们并无特别之处（倘若不明确指出从什么类继承，就默认为从"),n("code",[e._v("Object")]),e._v("继承。所以我们不仅能用"),n("code",[e._v("Vector")]),e._v("方法将"),n("code",[e._v("Cat")]),e._v("对象置入这个集合，也能添加"),n("code",[e._v("Dog")]),e._v("对象，同时不会在编译期和运行期得到任何出错提示。用"),n("code",[e._v("Vector")]),e._v("方法"),n("code",[e._v("elementAt()")]),e._v("获取原本认为是"),n("code",[e._v("Cat")]),e._v("的对象时，实际获得的是指向一个"),n("code",[e._v("Object")]),e._v("的引用，必须将那个对象转换为"),n("code",[e._v("Cat")]),e._v("。随后，需要将整个表达式用括号封闭起来，在为"),n("code",[e._v("Cat")]),e._v("调用"),n("code",[e._v("print()")]),e._v("方法之前进行强制转换；否则就会出现一个语法错误。在运行期间，如果试图将"),n("code",[e._v("Dog")]),e._v("对象转换为"),n("code",[e._v("Cat")]),e._v("，就会得到一个异常。")]),e._v(" "),n("p",[e._v("这些处理的意义都非常深远。尽管显得有些麻烦，但却获得了安全上的保证。我们从此再难偶然造成一些隐藏得深的错误。若程序的一个部分（或几个部分）将对象插入一个集合，但我们只是通过一次异常在程序的某个部分发现一个错误的对象置入了集合，就必须找出插入错误的位置。当然，可通过检查代码达到这个目的，但这或许是最笨的调试工具。另一方面，我们可从一些标准化的集合类开始自己的编程。尽管它们在功能上存在一些不足，且显得有些笨拙，但却能保证没有隐藏的错误。")]),e._v(" "),n("p",[e._v("(1) 错误有时并不显露出来")]),e._v(" "),n("p",[e._v("在某些情况下，程序似乎正确地工作，不转换回我们原来的类型。第一种情况是相当特殊的："),n("code",[e._v("String")]),e._v("类从编译器获得了额外的帮助，使其能够正常工作。只要编译器期待的是一个"),n("code",[e._v("String")]),e._v("对象，但它没有得到一个，就会自动调用在"),n("code",[e._v("Object")]),e._v("里定义、并且能够由任何Java类覆盖的"),n("code",[e._v("toString()")]),e._v("方法。这个方法能生成满足要求的"),n("code",[e._v("String")]),e._v("对象，然后在我们需要的时候使用。")]),e._v(" "),n("p",[e._v("因此，为了让自己类的对象能显示出来，要做的全部事情就是覆盖"),n("code",[e._v("toString()")]),e._v("方法，如下例所示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: WorksAnyway.java\n// In special cases, things just seem\n// to work correctly.\nimport java.util.*;\n\nclass Mouse {\n  private int mouseNumber;\n  Mouse(int i) {\n    mouseNumber = i;\n  }\n  // Magic method:\n  public String toString() {\n    return "This is Mouse #" + mouseNumber;\n  }\n  void print(String msg) {\n    if(msg != null) System.out.println(msg);\n    System.out.println(\n      "Mouse number " + mouseNumber);\n  }\n}\n\nclass MouseTrap {\n  static void caughtYa(Object m) {\n    Mouse mouse = (Mouse)m; // Cast from Object\n    mouse.print("Caught one!");\n  }\n}\n\npublic class WorksAnyway {\n  public static void main(String[] args) {\n    Vector mice = new Vector();\n    for(int i = 0; i < 3; i++)\n      mice.addElement(new Mouse(i));\n    for(int i = 0; i < mice.size(); i++) {\n      // No cast necessary, automatic call\n      // to Object.toString():\n      System.out.println(\n        "Free mouse: " + mice.elementAt(i));\n      MouseTrap.caughtYa(mice.elementAt(i));\n    }\n  }\n} ///:~\n')])])]),n("p",[e._v("可在"),n("code",[e._v("Mouse")]),e._v("里看到对"),n("code",[e._v("toString()")]),e._v("的重定义代码。在"),n("code",[e._v("main()")]),e._v("的第二个"),n("code",[e._v("for")]),e._v("循环中，可发现下述语句：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('System.out.println("Free mouse: " +\nmice.elementAt(i));\n')])])]),n("p",[e._v("在"),n("code",[e._v("+")]),e._v("后，编译器预期看到的是一个"),n("code",[e._v("String")]),e._v("对象。"),n("code",[e._v("elementAt()")]),e._v("生成了一个"),n("code",[e._v("Object")]),e._v("，所以为获得希望的"),n("code",[e._v("String")]),e._v("，编译器会默认调用"),n("code",[e._v("toString()")]),e._v("。但不幸的是，只有针对"),n("code",[e._v("String")]),e._v("才能得到象这样的结果；其他任何类型都不会进行这样的转换。")]),e._v(" "),n("p",[e._v("隐藏转换的第二种方法已在"),n("code",[e._v("Mousetrap")]),e._v("里得到了应用。"),n("code",[e._v("caughtYa()")]),e._v("方法接收的不是一个"),n("code",[e._v("Mouse")]),e._v("，而是一个"),n("code",[e._v("Object")]),e._v("。随后再将其转换为一个"),n("code",[e._v("Mouse")]),e._v("。当然，这样做是非常冒失的，因为通过接收一个"),n("code",[e._v("Object")]),e._v("，任何东西都可以传递给方法。然而，假若转换不正确——如果我们传递了错误的类型——就会在运行期间得到一个异常错误。这当然没有在编译期进行检查好，但仍然能防止问题的发生。注意在使用这个方法时毋需进行转换：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("MouseTrap.caughtYa(mice.elementAt(i));\n")])])]),n("p",[e._v("(2) 生成能自动判别类型的"),n("code",[e._v("Vector")])]),e._v(" "),n("p",[e._v("大家或许不想放弃刚才那个问题。一个更“健壮”的方案是用"),n("code",[e._v("Vector")]),e._v("创建一个新类，使其只接收我们指定的类型，也只生成我们希望的类型。如下所示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: GopherVector.java\n// A type-conscious Vector\nimport java.util.*;\n\nclass Gopher {\n  private int gopherNumber;\n  Gopher(int i) {\n    gopherNumber = i;\n  }\n  void print(String msg) {\n    if(msg != null) System.out.println(msg);\n    System.out.println(\n      "Gopher number " + gopherNumber);\n  }\n}\n\nclass GopherTrap {\n  static void caughtYa(Gopher g) {\n    g.print("Caught one!");\n  }\n}\n\nclass GopherVector {\n  private Vector v = new Vector();\n  public void addElement(Gopher m) {\n    v.addElement(m);\n  }\n  public Gopher elementAt(int index) {\n    return (Gopher)v.elementAt(index);\n  }\n  public int size() { return v.size(); }\n  public static void main(String[] args) {\n    GopherVector gophers = new GopherVector();\n    for(int i = 0; i < 3; i++)\n      gophers.addElement(new Gopher(i));\n    for(int i = 0; i < gophers.size(); i++)\n      GopherTrap.caughtYa(gophers.elementAt(i));\n  }\n} ///:~\n')])])]),n("p",[e._v("这前一个例子类似，只是新的"),n("code",[e._v("GopherVector")]),e._v("类有一个类型为"),n("code",[e._v("Vector")]),e._v("的"),n("code",[e._v("private")]),e._v("成员（从"),n("code",[e._v("Vector")]),e._v("继承有些麻烦，理由稍后便知），而且方法也和"),n("code",[e._v("Vector")]),e._v("类似。然而，它不会接收和产生普通"),n("code",[e._v("Object")]),e._v("，只对"),n("code",[e._v("Gopher")]),e._v("对象感兴趣。")]),e._v(" "),n("p",[e._v("由于"),n("code",[e._v("GopherVector")]),e._v("只接收一个"),n("code",[e._v("Gopher")]),e._v("（地鼠），所以假如我们使用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gophers.addElement(new Pigeon());\n")])])]),n("p",[e._v("就会在编译期间获得一条出错消息。采用这种方式，尽管从编码的角度看显得更令人沉闷，但可以立即判断出是否使用了正确的类型。")]),e._v(" "),n("p",[e._v("注意在使用"),n("code",[e._v("elementAt()")]),e._v("时不必进行转换——它肯定是一个"),n("code",[e._v("Gopher")]),e._v("。")]),e._v(" "),n("p",[e._v("(3) 参数化类型")]),e._v(" "),n("p",[e._v("这类问题并不是孤立的——我们许多时候都要在其他类型的基础上创建新类型。此时，在编译期间拥有特定的类型信息是非常有帮助的。这便是“参数化类型”的概念。在C++中，它由语言通过“模板”获得了直接支持。至少，Java保留了关键字"),n("code",[e._v("generic")]),e._v("，期望有一天能够支持参数化类型。但我们现在无法确定这一天何时会来临。")])])}),[],!1,null,null,null);t.default=v.exports}}]);