(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{495:function(e,a,t){"use strict";t.r(a);var v=t(56),n=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_16-8-rtti真的有害吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-8-rtti真的有害吗"}},[e._v("#")]),e._v(" 16.8 RTTI真的有害吗")]),e._v(" "),t("p",[e._v("本章的各种设计模式都在努力避免使用RTTI，这或许会给大家留下“RTTI有害”的印象（还记得可怜的"),t("code",[e._v("goto")]),e._v("吗，由于给人印象不佳，根本就没有放到Java里来）。但实际情况并非绝对如此。正确地说，应该是RTTI使用不当才“有害”。我们之所以想避免RTTI的使用，是由于它的错误运用会造成扩展性受到损害。而我们事前提出的目标就是能向系统自由加入新类型，同时保证对周围的代码造成尽可能小的影响。由于RTTI常被滥用（让它查找系统中的每一种类型），会造成代码的扩展能力大打折扣——添加一种新类型时，必须找出使用了RTTI的所有代码。即使仅遗漏了其中的一个，也不能从编译器那里得到任何帮助。")]),e._v(" "),t("p",[e._v("然而，RTTI本身并不会自动产生非扩展性的代码。让我们再来看一看前面提到的垃圾回收例子。这一次准备引入一种新工具，我把它叫作"),t("code",[e._v("TypeMap")]),e._v("。其中包含了一个"),t("code",[e._v("Hashtable")]),e._v("（散列表），其中容纳了多个"),t("code",[e._v("Vector")]),e._v("，但接口非常简单：可以添加（"),t("code",[e._v("add()")]),e._v("）一个新对象，可以获得（"),t("code",[e._v("get()")]),e._v("）一个"),t("code",[e._v("Vector")]),e._v("，其中包含了属于某种特定类型的所有对象。对于这个包含的散列表，它的关键在于对应的"),t("code",[e._v("Vector")]),e._v("里的类型。这种设计模式的优点（根据Larry O'Brien的建议）是在遇到一种新类型的时候，"),t("code",[e._v("TypeMap")]),e._v("会动态加入一种新类型。所以不管什么时候，只要将一种新类型加入系统（即使在运行期间添加），它也会正确无误地得以接受。")]),e._v(" "),t("p",[e._v("我们的例子同样建立在"),t("code",[e._v("c16.Trash")]),e._v("这个“包”（"),t("code",[e._v("Package")]),e._v("）内的"),t("code",[e._v("Trash")]),e._v("类型结构的基础上（而且那儿使用的"),t("code",[e._v("Trash.dat")]),e._v("文件可以照搬到这里来）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: DynaTrash.java\n// Using a Hashtable of Vectors and RTTI\n// to automatically sort trash into\n// vectors. This solution, despite the\n// use of RTTI, is extensible.\npackage c16.dynatrash;\nimport c16.trash.*;\nimport java.util.*;\n\n// Generic TypeMap works in any situation:\nclass TypeMap {\n  private Hashtable t = new Hashtable();\n  public void add(Object o) {\n    Class type = o.getClass();\n    if(t.containsKey(type))\n      ((Vector)t.get(type)).addElement(o);\n    else {\n      Vector v = new Vector();\n      v.addElement(o);\n      t.put(type,v);\n    }\n  }\n  public Vector get(Class type) {\n    return (Vector)t.get(type);\n  }\n  public Enumeration keys() { return t.keys(); }\n  // Returns handle to adapter class to allow\n  // callbacks from ParseTrash.fillBin():\n  public Fillable filler() {\n    // Anonymous inner class:\n    return new Fillable() {\n      public void addTrash(Trash t) { add(t); }\n    };\n  }\n}\n\npublic class DynaTrash {\n  public static void main(String[] args) {\n    TypeMap bin = new TypeMap();\n    ParseTrash.fillBin("Trash.dat",bin.filler());\n    Enumeration keys = bin.keys();\n    while(keys.hasMoreElements())\n      Trash.sumValue(\n        bin.get((Class)keys.nextElement()));\n  }\n} ///:~\n')])])]),t("p",[e._v("尽管功能很强，但对"),t("code",[e._v("TypeMap")]),e._v("的定义是非常简单的。它只是包含了一个散列表，同时"),t("code",[e._v("add()")]),e._v("负担了大部分的工作。添加一个新类型时，那种类型的"),t("code",[e._v("Class")]),e._v("对象的引用会被提取出来。随后，利用这个引用判断容纳了那类对象的一个"),t("code",[e._v("Vector")]),e._v("是否已存在于散列表中。如答案是肯定的，就提取出那个"),t("code",[e._v("Vector")]),e._v("，并将对象加入其中；反之，就将"),t("code",[e._v("Class")]),e._v("对象及新"),t("code",[e._v("Vector")]),e._v("作为一个“键－值”对加入。")]),e._v(" "),t("p",[e._v("利用"),t("code",[e._v("keys()")]),e._v("，可以得到对所有"),t("code",[e._v("Class")]),e._v("对象的一个“枚举”（"),t("code",[e._v("Enumeration")]),e._v("），而且可用"),t("code",[e._v("get()")]),e._v("，可通过"),t("code",[e._v("Class")]),e._v("对象获取对应的"),t("code",[e._v("Vector")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("filler()")]),e._v("方法非常有趣，因为它利用了"),t("code",[e._v("ParseTrash.fillBin()")]),e._v("的设计——不仅能尝试填充一个"),t("code",[e._v("Vector")]),e._v("，也能用它的"),t("code",[e._v("addTrash()")]),e._v("方法试着填充实现了"),t("code",[e._v("Fillable")]),e._v("（可填充）接口的任何东西。"),t("code",[e._v("filter()")]),e._v("需要做的全部事情就是将一个引用返回给实现了"),t("code",[e._v("Fillable")]),e._v("的一个接口，然后将这个引用作为参数传递给"),t("code",[e._v("fillBin()")]),e._v("，就象下面这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ParseTrash.fillBin("Trash.dat", bin.filler());\n')])])]),t("p",[e._v("为产生这个引用，我们采用了一个“匿名内部类”（已在第7章讲述）。由于根本不需要用一个已命名的类来实现"),t("code",[e._v("Fillable")]),e._v("，只需要属于那个类的一个对象的引用即可，所以这里使用匿名内部类是非常恰当的。")]),e._v(" "),t("p",[e._v("对这个设计，要注意的一个地方是尽管没有设计成对归类加以控制，但在"),t("code",[e._v("fillBin()")]),e._v("每次进行归类的时候，都会将一个"),t("code",[e._v("Trash")]),e._v("对象插入"),t("code",[e._v("bin")]),e._v("。")]),e._v(" "),t("p",[e._v("通过前面那些例子的学习，"),t("code",[e._v("DynaTrash")]),e._v("类的大多数部分都应当非常熟悉了。这一次，我们不再将新的"),t("code",[e._v("Trash")]),e._v("对象置入类型"),t("code",[e._v("Vector")]),e._v("的一个"),t("code",[e._v("bin")]),e._v("内。由于"),t("code",[e._v("bin")]),e._v("的类型为"),t("code",[e._v("TypeMap")]),e._v("，所以将垃圾（"),t("code",[e._v("Trash")]),e._v("）丢进垃圾筒（"),t("code",[e._v("Bin")]),e._v("）的时候，"),t("code",[e._v("TypeMap")]),e._v("的内部归类机制会立即进行适当的分类。在"),t("code",[e._v("TypeMap")]),e._v("里遍历并对每个独立的"),t("code",[e._v("Vector")]),e._v("进行操作，这是一件相当简单的事情：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    Enumeration keys = bin.keys();\n    while(keys.hasMoreElements())\n      Trash.sumValue(\n        bin.get((Class)keys.nextElement()));\n")])])]),t("p",[e._v("就象大家看到的那样，新类型向系统的加入根本不会影响到这些代码，亦不会影响"),t("code",[e._v("TypeMap")]),e._v("中的代码。这显然是解决问题最圆满的方案。尽管它确实严重依赖RTTI，但请注意散列表中的每个键－值对都只查找一种类型。除此以外，在我们增加一种新类型的时候，不会陷入“忘记”向系统加入正确代码的尴尬境地，因为根本就没有什么代码需要添加。")])])}),[],!1,null,null,null);a.default=n.exports}}]);