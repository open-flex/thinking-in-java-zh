(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{427:function(e,t,n){"use strict";n.r(t);var a=n(56),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_10-5-io流的典型应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-io流的典型应用"}},[e._v("#")]),e._v(" 10.5 IO流的典型应用")]),e._v(" "),n("p",[e._v("尽管库内存在大量IO流类，可通过多种不同的方式组合到一起，但实际上只有几种方式才会经常用到。然而，必须小心在意才能得到正确的组合。下面这个相当长的例子展示了典型IO配置的创建与使用，可在写自己的代码时将其作为一个参考使用。注意每个配置都以一个注释形式的编号起头，并提供了适当的解释信息。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: IOStreamDemo.java\n// Typical IO Stream Configurations\nimport java.io.*;\nimport com.bruceeckel.tools.*;\n\npublic class IOStreamDemo {\n  public static void main(String[] args) {\n    try {\n      // 1. Buffered input file\n      DataInputStream in =\n        new DataInputStream(\n          new BufferedInputStream(\n            new FileInputStream(args[0])));\n      String s, s2 = new String();\n      while((s = in.readLine())!= null)\n        s2 += s + "\\n";\n      in.close();\n\n      // 2. Input from memory\n      StringBufferInputStream in2 =\n          new StringBufferInputStream(s2);\n      int c;\n      while((c = in2.read()) != -1)\n        System.out.print((char)c);\n\n      // 3. Formatted memory input\n      try {\n        DataInputStream in3 =\n          new DataInputStream(\n            new StringBufferInputStream(s2));\n        while(true)\n          System.out.print((char)in3.readByte());\n      } catch(EOFException e) {\n        System.out.println(\n          "End of stream encountered");\n      }\n\n      // 4. Line numbering & file output\n      try {\n        LineNumberInputStream li =\n          new LineNumberInputStream(\n            new StringBufferInputStream(s2));\n        DataInputStream in4 =\n          new DataInputStream(li);\n        PrintStream out1 =\n          new PrintStream(\n            new BufferedOutputStream(\n              new FileOutputStream(\n                "IODemo.out")));\n        while((s = in4.readLine()) != null )\n          out1.println(\n            "Line " + li.getLineNumber() + s);\n        out1.close(); // finalize() not reliable!\n      } catch(EOFException e) {\n        System.out.println(\n          "End of stream encountered");\n      }\n\n      // 5. Storing & recovering data\n      try {\n        DataOutputStream out2 =\n          new DataOutputStream(\n            new BufferedOutputStream(\n              new FileOutputStream("Data.txt")));\n        out2.writeBytes(\n          "Here\'s the value of pi: \\n");\n        out2.writeDouble(3.14159);\n        out2.close();\n        DataInputStream in5 =\n          new DataInputStream(\n            new BufferedInputStream(\n              new FileInputStream("Data.txt")));\n        System.out.println(in5.readLine());\n        System.out.println(in5.readDouble());\n      } catch(EOFException e) {\n        System.out.println(\n          "End of stream encountered");\n      }\n\n      // 6. Reading/writing random access files\n      RandomAccessFile rf =\n        new RandomAccessFile("rtest.dat", "rw");\n      for(int i = 0; i < 10; i++)\n        rf.writeDouble(i*1.414);\n      rf.close();\n\n      rf =\n        new RandomAccessFile("rtest.dat", "rw");\n      rf.seek(5*8);\n      rf.writeDouble(47.0001);\n      rf.close();\n\n      rf =\n        new RandomAccessFile("rtest.dat", "r");\n      for(int i = 0; i < 10; i++)\n        System.out.println(\n          "Value " + i + ": " +\n          rf.readDouble());\n      rf.close();\n\n      // 7. File input shorthand\n      InFile in6 = new InFile(args[0]);\n      String s3 = new String();\n      System.out.println(\n        "First line in file: " +\n        in6.readLine());\n        in6.close();\n\n      // 8. Formatted file output shorthand\n      PrintFile out3 = new PrintFile("Data2.txt");\n      out3.print("Test of PrintFile");\n      out3.close();\n\n      // 9. Data file output shorthand\n      OutFile out4 = new OutFile("Data3.txt");\n      out4.writeBytes("Test of outDataFile\\n\\r");\n      out4.writeChars("Test of outDataFile\\n\\r");\n      out4.close();\n\n    } catch(FileNotFoundException e) {\n      System.out.println(\n        "File Not Found:" + args[0]);\n    } catch(IOException e) {\n      System.out.println("IO Exception");\n    }\n  }\n} ///:~\n')])])]),n("h2",{attrs:{id:"_10-5-1-输入流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-1-输入流"}},[e._v("#")]),e._v(" 10.5.1 输入流")]),e._v(" "),n("p",[e._v("当然，我们经常想做的一件事情是将格式化的输出打印到控制台，但那已在第5章创建的"),n("code",[e._v("com.bruceeckel.tools")]),e._v("中得到了简化。")]),e._v(" "),n("p",[e._v("第1到第4部分演示了输入流的创建与使用（尽管第4部分展示了将输出流作为一个测试工具的简单应用）。")]),e._v(" "),n("p",[e._v("(1) 缓冲的输入文件")]),e._v(" "),n("p",[e._v("为打开一个文件以便输入，需要使用一个"),n("code",[e._v("FileInputStream")]),e._v("，同时将一个"),n("code",[e._v("String")]),e._v("或"),n("code",[e._v("File")]),e._v("对象作为文件名使用。为提高速度，最好先对文件进行缓冲处理，从而获得用于一个"),n("code",[e._v("BufferedInputStream")]),e._v("的构造器的结果引用。为了以格式化的形式读取输入数据，我们将那个结果引用赋给用于一个"),n("code",[e._v("DataInputStream")]),e._v("的构造器。"),n("code",[e._v("DataInputStream")]),e._v("是我们的最终（"),n("code",[e._v("final")]),e._v("）对象，并是我们进行读取操作的接口。")]),e._v(" "),n("p",[e._v("在这个例子中，只用到了"),n("code",[e._v("readLine()")]),e._v("方法，但理所当然任何"),n("code",[e._v("DataInputStream")]),e._v("方法都可以采用。一旦抵达文件末尾，"),n("code",[e._v("readLine()")]),e._v("就会返回一个"),n("code",[e._v("null")]),e._v("（空），以便中止并退出"),n("code",[e._v("while")]),e._v("循环。")]),e._v(" "),n("p",[n("code",[e._v("String s2")]),e._v("用于聚集完整的文件内容（包括必须添加的新行，因为"),n("code",[e._v("readLine()")]),e._v("去除了那些行）。随后，在本程序的后面部分中使用"),n("code",[e._v("s2")]),e._v("。最后，我们调用"),n("code",[e._v("close()")]),e._v("，用它关闭文件。从技术上说，会在运行"),n("code",[e._v("finalize()")]),e._v("时调用"),n("code",[e._v("close()")]),e._v("。而且我们希望一旦程序退出，就发生这种情况（无论是否进行垃圾收集）。然而，Java 1.0有一个非常突出的错误（Bug），造成这种情况不会发生。在Java 1.1中，必须明确调用"),n("code",[e._v("System.runFinalizersOnExit(true)")]),e._v("，用它保证会为系统中的每个对象调用"),n("code",[e._v("finalize()")]),e._v("。然而，最安全的方法还是为文件明确调用"),n("code",[e._v("close()")]),e._v("。")]),e._v(" "),n("p",[e._v("(2) 从内存输入")]),e._v(" "),n("p",[e._v("这一部分采用已经包含了完整文件内容的"),n("code",[e._v("String s2")]),e._v("，并用它创建一个"),n("code",[e._v("StringBufferInputStream")]),e._v("（字符串缓冲输入流）——作为构造器的参数，要求使用一个"),n("code",[e._v("String")]),e._v("，而非一个"),n("code",[e._v("StringBuffer")]),e._v("）。随后，我们用"),n("code",[e._v("read()")]),e._v("依次读取每个字符，并将其发送至控制台。注意"),n("code",[e._v("read()")]),e._v("将下一个字节返回为"),n("code",[e._v("int")]),e._v("，所以必须将其转换为一个"),n("code",[e._v("char")]),e._v("，以便正确地打印。")]),e._v(" "),n("p",[e._v("(3) 格式化内存输入")]),e._v(" "),n("p",[n("code",[e._v("StringBufferInputStream")]),e._v("的接口是有限的，所以通常需要将其封装到一个"),n("code",[e._v("DataInputStream")]),e._v("内，从而增强它的能力。然而，若选择用"),n("code",[e._v("readByte()")]),e._v("每次读出一个字符，那么所有值都是有效的，所以不可再用返回值来侦测何时结束输入。相反，可用"),n("code",[e._v("available()")]),e._v("方法判断有多少字符可用。下面这个例子展示了如何从文件中一次读出一个字符：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: TestEOF.java\n// Testing for the end of file while reading\n// a byte at a time.\nimport java.io.*;\n\npublic class TestEOF {\n  public static void main(String[] args) {\n    try {\n      DataInputStream in =\n        new DataInputStream(\n         new BufferedInputStream(\n          new FileInputStream("TestEof.java")));\n      while(in.available() != 0)\n        System.out.print((char)in.readByte());\n    } catch (IOException e) {\n      System.err.println("IOException");\n    }\n  }\n} ///:~\n')])])]),n("p",[e._v("注意取决于当前从什么媒体读入，"),n("code",[e._v("avaiable()")]),e._v("的工作方式也是有所区别的。它在字面上意味着“可以不受阻塞读取的字节数量”。对一个文件来说，它意味着整个文件。但对一个不同种类的数据流来说，它却可能有不同的含义。因此在使用时应考虑周全。")]),e._v(" "),n("p",[e._v("为了在这样的情况下侦测输入的结束，也可以通过捕获一个异常来实现。然而，若真的用异常来控制数据流，却显得有些大材小用。")]),e._v(" "),n("p",[e._v("(4) 行的编号与文件输出")]),e._v(" "),n("p",[e._v("这个例子展示了如何"),n("code",[e._v("LineNumberInputStream")]),e._v("来跟踪输入行的编号。在这里，不可简单地将所有构造器都组合起来，因为必须保持"),n("code",[e._v("LineNumberInputStream")]),e._v("的一个引用（注意这并非一种继承环境，所以不能简单地将"),n("code",[e._v("in4")]),e._v("转换到一个"),n("code",[e._v("LineNumberInputStream")]),e._v("）。因此，"),n("code",[e._v("li")]),e._v("容纳了指向"),n("code",[e._v("LineNumberInputStream")]),e._v("的引用，然后在它的基础上创建一个"),n("code",[e._v("DataInputStream")]),e._v("，以便读入数据。")]),e._v(" "),n("p",[e._v("这个例子也展示了如何将格式化数据写入一个文件。首先创建了一个"),n("code",[e._v("FileOutputStream")]),e._v("，用它同一个文件连接。考虑到效率方面的原因，它生成了一个"),n("code",[e._v("BufferedOutputStream")]),e._v("。这几乎肯定是我们一般的做法，但却必须明确地这样做。随后为了进行格式化，它转换成一个"),n("code",[e._v("PrintStream")]),e._v("。用这种方式创建的数据文件可作为一个原始的文本文件读取。")]),e._v(" "),n("p",[e._v("标志"),n("code",[e._v("DataInputStream")]),e._v("何时结束的一个方法是"),n("code",[e._v("readLine()")]),e._v("。一旦没有更多的字符串可以读取，它就会返回"),n("code",[e._v("null")]),e._v("。每个行都会伴随自己的行号打印到文件里。该行号可通过"),n("code",[e._v("li")]),e._v("查询。")]),e._v(" "),n("p",[e._v("可看到用于"),n("code",[e._v("out1")]),e._v("的、一个明确指定的"),n("code",[e._v("close()")]),e._v("。若程序准备掉转头来，并再次读取相同的文件，这种做法就显得相当有用。然而，该程序直到结束也没有检查文件"),n("code",[e._v("IODemo.txt")]),e._v("。正如以前指出的那样，如果不为自己的所有输出文件调用"),n("code",[e._v("close()")]),e._v("，就可能发现缓冲区不会得到刷新，造成它们不完整。。")]),e._v(" "),n("h2",{attrs:{id:"_10-5-2-输出流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-2-输出流"}},[e._v("#")]),e._v(" 10.5.2 输出流")]),e._v(" "),n("p",[e._v("两类主要的输出流是按它们写入数据的方式划分的：一种按人的习惯写入，另一种为了以后由一个"),n("code",[e._v("DataInputStream")]),e._v("而写入。"),n("code",[e._v("RandomAccessFile")]),e._v("是独立的，尽管它的数据格式兼容于"),n("code",[e._v("DataInputStream")]),e._v("和"),n("code",[e._v("DataOutputStream")]),e._v("。")]),e._v(" "),n("p",[e._v("(5) 保存与恢复数据")]),e._v(" "),n("p",[n("code",[e._v("PrintStream")]),e._v("能格式化数据，使其能按我们的习惯阅读。但为了输出数据，以便由另一个数据流恢复，则需用一个"),n("code",[e._v("DataOutputStream")]),e._v("写入数据，并用一个"),n("code",[e._v("DataInputStream")]),e._v("恢复（获取）数据。当然，这些数据流可以是任何东西，但这里采用的是一个文件，并进行了缓冲处理，以加快读写速度。")]),e._v(" "),n("p",[e._v("注意字符串是用"),n("code",[e._v("writeBytes()")]),e._v("写入的，而非"),n("code",[e._v("writeChars()")]),e._v("。若使用后者，写入的就是16位Unicode字符。由于"),n("code",[e._v("DataInputStream")]),e._v("中没有补充的"),n("code",[e._v("readChars")]),e._v("方法，所以不得不用"),n("code",[e._v("readChar()")]),e._v("每次取出一个字符。所以对ASCII来说，更方便的做法是将字符作为字节写入，在后面跟随一个新行；然后再用"),n("code",[e._v("readLine()")]),e._v("将字符当作普通的ASCII行读回。")]),e._v(" "),n("p",[n("code",[e._v("writeDouble()")]),e._v("将"),n("code",[e._v("double")]),e._v("数字保存到数据流中，并用补充的"),n("code",[e._v("readDouble()")]),e._v("恢复它。但为了保证任何读方法能够正常工作，必须知道数据项在流中的准确位置，因为既有可能将保存的"),n("code",[e._v("double")]),e._v("数据作为一个简单的字节序列读入，也有可能作为"),n("code",[e._v("char")]),e._v("或其他格式读入。所以必须要么为文件中的数据采用固定的格式，要么将额外的信息保存到文件中，以便正确判断数据的存放位置。")]),e._v(" "),n("p",[e._v("(6) 读写随机访问文件")]),e._v(" "),n("p",[e._v("正如早先指出的那样，"),n("code",[e._v("RandomAccessFile")]),e._v("与IO层次结构的剩余部分几乎是完全隔离的，尽管它也实现了DataInput和"),n("code",[e._v("DataOutput")]),e._v("接口。所以不可将其与"),n("code",[e._v("InputStream")]),e._v("及"),n("code",[e._v("OutputStream")]),e._v("子类的任何部分关联起来。尽管也许能将一个"),n("code",[e._v("ByteArrayInputStream")]),e._v("当作一个随机访问元素对待，但只能用"),n("code",[e._v("RandomAccessFile")]),e._v("打开一个文件。必须假定"),n("code",[e._v("RandomAccessFile")]),e._v("已得到了正确的缓冲，因为我们不能自行选择。")]),e._v(" "),n("p",[e._v("可以自行选择的是第二个构造器参数：可决定以“只读”（"),n("code",[e._v("r")]),e._v("）方式或“读写”（"),n("code",[e._v("rw")]),e._v("）方式打开一个"),n("code",[e._v("RandomAccessFile")]),e._v("文件。")]),e._v(" "),n("p",[e._v("使用"),n("code",[e._v("RandomAccessFile")]),e._v("的时候，类似于组合使用"),n("code",[e._v("DataInputStream")]),e._v("和"),n("code",[e._v("DataOutputStream")]),e._v("（因为它实现了等同的接口）。除此以外，还可看到程序中使用了"),n("code",[e._v("seek()")]),e._v("，以便在文件中到处移动，对某个值作出修改。")]),e._v(" "),n("h2",{attrs:{id:"_10-5-3-快捷文件处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-3-快捷文件处理"}},[e._v("#")]),e._v(" 10.5.3 快捷文件处理")]),e._v(" "),n("p",[e._v("由于以前采用的一些典型形式都涉及到文件处理，所以大家也许会怀疑为什么要进行那么多的代码输入——这正是装饰器方案一个缺点。本部分将向大家展示如何创建和使用典型文件读取和写入配置的快捷版本。这些快捷版本均置入"),n("code",[e._v("packagecom.bruceeckel.tools")]),e._v("中（自第5章开始创建）。为了将每个类都添加到库内，只需将其置入适当的目录，并添加对应的"),n("code",[e._v("package")]),e._v("语句即可。")]),e._v(" "),n("p",[e._v("(7) 快速文件输入")]),e._v(" "),n("p",[e._v("若想创建一个对象，用它从一个缓冲的"),n("code",[e._v("DataInputStream")]),e._v("中读取一个文件，可将这个过程封装到一个名为"),n("code",[e._v("InFile")]),e._v("的类内。如下所示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//: InFile.java\n// Shorthand class for opening an input file\npackage com.bruceeckel.tools;\nimport java.io.*;\n\npublic class InFile extends DataInputStream {\n  public InFile(String filename)\n    throws FileNotFoundException {\n    super(\n      new BufferedInputStream(\n        new FileInputStream(filename)));\n  }\n  public InFile(File file)\n    throws FileNotFoundException {\n    this(file.getPath());\n  }\n} ///:~\n")])])]),n("p",[e._v("无论构造器的"),n("code",[e._v("String")]),e._v("版本还是"),n("code",[e._v("File")]),e._v("版本都包括在内，用于共同创建一个"),n("code",[e._v("FileInputStream")]),e._v("。")]),e._v(" "),n("p",[e._v("就象这个例子展示的那样，现在可以有效减少创建文件时由于重复强调造成的问题。")]),e._v(" "),n("p",[e._v("(8) 快速输出格式化文件")]),e._v(" "),n("p",[e._v("亦可用同类型的方法创建一个"),n("code",[e._v("PrintStream")]),e._v("，令其写入一个缓冲文件。下面是对"),n("code",[e._v("com.bruceeckel.tools")]),e._v("的扩展：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//: PrintFile.java\n// Shorthand class for opening an output file\n// for human-readable output.\npackage com.bruceeckel.tools;\nimport java.io.*;\n\npublic class PrintFile extends PrintStream {\n  public PrintFile(String filename)\n    throws IOException {\n    super(\n      new BufferedOutputStream(\n        new FileOutputStream(filename)));\n  }\n  public PrintFile(File file)\n    throws IOException {\n    this(file.getPath());\n  }\n} ///:~\n")])])]),n("p",[e._v("注意构造器不可能捕获一个由基类构造器“抛”出的异常。")]),e._v(" "),n("p",[e._v("(9) 快速输出数据文件")]),e._v(" "),n("p",[e._v("最后，利用类似的快捷方式可创建一个缓冲输出文件，用它保存数据（与由人观看的数据格式相反）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//: OutFile.java\n// Shorthand class for opening an output file\n// for data storage.\npackage com.bruceeckel.tools;\nimport java.io.*;\n\npublic class OutFile extends DataOutputStream {\n  public OutFile(String filename)\n    throws IOException {\n    super(\n      new BufferedOutputStream(\n        new FileOutputStream(filename)));\n  }\n  public OutFile(File file)\n    throws IOException {\n    this(file.getPath());\n  }\n} ///:~\n")])])]),n("p",[e._v("非常奇怪的是（也非常不幸），Java库的设计者居然没想到将这些便利措施直接作为他们的一部分标准提供。")]),e._v(" "),n("h2",{attrs:{id:"_10-5-4-从标准输入中读取数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-4-从标准输入中读取数据"}},[e._v("#")]),e._v(" 10.5.4 从标准输入中读取数据")]),e._v(" "),n("p",[e._v("以Unix首先倡导的“标准输入”、“标准输出”以及“标准错误输出”概念为基础，Java提供了相应的"),n("code",[e._v("System.in")]),e._v("，"),n("code",[e._v("System.out")]),e._v("以及"),n("code",[e._v("System.err")]),e._v("。贯这一整本书，大家都会接触到如何用"),n("code",[e._v("System.out")]),e._v("进行标准输出，它已预封装成一个"),n("code",[e._v("PrintStream")]),e._v("对象。")]),e._v(" "),n("p",[n("code",[e._v("System.err")]),e._v("同样是一个"),n("code",[e._v("PrintStream")]),e._v("，但"),n("code",[e._v("System.in")]),e._v("是一个原始的"),n("code",[e._v("InputStream")]),e._v("，未进行任何封装处理。这意味着尽管能直接使用"),n("code",[e._v("System.out")]),e._v("和"),n("code",[e._v("System.err")]),e._v("，但必须事先封装"),n("code",[e._v("System.in")]),e._v("，否则不能从中读取数据。")]),e._v(" "),n("p",[e._v("典型情况下，我们希望用"),n("code",[e._v("readLine()")]),e._v("每次读取一行输入信息，所以需要将"),n("code",[e._v("System.in")]),e._v("封装到一个"),n("code",[e._v("DataInputStream")]),e._v("中。这是Java 1.0进行行输入时采取的“老”办法。在本章稍后，大家还会看到Java 1.1的解决方案。下面是个简单的例子，作用是回应我们键入的每一行内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//: Echo.java\n// How to read from standard input\nimport java.io.*;\n\npublic class Echo {\n  public static void main(String[] args) {\n    DataInputStream in =\n      new DataInputStream(\n        new BufferedInputStream(System.in));\n    String s;\n    try {\n      while((s = in.readLine()).length() != 0)\n        System.out.println(s);\n      // An empty line terminates the program\n    } catch(IOException e) {\n      e.printStackTrace();\n    }\n  }\n} ///:~\n\n")])])]),n("p",[e._v("之所以要使用"),n("code",[e._v("try")]),e._v("块，是由于"),n("code",[e._v("readLine()")]),e._v("可能“抛”出一个"),n("code",[e._v("IOException")]),e._v("。注意同其他大多数流一样，也应对"),n("code",[e._v("System.in")]),e._v("进行缓冲。")]),e._v(" "),n("p",[e._v("由于在每个程序中都要将"),n("code",[e._v("System.in")]),e._v("封装到一个"),n("code",[e._v("DataInputStream")]),e._v("内，所以显得有点不方便。但采用这种设计模式，可以获得最大的灵活性。")]),e._v(" "),n("h2",{attrs:{id:"_10-5-5-管道数据流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-5-管道数据流"}},[e._v("#")]),e._v(" 10.5.5 管道数据流")]),e._v(" "),n("p",[e._v("本章已简要介绍了"),n("code",[e._v("PipedInputStream")]),e._v("（管道输入流）和"),n("code",[e._v("PipedOutputStream")]),e._v("（管道输出流）。尽管描述不十分详细，但并不是说它们作用不大。然而，只有在掌握了多线程处理的概念后，才可真正体会它们的价值所在。原因很简单，因为管道化的数据流就是用于线程之间的通信。这方面的问题将在第14章用一个示例说明。")])])}),[],!1,null,null,null);t.default=r.exports}}]);