(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{540:function(t,e,i){"use strict";i.r(e);var n=i(56),c=Object(n.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"_6-5-protected"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-protected"}},[t._v("#")]),t._v(" 6.5 "),i("code",[t._v("protected")])]),t._v(" "),i("p",[t._v("现在我们已理解了继承的概念，"),i("code",[t._v("protected")]),t._v("这个关键字最后终于有了意义。在理想情况下，"),i("code",[t._v("private")]),t._v("成员随时都是“私有”的，任何人不得访问。但在实际应用中，经常想把某些东西深深地藏起来，但同时允许访问派生类的成员。"),i("code",[t._v("protected")]),t._v("关键字可帮助我们做到这一点。它的意思是“它本身是私有的，但可由从这个类继承的任何东西或者同一个包内的其他任何东西访问”。也就是说，Java中的"),i("code",[t._v("protected")]),t._v("会成为进入“友好”状态。")]),t._v(" "),i("p",[t._v("我们采取的最好的做法是保持成员的"),i("code",[t._v("private")]),t._v("状态——无论如何都应保留对基 础的实现细节进行修改的权利。在这一前提下，可通过"),i("code",[t._v("protected")]),t._v("方法允许类的继承者进行受到控制的访问：")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("//: Orc.java\n// The protected keyword\nimport java.util.*;\n\nclass Villain {\n  private int i;\n  protected int read() { return i; }\n  protected void set(int ii) { i = ii; }\n  public Villain(int ii) { i = ii; }\n  public int value(int m) { return m*i; }\n}\n\npublic class Orc extends Villain {\n  private int j;\n  public Orc(int jj) { super(jj); j = jj; }\n  public void change(int x) { set(x); }\n} ///:~\n")])])]),i("p",[t._v("可以看到，"),i("code",[t._v("change()")]),t._v("拥有对"),i("code",[t._v("set()")]),t._v("的访问权限，因为它的属性是"),i("code",[t._v("protected")]),t._v("（受到保护的）。")])])}),[],!1,null,null,null);e.default=c.exports}}]);