(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{448:function(e,t,n){"use strict";n.r(t);var a=n(56),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_13-11-列表框"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-11-列表框"}},[e._v("#")]),e._v(" 13.11 列表框")]),e._v(" "),n("p",[e._v("列表框与选择框有完全的不同，而不仅仅是当我们在激活选择框时的显示不同，列表框固定在屏幕的指定位置不会改变。另外，一个列表框允许多个选择：如果我们单击在超过一个的项目上，未选择的则表现为高亮度，我们可以选择象我们想要的一样的多。如果我们想察看项目列表，我们可以调用"),n("code",[e._v("getSelectedItem()")]),e._v("来产生一个被选择的项目列表。要想从一个组里删除一个项目，我们必须再一次的单击它。列表框，当然这里有一个问题就是它默认的动作是双击而不是单击。单击从组中增加或删除项目，双击调用"),n("code",[e._v("action()")]),e._v("。解决这个问题的方法是象下面的程序假设的一样重新培训我们的用户。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: List1.java\n// Using lists with action()\nimport java.awt.*;\nimport java.applet.*;\n\npublic class List1 extends Applet {\n  String[] flavors = { "Chocolate", "Strawberry",\n    "Vanilla Fudge Swirl", "Mint Chip",\n    "Mocha Almond Fudge", "Rum Raisin",\n    "Praline Cream", "Mud Pie" };\n  // Show 6 items, allow multiple selection:\n  List lst = new List(6, true);\n  TextArea t = new TextArea(flavors.length, 30);\n  Button b = new Button("test");\n  int count = 0;\n  public void init() {\n    t.setEditable(false);\n    for(int i = 0; i < 4; i++)\n      lst.addItem(flavors[count++]);\n    add(t);\n    add(lst);\n    add(b);\n  }\n  public boolean action (Event evt, Object arg) {\n    if(evt.target.equals(lst)) {\n      t.setText("");\n      String[] items = lst.getSelectedItems();\n      for(int i = 0; i < items.length; i++)\n        t.appendText(items[i] + "\\n");\n    }\n    else if(evt.target.equals(b)) {\n      if(count < flavors.length)\n        lst.addItem(flavors[count++], 0);\n    }\n    else\n      return super.action(evt, arg);\n    return true;\n  }\n} ///:~\n')])])]),n("p",[e._v("按下按钮时，按钮增加项目到列表的顶部（因为"),n("code",[e._v("addItem()")]),e._v("的第二个参数为零）。增加项目到列表框比到选择框更加的合理，因为用户期望去滚动一个列表框（因为这个原因，它有内建的滚动条）但用户并不愿意像在前面的例子里不得不去计算怎样才能滚动到要要的那个项目。\n然而，调用"),n("code",[e._v("action()")]),e._v("的唯一方法就是通过双击。如果我们想监视用户在我们的列表中的所作所为（尤其是单击），我们必须提供一个可供选择的方法。")]),e._v(" "),n("h2",{attrs:{id:"_13-11-1-handleevent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-11-1-handleevent"}},[e._v("#")]),e._v(" 13.11.1 handleEvent()")]),e._v(" "),n("p",[e._v("到目前为止，我们已使用了"),n("code",[e._v("action()")]),e._v("，现有另一种方法"),n("code",[e._v("handleEvent()")]),e._v("可对每一事件进行尝试。当一个事件发生时，它总是针对单独事件或发生在单独的事件对象上。该对象的"),n("code",[e._v("handleEvent()")]),e._v("方法是自动调用的，并且是被"),n("code",[e._v("handleEvent()")]),e._v("创建并传递到"),n("code",[e._v("handleEvent()")]),e._v("里。默认的"),n("code",[e._v("handleEvent()")]),e._v("（"),n("code",[e._v("handleEvent()")]),e._v("定义在组件里，基类的所有控件都在AWT里）将像我们以前一样调用"),n("code",[e._v("action()")]),e._v("或其它同样的方法去指明鼠标的活动、键盘活动或者指明移动的焦点。我们将会在本章的后面部分看到。")]),e._v(" "),n("p",[e._v("如果其它的方法－特别是"),n("code",[e._v("action()")]),e._v("－不能满足我们的需要怎么办呢？至于列表框，例如，如果我想捕捉鼠标单击，但"),n("code",[e._v("action()")]),e._v("只响应双击怎么办呢？这个解答是重载"),n("code",[e._v("handleEvent()")]),e._v("，毕竟它是从程序片中得到的，因此可以重载任何非确定的方法。当我们为程序片重载"),n("code",[e._v("handleEvent()")]),e._v("时，我们会得到所有的事件在它们发送出去之前，所以我们不能假设“这里有我的按钮可做的事件，所以我们可以假设按钮被按下了”从它被"),n("code",[e._v("action()")]),e._v("设为真值。在"),n("code",[e._v("handleEvent()")]),e._v("中按钮拥有焦点且某人对它进行分配都是可能的。不论它合理与否，我们可测试这些事件并遵照"),n("code",[e._v("handleEvent()")]),e._v("来进行操作。")]),e._v(" "),n("p",[e._v("为了修改列表样本，使它会响应鼠标的单击，在"),n("code",[e._v("action()")]),e._v("中按钮测试将被重载，但代码会处理的列表将像下面的例子被移进"),n("code",[e._v("handleEvent()")]),e._v("中去：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: List2.java\n// Using lists with handleEvent()\nimport java.awt.*;\nimport java.applet.*;\n\npublic class List2 extends Applet {\n  String[] flavors = { "Chocolate", "Strawberry",\n    "Vanilla Fudge Swirl", "Mint Chip",\n    "Mocha Almond Fudge", "Rum Raisin",\n    "Praline Cream", "Mud Pie" };\n  // Show 6 items, allow multiple selection:\n  List lst = new List(6, true);\n  TextArea t = new TextArea(flavors.length, 30);\n  Button b = new Button("test");\n  int count = 0;\n  public void init() {\n    t.setEditable(false);\n    for(int i = 0; i < 4; i++)\n      lst.addItem(flavors[count++]);\n    add(t);\n    add(lst);\n    add(b);\n  }\n  public boolean handleEvent(Event evt) {\n    if(evt.id == Event.LIST_SELECT ||\n       evt.id == Event.LIST_DESELECT) {\n      if(evt.target.equals(lst)) {\n        t.setText("");\n        String[] items = lst.getSelectedItems();\n        for(int i = 0; i < items.length; i++)\n          t.appendText(items[i] + "\\n");\n      }\n      else\n        return super.handleEvent(evt);\n    }\n    else\n      return super.handleEvent(evt);\n    return true;\n  }\n  public boolean action(Event evt, Object arg) {\n    if(evt.target.equals(b)) {\n      if(count < flavors.length)\n        lst.addItem(flavors[count++], 0);\n    }\n    else\n      return super.action(evt, arg);\n    return true;\n  }\n} ///:~\n')])])]),n("p",[e._v("这个例子同前面的例子相同除了增加了"),n("code",[e._v("handleEvent()")]),e._v("外简直一模一样。在程序中做了试验来验证是否列表框的选择和非选择存在。现在请记住，"),n("code",[e._v("handleEvent()")]),e._v("被程序片所重载，所以它能在窗体中任何存在，并且被其它的列表当成事件来处理。因此我们同样必须通过试验来观察目标。（虽然在这个例子中，程序片中只有一个列表框所以我们能假设所有的列表框事件必须服务于列表框。这是一个不好的习惯，一旦其它的列表框加入，它就会变成程序中的一个缺陷。）如果列表框匹配一个我们感兴趣的列表框，像前面的一样的代码将按上面的策略来运行。注意"),n("code",[e._v("handleEvent()")]),e._v("的窗体与"),n("code",[e._v("action()")]),e._v("的相同：如果我们处理一个单独的事件，将返回真值，但如果我们对其它的一些事件不感兴趣，通过"),n("code",[e._v("handleEvent()")]),e._v("我们必须返回"),n("code",[e._v("super.handleEvent()")]),e._v("值。这便是程序的核心，如果我们不那样做，其它的任何一个事件处理代码也不会被调用。例如，试注解在上面的代码中返回"),n("code",[e._v("super.handleEvent(evt)")]),e._v("的值。我们将发现"),n("code",[e._v("action()")]),e._v("没有被调用，当然那不是我们想得到的。对"),n("code",[e._v("action()")]),e._v("和"),n("code",[e._v("handlEvent()")]),e._v("而言，最重要的是跟着上面例子中的格式，并且当我们自己不处理事件时一直返回基类的方法版本信息。（在例子中我们将返回真值）。（幸运的是，这些类型的错误的仅属于Java 1.0版，在本章后面将看到的新设计的Java 1.1消除了这些类型的错误。）")]),e._v(" "),n("p",[e._v("在windows里，如果我们按下"),n("code",[e._v("shift")]),e._v("键，列表框自动允许我们做多个选择。这非常的棒，因为它允许用户做单个或多个的选择而不是编程期间固定的。我们可能会认为我们变得更加的精明，并且当一个鼠标单击被"),n("code",[e._v("evt.shiftdown()")]),e._v("产生时如果"),n("code",[e._v("shift")]),e._v("键是按下的将执行我们自己的试验程序。AWT的设计妨碍了我们－我们不得不去了解哪个项目被鼠标点击时是否按下了"),n("code",[e._v("shift")]),e._v("键，所以我们能取消其余部分所有的选择并且只选择那一个。不管怎样，我们是不可能在Java 1.0版中做出来的。（Java 1.1将所有的鼠标、键盘、焦点事件传送到列表中，所以我们能够完成它。）")])])}),[],!1,null,null,null);t.default=v.exports}}]);