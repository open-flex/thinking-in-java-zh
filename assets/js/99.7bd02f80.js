(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{497:function(t,e,n){"use strict";n.r(e);var s=n(56),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第16章-设计模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第16章-设计模式"}},[t._v("#")]),t._v(" 第16章 设计模式")]),t._v(" "),n("p",[t._v("本章要向大家介绍重要但却并不是那么传统的“模式”（Pattern）程序设计方法。")]),t._v(" "),n("p",[t._v("在向面向对象程序设计的演化过程中，或许最重要的一步就是“设计模式”（Design Pattern）的问世。它在由Gamma，Helm和Johnson编著的《设计模式》一书中被定义成一个“里程碑”（该书由Addison-Wesley于1995年出版，注释①）。那本书列出了解决这个问题的23种不同的方法。在本章中，我们准备伴随几个例子揭示出设计模式的基本概念。这或许能激起您阅读《设计模式》一书的欲望。事实上，那本书现在已成为几乎所有OOP程序员都必备的参考书。")]),t._v(" "),n("p",[t._v("①：但警告大家：书中的例子是用C++写的。")]),t._v(" "),n("p",[t._v("本章的后一部分包含了展示设计进化过程的一个例子，首先是比较原始的方案，经过逐渐发展和改进，慢慢成为更符合逻辑、更为恰当的设计。该程序（仿真垃圾分类）一直都在进化，可将这种进化作为自己设计模式的一个原型——先为特定的问题提出一个适当的方案，再逐步改善，使其成为解决那类问题一种最灵活的方案。")])])}),[],!1,null,null,null);e.default=a.exports}}]);