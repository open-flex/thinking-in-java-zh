(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{523:function(n,a,t){"use strict";t.r(a);var e=t(56),i=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_4-5-数组初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-数组初始化"}},[n._v("#")]),n._v(" 4.5 数组初始化")]),n._v(" "),t("p",[n._v("在C中初始化数组极易出错，而且相当麻烦。C++通过“集合初始化”使其更安全（注释⑥）。Java则没有象C++那样的“集合”概念，因为Java中的所有东西都是对象。但它确实有自己的数组，通过数组初始化来提供支持。")]),n._v(" "),t("p",[n._v("数组代表一系列对象或者基本数据类型，所有相同的类型都封装到一起——采用一个统一的标识符名称。数组的定义和使用是通过方括号索引运算符进行的（"),t("code",[n._v("[]")]),n._v("）。为定义一个数组，只需在类型名后简单地跟随一对空方括号即可：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int[] al;\n")])])]),t("p",[n._v("也可以将方括号置于标识符后面，获得完全一致的结果：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int al[];\n")])])]),t("p",[n._v("这种格式与C和C++程序员习惯的格式是一致的。然而，最“通顺”的也许还是前一种语法，因为它指出类型是“一个"),t("code",[n._v("int")]),n._v("数组”。本书将沿用那种格式。")]),n._v(" "),t("p",[n._v("编译器不允许我们告诉它一个数组有多大。这样便使我们回到了“引用”的问题上。此时，我们拥有的一切就是指向数组的一个引用，而且尚未给数组分配任何空间。为了给数组创建相应的存储空间，必须编写一个初始化表达式。对于数组，初始化工作可在代码的任何地方出现，但也可以使用一种特殊的初始化表达式，它必须在数组创建的地方出现。这种特殊的初始化是一系列由花括号封闭起来的值。存储空间的分配（等价于使用"),t("code",[n._v("new")]),n._v("）将由编译器在这种情况下进行。例如：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int[] a1 = { 1, 2, 3, 4, 5 };\n")])])]),t("p",[n._v("那么为什么还要定义一个没有数组的数组引用呢？")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int[] a2;\n")])])]),t("p",[n._v("事实上在Java中，可将一个数组分配给另一个，所以能使用下述语句：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("a2 = a1;\n")])])]),t("p",[n._v("我们真正准备做的是复制一个引用，就象下面演示的那样：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//: Arrays.java\n// Arrays of primitives.\n\npublic class Arrays {\n  public static void main(String[] args) {\n    int[] a1 = { 1, 2, 3, 4, 5 };\n    int[] a2;\n    a2 = a1;\n    for(int i = 0; i < a2.length; i++)\n      a2[i]++;\n    for(int i = 0; i < a1.length; i++)\n      prt("a1[" + i + "] = " + a1[i]);\n  }\n  static void prt(String s) {\n    System.out.println(s);\n  }\n} ///:~\n')])])]),t("p",[n._v("大家看到"),t("code",[n._v("a1")]),n._v("获得了一个初始值，而"),t("code",[n._v("a2")]),n._v("没有；"),t("code",[n._v("a2")]),n._v("将在以后赋值——这种情况下是赋给另一个数组。")]),n._v(" "),t("p",[n._v("这里也出现了一些新东西：所有数组都有一个本质成员（无论它们是对象数组还是基本类型数组），可对其进行查询——但不是改变，从而获知数组内包含了多少个元素。这个成员就是"),t("code",[n._v("length")]),n._v("。与C和C++类似，由于Java数组从元素0开始计数，所以能索引的最大元素编号是"),t("code",[n._v("length-1")]),n._v("。如超出边界，C和C++会“默默”地接受，并允许我们胡乱使用自己的内存，这正是许多程序错误的根源。然而，Java可保留我们这受这一问题的损害，方法是一旦超过边界，就生成一个运行期错误（即一个“异常”，这是第9章的主题）。当然，由于需要检查每个数组的访问，所以会消耗一定的时间和多余的代码量，而且没有办法把它关闭。这意味着数组访问可能成为程序效率低下的重要原因——如果它们在关键的场合进行。但考虑到因特网访问的安全，以及程序员的编程效率，Java设计人员还是应该把它看作是值得的。")]),n._v(" "),t("p",[n._v("程序编写期间，如果不知道在自己的数组里需要多少元素，那么又该怎么办呢？此时，只需简单地用"),t("code",[n._v("new")]),n._v("在数组里创建元素。在这里，即使准备创建的是一个基本数据类型的数组，"),t("code",[n._v("new")]),n._v("也能正常地工作（"),t("code",[n._v("new")]),n._v("不会创建非数组的基本类型）：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//: ArrayNew.java\n// Creating arrays with new.\nimport java.util.*;\n\npublic class ArrayNew {\n  static Random rand = new Random();\n  static int pRand(int mod) {\n    return Math.abs(rand.nextInt()) % mod + 1;\n  }\n  public static void main(String[] args) {\n    int[] a;\n    a = new int[pRand(20)];\n    prt("length of a = " + a.length);\n    for(int i = 0; i < a.length; i++)\n      prt("a[" + i + "] = " + a[i]);\n  }\n  static void prt(String s) {\n    System.out.println(s);\n  }\n} ///:~\n')])])]),t("p",[n._v("由于数组的大小是随机决定的（使用早先定义的"),t("code",[n._v("pRand()")]),n._v("方法），所以非常明显，数组的创建实际是在运行期间进行的。除此以外，从这个程序的输出中，大家可看到基本数据类型的数组元素会自动初始化成“空”值（对于数值，空值就是零；对于"),t("code",[n._v("char")]),n._v("，它是"),t("code",[n._v("null")]),n._v("；而对于"),t("code",[n._v("boolean")]),n._v("，它却是"),t("code",[n._v("false")]),n._v("）。")]),n._v(" "),t("p",[n._v("当然，数组可能已在相同的语句中定义和初始化了，如下所示：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int[] a = new int[pRand(20)];\n")])])]),t("p",[n._v("若操作的是一个非基本类型对象的数组，那么无论如何都要使用"),t("code",[n._v("new")]),n._v("。在这里，我们会再一次遇到引用问题，因为我们创建的是一个引用数组。请大家观察包装器类型"),t("code",[n._v("Integer")]),n._v("，它是一个类，而非基本数据类型：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//: ArrayClassObj.java\n// Creating an array of non-primitive objects.\nimport java.util.*;\n\npublic class ArrayClassObj {\n  static Random rand = new Random();\n  static int pRand(int mod) {\n    return Math.abs(rand.nextInt()) % mod + 1;\n  }\n  public static void main(String[] args) {\n    Integer[] a = new Integer[pRand(20)];\n    prt("length of a = " + a.length);\n    for(int i = 0; i < a.length; i++) {\n      a[i] = new Integer(pRand(500));\n      prt("a[" + i + "] = " + a[i]);\n    }\n  }\n  static void prt(String s) {\n    System.out.println(s);\n  }\n} ///:~\n')])])]),t("p",[n._v("在这儿，甚至在"),t("code",[n._v("new")]),n._v("调用后才开始创建数组：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Integer[] a = new Integer[pRand(20)];\n")])])]),t("p",[n._v("它只是一个引用数组，而且除非通过创建一个新的"),t("code",[n._v("Integer")]),n._v("对象，从而初始化了对象引用，否则初始化进程不会结束：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("a[i] = new Integer(pRand(500));\n")])])]),t("p",[n._v("但若忘记创建对象，就会在运行期试图读取空数组位置时获得一个“异常”错误。")]),n._v(" "),t("p",[n._v("下面让我们看看打印语句中"),t("code",[n._v("String")]),n._v("对象的构成情况。大家可看到指向"),t("code",[n._v("Integer")]),n._v("对象的引用会自动转换，从而产生一个"),t("code",[n._v("String")]),n._v("，它代表着位于对象内部的值。")]),n._v(" "),t("p",[n._v("亦可用花括号封闭列表来初始化对象数组。可采用两种形式，第一种是Java 1.0允许的唯一形式。第二种（等价）形式自Java 1.1才开始提供支持：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//: ArrayInit.java\n// Array initialization\n\npublic class ArrayInit {\n  public static void main(String[] args) {\n    Integer[] a = {\n      new Integer(1),\n      new Integer(2),\n      new Integer(3),\n    };\n\n    // Java 1.1 only:\n    Integer[] b = new Integer[] {\n      new Integer(1),\n      new Integer(2),\n      new Integer(3),\n    };\n  }\n} ///:~\n")])])]),t("p",[n._v("这种做法大多数时候都很有用，但限制也是最大的，因为数组的大小是在编译期间决定的。初始化列表的最后一个逗号是可选的（这一特性使长列表的维护变得更加容易）。")]),n._v(" "),t("p",[n._v("数组初始化的第二种形式（Java 1.1开始支持）提供了一种更简便的语法，可创建和调用方法，获得与C的“变量参数列表”（C通常把它简称为“变参表”）一致的效果。这些效果包括未知的参数数量以及未知的类型（如果这样选择的话）。由于所有类最终都是从通用的根类"),t("code",[n._v("Object")]),n._v("中继承的，所以能创建一个方法，令其获取一个"),t("code",[n._v("Object")]),n._v("数组，并象下面这样调用它：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//: VarArgs.java\n// Using the Java 1.1 array syntax to create\n// variable argument lists\n\nclass A { int i; }\n\npublic class VarArgs {\n  static void f(Object[] x) {\n    for(int i = 0; i < x.length; i++)\n      System.out.println(x[i]);\n  }\n  public static void main(String[] args) {\n    f(new Object[] {\n        new Integer(47), new VarArgs(),\n        new Float(3.14), new Double(11.11) });\n    f(new Object[] {"one", "two", "three" });\n    f(new Object[] {new A(), new A(), new A()});\n  }\n} ///:~\n')])])]),t("p",[n._v("此时，我们对这些未知的对象并不能采取太多的操作，而且这个程序利用自动"),t("code",[n._v("String")]),n._v("转换对每个"),t("code",[n._v("Object")]),n._v("做一些有用的事情。在第11章（运行期类型识别或RTTI），大家还会学习如何调查这类对象的准确类型，使自己能对它们做一些有趣的事情。")]),n._v(" "),t("h2",{attrs:{id:"_4-5-1-多维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-1-多维数组"}},[n._v("#")]),n._v(" 4.5.1 多维数组")]),n._v(" "),t("p",[n._v("在Java里可以方便地创建多维数组：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//: MultiDimArray.java\n// Creating multidimensional arrays.\nimport java.util.*;\n\npublic class MultiDimArray {\n  static Random rand = new Random();\n  static int pRand(int mod) {\n    return Math.abs(rand.nextInt()) % mod + 1;\n  }\n  public static void main(String[] args) {\n    int[][] a1 = {\n      { 1, 2, 3, },\n      { 4, 5, 6, },\n    };\n    for(int i = 0; i < a1.length; i++)\n      for(int j = 0; j < a1[i].length; j++)\n        prt("a1[" + i + "][" + j +\n            "] = " + a1[i][j]);\n    // 3-D array with fixed length:\n    int[][][] a2 = new int[2][2][4];\n    for(int i = 0; i < a2.length; i++)\n      for(int j = 0; j < a2[i].length; j++)\n        for(int k = 0; k < a2[i][j].length;\n            k++)\n          prt("a2[" + i + "][" +\n              j + "][" + k +\n              "] = " + a2[i][j][k]);\n    // 3-D array with varied-length vectors:\n    int[][][] a3 = new int[pRand(7)][][];\n    for(int i = 0; i < a3.length; i++) {\n      a3[i] = new int[pRand(5)][];\n      for(int j = 0; j < a3[i].length; j++)\n        a3[i][j] = new int[pRand(5)];\n    }\n    for(int i = 0; i < a3.length; i++)\n      for(int j = 0; j < a3[i].length; j++)\n        for(int k = 0; k < a3[i][j].length;\n            k++)\n          prt("a3[" + i + "][" +\n              j + "][" + k +\n              "] = " + a3[i][j][k]);\n    // Array of non-primitive objects:\n    Integer[][] a4 = {\n      { new Integer(1), new Integer(2)},\n      { new Integer(3), new Integer(4)},\n      { new Integer(5), new Integer(6)},\n    };\n    for(int i = 0; i < a4.length; i++)\n      for(int j = 0; j < a4[i].length; j++)\n        prt("a4[" + i + "][" + j +\n            "] = " + a4[i][j]);\n    Integer[][] a5;\n    a5 = new Integer[3][];\n    for(int i = 0; i < a5.length; i++) {\n      a5[i] = new Integer[3];\n      for(int j = 0; j < a5[i].length; j++)\n        a5[i][j] = new Integer(i*j);\n    }\n    for(int i = 0; i < a5.length; i++)\n      for(int j = 0; j < a5[i].length; j++)\n        prt("a5[" + i + "][" + j +\n            "] = " + a5[i][j]);\n  }\n  static void prt(String s) {\n    System.out.println(s);\n  }\n} ///:~\n')])])]),t("p",[n._v("用于打印的代码里使用了"),t("code",[n._v("length")]),n._v("，所以它不必依赖固定的数组大小。\n第一个例子展示了基本数据类型的一个多维数组。我们可用花括号定出数组内每个向量的边界：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int[][] a1 = {\n{ 1, 2, 3, },\n{ 4, 5, 6, },\n};\n")])])]),t("p",[n._v("每个方括号对都将我们移至数组的下一级。\n第二个例子展示了用"),t("code",[n._v("new")]),n._v("分配的一个三维数组。在这里，整个数组都是立即分配的：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("int[][][] a2 = new int[2][2][4];\n")])])]),t("p",[n._v("但第三个例子却向大家揭示出构成矩阵的每个向量都可以有任意的长度：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    int[][][] a3 = new int[pRand(7)][][];\n    for(int i = 0; i < a3.length; i++) {\n      a3[i] = new int[pRand(5)][];\n      for(int j = 0; j < a3[i].length; j++)\n        a3[i][j] = new int[pRand(5)];\n    }\n")])])]),t("p",[n._v("对于第一个"),t("code",[n._v("new")]),n._v("创建的数组，它的第一个元素的长度是随机的，其他元素的长度则没有定义。"),t("code",[n._v("for")]),n._v("循环内的第二个"),t("code",[n._v("new")]),n._v("则会填写元素，但保持第三个索引的未定状态——直到碰到第三个"),t("code",[n._v("new")]),n._v("。")]),n._v(" "),t("p",[n._v("根据输出结果，大家可以看到：假若没有明确指定初始化值，数组值就会自动初始化成零。\n可用类似的表式处理非基本类型对象的数组。这从第四个例子可以看出，它向我们演示了用花括号收集多个"),t("code",[n._v("new")]),n._v("表达式的能力：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    Integer[][] a4 = {\n      { new Integer(1), new Integer(2)},\n      { new Integer(3), new Integer(4)},\n      { new Integer(5), new Integer(6)},\n    };\n")])])]),t("p",[n._v("第五个例子展示了如何逐渐构建非基本类型的对象数组：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    Integer[][] a5;\n    a5 = new Integer[3][];\n    for(int i = 0; i < a5.length; i++) {\n      a5[i] = new Integer[3];\n      for(int j = 0; j < a5[i].length; j++)\n        a5[i][j] = new Integer(i*j);\n    }\n")])])]),t("p",[t("code",[n._v("i*j")]),n._v("只是在"),t("code",[n._v("Integer")]),n._v("里置了一个有趣的值。")])])}),[],!1,null,null,null);a.default=i.exports}}]);