(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{521:function(n,t,a){"use strict";a.r(t);var e=a(56),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_4-4-成员初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-成员初始化"}},[n._v("#")]),n._v(" 4.4 成员初始化")]),n._v(" "),a("p",[n._v("Java尽自己的全力保证所有变量都能在使用前得到正确的初始化。若被定义成相对于一个方法的“局部”变量，这一保证就通过编译期的出错提示表现出来。因此，如果使用下述代码：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("void f() {\nint i;\ni++;\n}\n")])])]),a("p",[n._v("就会收到一条出错提示消息，告诉你"),a("code",[n._v("i")]),n._v("可能尚未初始化。当然，编译器也可为"),a("code",[n._v("i")]),n._v("赋予一个默认值，但它看起来更象一个程序员的失误，此时默认值反而会“帮倒忙”。若强迫程序员提供一个初始值，就往往能够帮他／她纠出程序里的“Bug”。")]),n._v(" "),a("p",[n._v("然而，若将基本类型设为一个类的数据成员，情况就会变得稍微有些不同。由于任何方法都可以初始化或使用那个数据，所以在正式使用数据前，若还是强迫程序员将其初始化成一个适当的值，就可能不是一种实际的做法。然而，若为其赋予一个垃圾值，同样是非常不安全的。因此，一个类的所有基本类型数据成员都会保证获得一个初始值。可用下面这段小程序看到这些值：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//: InitialValues.java\n// Shows default initial values\n\nclass Measurement {\n  boolean t;\n  char c;\n  byte b;\n  short s;\n  int i;\n  long l;\n  float f;\n  double d;\n  void print() {\n    System.out.println(\n      "Data type      Inital value\\n" +\n      "boolean        " + t + "\\n" +\n      "char           " + c + "\\n" +\n      "byte           " + b + "\\n" +\n      "short          " + s + "\\n" +\n      "int            " + i + "\\n" +\n      "long           " + l + "\\n" +\n      "float          " + f + "\\n" +\n      "double         " + d);\n  }\n}\n\npublic class InitialValues {\n  public static void main(String[] args) {\n    Measurement d = new Measurement();\n    d.print();\n    /* In this case you could also say:\n    new Measurement().print();\n    */\n  }\n} ///:~\n')])])]),a("p",[n._v("输入结果如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Data type      Inital value\nboolean        false\nchar\nbyte           0\nshort          0\nint            0\nlong           0\nfloat          0.0\ndouble         0.0\n")])])]),a("p",[n._v("其中，"),a("code",[n._v("Char")]),n._v("值为空（"),a("code",[n._v("NULL")]),n._v("），没有数据打印出来。")]),n._v(" "),a("p",[n._v("稍后大家就会看到：在一个类的内部定义一个对象引用时，如果不将其初始化成新对象，那个引用就会获得一个空值。")]),n._v(" "),a("h2",{attrs:{id:"_4-4-1-规定初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-规定初始化"}},[n._v("#")]),n._v(" 4.4.1 规定初始化")]),n._v(" "),a("p",[n._v("如果想自己为变量赋予一个初始值，又会发生什么情况呢？为达到这个目的，一个最直接的做法是在类内部定义变量的同时也为其赋值（注意在C++里不能这样做，尽管C++的新手们总“想”这样做）。在下面，"),a("code",[n._v("Measurement")]),n._v("类内部的字段定义已发生了变化，提供了初始值：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Measurement {\n  boolean b = true;\n  char c = 'x';\n  byte B = 47;\n  short s = 0xff;\n  int i = 999;\n  long l = 1;\n  float f = 3.14f;\n  double d = 3.14159;\n  //. . .\n")])])]),a("p",[n._v("亦可用相同的方法初始化非基本（主）类型的对象。若"),a("code",[n._v("Depth")]),n._v("是一个类，那么可象下面这样插入一个变量并进行初始化：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Measurement {\nDepth o = new Depth();\nboolean b = true;\n// . . .\n")])])]),a("p",[n._v("若尚未为"),a("code",[n._v("o")]),n._v("指定一个初始值，同时不顾一切地提前试用它，就会得到一条运行期错误提示，告诉你产生了名为“异常”（"),a("code",[n._v("Exception")]),n._v("）的一个错误（在第9章详述）。\n甚至可通过调用一个方法来提供初始值：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class CInit {\nint i = f();\n//...\n}\n")])])]),a("p",[n._v("当然，这个方法亦可使用参数，但那些参数不可是尚未初始化的其他类成员。因此，下面这样做是合法的：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class CInit {\nint i = f();\nint j = g(i);\n//...\n}\n")])])]),a("p",[n._v("但下面这样做是非法的：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class CInit {\nint j = g(i);\nint i = f();\n//...\n}\n")])])]),a("p",[n._v("这正是编译器对“向前引用”感到不适应的一个地方，因为它与初始化的顺序有关，而不是与程序的编译方式有关。")]),n._v(" "),a("p",[n._v("这种初始化方法非常简单和直观。它的一个限制是类型"),a("code",[n._v("Measurement")]),n._v("的每个对象都会获得相同的初始化值。有时，这正是我们希望的结果，但有时却需要盼望更大的灵活性。")]),n._v(" "),a("h2",{attrs:{id:"_4-4-2-构造器初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-构造器初始化"}},[n._v("#")]),n._v(" 4.4.2 构造器初始化")]),n._v(" "),a("p",[n._v("可考虑用构造器执行初始化进程。这样便可在编程时获得更大的灵活程度，因为我们可以在运行期调用方法和采取行动，从而“现场”决定初始化值。但要注意这样一件事情：不可妨碍自动初始化的进行，它在构造器进入之前就会发生。因此，假如使用下述代码：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Counter {\nint i;\nCounter() { i = 7; }\n// . . .\n")])])]),a("p",[n._v("那么i首先会初始化成零，然后变成7。对于所有基本类型以及对象引用，这种情况都是成立的，其中包括在定义时已进行了明确初始化的那些一些。考虑到这个原因，编译器不会试着强迫我们在构造器任何特定的场所对元素进行初始化，或者在它们使用之前——初始化早已得到了保证（注释⑤）。")]),n._v(" "),a("p",[n._v("⑤：相反，C++有自己的“构造器初始模块列表”，能在进入构造器主体之前进行初始化，而且它对于对象来说是强制进行的。参见《Thinking in C++》。")]),n._v(" "),a("p",[n._v("(1) 初始化顺序")]),n._v(" "),a("p",[n._v("在一个类里，初始化的顺序是由变量在类内的定义顺序决定的。即使变量定义大量遍布于方法定义的中间，那些变量仍会在调用任何方法之前得到初始化——甚至在构造器调用之前。例如：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//: OrderOfInitialization.java\n// Demonstrates initialization order.\n\n// When the constructor is called, to create a\n// Tag object, you\'ll see a message:\nclass Tag {\n  Tag(int marker) {\n    System.out.println("Tag(" + marker + ")");\n  }\n}\n\nclass Card {\n  Tag t1 = new Tag(1); // Before constructor\n  Card() {\n    // Indicate we\'re in the constructor:\n    System.out.println("Card()");\n    t3 = new Tag(33); // Re-initialize t3\n  }\n  Tag t2 = new Tag(2); // After constructor\n  void f() {\n    System.out.println("f()");\n  }\n  Tag t3 = new Tag(3); // At end\n}\n\npublic class OrderOfInitialization {\n  public static void main(String[] args) {\n    Card t = new Card();\n    t.f(); // Shows that construction is done\n  }\n} ///:~\n')])])]),a("p",[n._v("在"),a("code",[n._v("Card")]),n._v("中，"),a("code",[n._v("Tag")]),n._v("对象的定义故意到处散布，以证明它们全都会在构造器进入或者发生其他任何事情之前得到初始化。除此之外，"),a("code",[n._v("t3")]),n._v("在构造器内部得到了重新初始化。它的输入结果如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Tag(1)\nTag(2)\nTag(3)\nCard()\nTag(33)\nf()\n")])])]),a("p",[n._v("因此，"),a("code",[n._v("t3")]),n._v("引用会被初始化两次，一次在构造器调用前，一次在调用期间（第一个对象会被丢弃，所以它后来可被当作垃圾收掉）。从表面看，这样做似乎效率低下，但它能保证正确的初始化——若定义了一个重载的构造器，它没有初始化"),a("code",[n._v("t3")]),n._v("；同时在"),a("code",[n._v("t3")]),n._v("的定义里并没有规定“默认”的初始化方式，那么会产生什么后果呢？")]),n._v(" "),a("p",[n._v("(2) 静态数据的初始化")]),n._v(" "),a("p",[n._v("若数据是静态的（"),a("code",[n._v("static")]),n._v("），那么同样的事情就会发生；如果它属于一个基本类型，而且未对其初始化，就会自动获得自己的标准基本类型初始值；如果它是指向一个对象的引用，那么除非新建一个对象，并将引用同它连接起来，否则就会得到一个空值（"),a("code",[n._v("NULL")]),n._v("）。")]),n._v(" "),a("p",[n._v("如果想在定义的同时进行初始化，采取的方法与非静态值表面看起来是相同的。但由于"),a("code",[n._v("static")]),n._v("值只有一个存储区域，所以无论创建多少个对象，都必然会遇到何时对那个存储区域进行初始化的问题。下面这个例子可将这个问题说更清楚一些：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//: StaticInitialization.java\n// Specifying initial values in a\n// class definition.\n\nclass Bowl {\n  Bowl(int marker) {\n    System.out.println("Bowl(" + marker + ")");\n  }\n  void f(int marker) {\n    System.out.println("f(" + marker + ")");\n  }\n}\n\nclass Table {\n  static Bowl b1 = new Bowl(1);\n  Table() {\n    System.out.println("Table()");\n    b2.f(1);\n  }\n  void f2(int marker) {\n    System.out.println("f2(" + marker + ")");\n  }\n  static Bowl b2 = new Bowl(2);\n}\n\nclass Cupboard {\n  Bowl b3 = new Bowl(3);\n  static Bowl b4 = new Bowl(4);\n  Cupboard() {\n    System.out.println("Cupboard()");\n    b4.f(2);\n  }\n  void f3(int marker) {\n    System.out.println("f3(" + marker + ")");\n  }\n  static Bowl b5 = new Bowl(5);\n}\n\npublic class StaticInitialization {\n  public static void main(String[] args) {\n    System.out.println(\n      "Creating new Cupboard() in main");\n    new Cupboard();\n    System.out.println(\n      "Creating new Cupboard() in main");\n    new Cupboard();\n    t2.f2(1);\n    t3.f3(1);\n  }\n  static Table t2 = new Table();\n  static Cupboard t3 = new Cupboard();\n} ///:~\n')])])]),a("p",[a("code",[n._v("Bowl")]),n._v("允许我们检查一个类的创建过程，而"),a("code",[n._v("Table")]),n._v("和"),a("code",[n._v("Cupboard")]),n._v("能创建散布于类定义中的"),a("code",[n._v("Bowl")]),n._v("的"),a("code",[n._v("static")]),n._v("成员。注意在"),a("code",[n._v("static")]),n._v("定义之前，"),a("code",[n._v("Cupboard")]),n._v("先创建了一个非"),a("code",[n._v("static")]),n._v("的"),a("code",[n._v("Bowl b3")]),n._v("。它的输出结果如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Bowl(1)\nBowl(2)\nTable()\nf(1)\nBowl(4)\nBowl(5)\nBowl(3)\nCupboard()\nf(2)\nCreating new Cupboard() in main\nBowl(3)\nCupboard()\nf(2)\nCreating new Cupboard() in main\nBowl(3)\nCupboard()\nf(2)\nf2(1)\nf3(1)\n")])])]),a("p",[a("code",[n._v("static")]),n._v("初始化只有在必要的时候才会进行。如果不创建一个"),a("code",[n._v("Table")]),n._v("对象，而且永远都不引用"),a("code",[n._v("Table.b1")]),n._v("或"),a("code",[n._v("Table.b2")]),n._v("，那么"),a("code",[n._v("static Bowl b1")]),n._v("和"),a("code",[n._v("b2")]),n._v("永远都不会创建。然而，只有在创建了第一个"),a("code",[n._v("Table")]),n._v("对象之后（或者发生了第一次"),a("code",[n._v("static")]),n._v("访问），它们才会创建。在那以后，"),a("code",[n._v("static")]),n._v("对象不会重新初始化。")]),n._v(" "),a("p",[n._v("初始化的顺序是首先"),a("code",[n._v("static")]),n._v("（如果它们尚未由前一次对象创建过程初始化），接着是非"),a("code",[n._v("static")]),n._v("对象。大家可从输出结果中找到相应的证据。")]),n._v(" "),a("p",[n._v("在这里有必要总结一下对象的创建过程。请考虑一个名为"),a("code",[n._v("Dog")]),n._v("的类：")]),n._v(" "),a("p",[n._v("(1) 类型为"),a("code",[n._v("Dog")]),n._v("的一个对象首次创建时，或者"),a("code",[n._v("Dog")]),n._v("类的"),a("code",[n._v("static")]),n._v("方法／"),a("code",[n._v("static")]),n._v("字段首次访问时，Java解释器必须找到"),a("code",[n._v("Dog.class")]),n._v("（在事先设好的类路径里搜索）。")]),n._v(" "),a("p",[n._v("(2) 找到"),a("code",[n._v("Dog.class")]),n._v("后（它会创建一个"),a("code",[n._v("Class")]),n._v("对象，这将在后面学到），它的所有"),a("code",[n._v("static")]),n._v("初始化模块都会运行。因此，"),a("code",[n._v("static")]),n._v("初始化仅发生一次——在"),a("code",[n._v("Class")]),n._v("对象首次载入的时候。")]),n._v(" "),a("p",[n._v("(3) 创建一个"),a("code",[n._v("new Dog()")]),n._v("时，"),a("code",[n._v("Dog")]),n._v("对象的构建进程首先会在内存堆（Heap）里为一个"),a("code",[n._v("Dog")]),n._v("对象分配足够多的存储空间。")]),n._v(" "),a("p",[n._v("(4) 这种存储空间会清为零，将"),a("code",[n._v("Dog")]),n._v("中的所有基本类型设为它们的默认值（零用于数字，以及"),a("code",[n._v("boolean")]),n._v("和"),a("code",[n._v("char")]),n._v("的等价设定）。")]),n._v(" "),a("p",[n._v("(5) 进行字段定义时发生的所有初始化都会执行。")]),n._v(" "),a("p",[n._v("(6) 执行构造器。正如第6章将要讲到的那样，这实际可能要求进行相当多的操作，特别是在涉及继承的时候。")]),n._v(" "),a("p",[n._v("(3) 明确进行的静态初始化")]),n._v(" "),a("p",[n._v("Java允许我们将其他"),a("code",[n._v("static")]),n._v("初始化工作划分到类内一个特殊的“"),a("code",[n._v("static")]),n._v("构建从句”（有时也叫作“静态块”）里。它看起来象下面这个样子：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Spoon {\n  static int i;\n  static {\n    i = 47;\n  }\n  // . . .\n")])])]),a("p",[n._v("尽管看起来象个方法，但它实际只是一个"),a("code",[n._v("static")]),n._v("关键字，后面跟随一个方法主体。与其他"),a("code",[n._v("static")]),n._v("初始化一样，这段代码仅执行一次——首次生成那个类的一个对象时，或者首次访问属于那个类的一个"),a("code",[n._v("static")]),n._v("成员时（即便从未生成过那个类的对象）。例如：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//: ExplicitStatic.java\n// Explicit static initialization\n// with the "static" clause.\n\nclass Cup {\n  Cup(int marker) {\n    System.out.println("Cup(" + marker + ")");\n  }\n  void f(int marker) {\n    System.out.println("f(" + marker + ")");\n  }\n}\n\nclass Cups {\n  static Cup c1;\n  static Cup c2;\n  static {\n    c1 = new Cup(1);\n    c2 = new Cup(2);\n  }\n  Cups() {\n    System.out.println("Cups()");\n  }\n}\n\npublic class ExplicitStatic {\n  public static void main(String[] args) {\n    System.out.println("Inside main()");\n    Cups.c1.f(99);  // (1)\n  }\n  static Cups x = new Cups();  // (2)\n  static Cups y = new Cups();  // (2)\n} ///:~\n')])])]),a("p",[n._v("在标记为(1)的行内访问"),a("code",[n._v("static")]),n._v("对象"),a("code",[n._v("c1")]),n._v("的时候，或在行(1)标记为注释，同时(2)行不标记成注释的时候，用于"),a("code",[n._v("Cups")]),n._v("的"),a("code",[n._v("static")]),n._v("初始化模块就会运行。若(1)和(2)都被标记成注释，则用于"),a("code",[n._v("Cups")]),n._v("的"),a("code",[n._v("static")]),n._v("初始化进程永远不会发生。")]),n._v(" "),a("p",[n._v("(4) 非静态实例的初始化")]),n._v(" "),a("p",[n._v("针对每个对象的非静态变量的初始化，Java 1.1提供了一种类似的语法格式。下面是一个例子：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//: Mugs.java\n// Java 1.1 "Instance Initialization"\n\nclass Mug {\n  Mug(int marker) {\n    System.out.println("Mug(" + marker + ")");\n  }\n  void f(int marker) {\n    System.out.println("f(" + marker + ")");\n  }\n}\n\npublic class Mugs {\n  Mug c1;\n  Mug c2;\n  {\n    c1 = new Mug(1);\n    c2 = new Mug(2);\n    System.out.println("c1 & c2 initialized");\n  }\n  Mugs() {\n    System.out.println("Mugs()");\n  }\n  public static void main(String[] args) {\n    System.out.println("Inside main()");\n    Mugs x = new Mugs();\n  }\n} ///:~\n')])])]),a("p",[n._v("大家可看到实例初始化从句：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('  {\n    c1 = new Mug(1);\n    c2 = new Mug(2);\n    System.out.println("c1 & c2 initialized");\n  }\n')])])]),a("p",[n._v("它看起来与静态初始化从句极其相似，只是"),a("code",[n._v("static")]),n._v("关键字从里面消失了。为支持对“匿名内部类”的初始化（参见第7章），必须采用这一语法格式。")])])}),[],!1,null,null,null);t.default=s.exports}}]);