(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{468:function(e,n,t){"use strict";t.r(n);var a=t(56),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_14-1-反应灵敏的用户界面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-反应灵敏的用户界面"}},[e._v("#")]),e._v(" 14.1 反应灵敏的用户界面")]),e._v(" "),t("p",[e._v("作为我们的起点，请思考一个需要执行某些CPU密集型计算的程序。由于CPU“全心全意”为那些计算服务，所以对用户的输入十分迟钝，几乎没有什么反应。在这里，我们用一个组合的applet/application（程序片／应用程序）来简单显示出一个计数器的结果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Counter1.java\n// A non-responsive user interface\npackage c14;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class Counter1 extends Applet {\n  private int count = 0;\n  private Button\n    onOff = new Button("Toggle"),\n    start = new Button("Start");\n  private TextField t = new TextField(10);\n  private boolean runFlag = true;\n  public void init() {\n    add(t);\n    start.addActionListener(new StartL());\n    add(start);\n    onOff.addActionListener(new OnOffL());\n    add(onOff);\n  }\n  public void go() {\n    while (true) {\n      try {\n        Thread.currentThread().sleep(100);\n      } catch (InterruptedException e){}\n      if(runFlag)\n        t.setText(Integer.toString(count++));\n    }\n  }\n  class StartL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      go();\n    }\n  }\n  class OnOffL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      runFlag = !runFlag;\n    }\n  }\n  public static void main(String[] args) {\n    Counter1 applet = new Counter1();\n    Frame aFrame = new Frame("Counter1");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("在这个程序中，AWT和程序片代码都应是大家熟悉的，第13章对此已有很详细的交待。"),t("code",[e._v("go()")]),e._v("方法正是程序全心全意服务的对待：将当前的"),t("code",[e._v("count")]),e._v("（计数）值置入"),t("code",[e._v("TextField")]),e._v("（文本字段）"),t("code",[e._v("t")]),e._v("，然后使"),t("code",[e._v("count")]),e._v("自增。")]),e._v(" "),t("p",[t("code",[e._v("go()")]),e._v("内的部分无限循环是调用"),t("code",[e._v("sleep()")]),e._v("。"),t("code",[e._v("sleep()")]),e._v("必须同一个"),t("code",[e._v("Thread")]),e._v("（线程）对象关联到一起，而且似乎每个应用程序都有部分线程同它关联（事实上，Java本身就是建立在线程基础上的，肯定有一些线程会伴随我们写的应用一起运行）。所以无论我们是否明确使用了线程，都可利用"),t("code",[e._v("Thread.currentThread()")]),e._v("产生由程序使用的当前线程，然后为那个线程调用"),t("code",[e._v("sleep()")]),e._v("。注意，"),t("code",[e._v("Thread.currentThread()")]),e._v("是"),t("code",[e._v("Thread")]),e._v("类的一个静态方法。")]),e._v(" "),t("p",[e._v("注意"),t("code",[e._v("sleep()")]),e._v("可能“抛”出一个"),t("code",[e._v("InterruptException")]),e._v("（中断异常）——尽管产生这样的异常被认为是中止线程的一种“恶意”手段，而且应该尽可能地杜绝这一做法。再次提醒大家，异常是为异常情况而产生的，而不是为了正常的控制流。在这里包含了对一个“睡眠”线程的中断，以支持未来的一种语言特性。")]),e._v(" "),t("p",[e._v("一旦按下"),t("code",[e._v("start")]),e._v("按钮，就会调用"),t("code",[e._v("go()")]),e._v("。研究一下"),t("code",[e._v("go()")]),e._v("，你可能会很自然地（就象我一样）认为它该支持多线程，因为它会进入“睡眠”状态。也就是说，尽管方法本身“睡着”了，CPU仍然应该忙于监视其他按钮“按下”事件。但有一个问题，那就是"),t("code",[e._v("go()")]),e._v("是永远不会返回的，因为它被设计成一个无限循环。这意味着"),t("code",[e._v("actionPerformed()")]),e._v("根本不会返回。由于在第一个按键以后便陷入"),t("code",[e._v("actionPerformed()")]),e._v("中，所以程序不能再对其他任何事件进行控制（如果想出来，必须以某种方式“杀死”进程——最简便的方式就是在控制台窗口按"),t("code",[e._v("Ctrl+C")]),e._v("键）。")]),e._v(" "),t("p",[e._v("这里最基本的问题是"),t("code",[e._v("go()")]),e._v("需要继续执行自己的操作，而与此同时，它也需要返回，以便"),t("code",[e._v("actionPerformed()")]),e._v("能够完成，而且用户界面也能继续响应用户的操作。但对象"),t("code",[e._v("go()")]),e._v("这样的传统方法来说，它却不能在继续的同时将控制权返回给程序的其他部分。这听起来似乎是一件不可能做到的事情，就象CPU必须同时位于两个地方一样，但线程可以解决一切。“线程模型”（以及Java中的编程支持）是一种程序编写规范，可在单独一个程序里实现几个操作的同时进行。根据这一机制，CPU可为每个线程都分配自己的一部分时间。每个线程都“感觉”自己好象拥有整个CPU，但CPU的计算时间实际却是在所有线程间分摊的。")]),e._v(" "),t("p",[e._v("线程机制多少降低了一些计算效率，但无论程序的设计，资源的均衡，还是用户操作的方便性，都从中获得了巨大的利益。综合考虑，这一机制是非常有价值的。当然，如果本来就安装了多块CPU，那么操作系统能够自行决定为不同的CPU分配哪些线程，程序的总体运行速度也会变得更快（所有这些都要求操作系统以及应用程序的支持）。多线程和多任务是充分发挥多处理机系统能力的一种最有效的方式。")]),e._v(" "),t("h2",{attrs:{id:"_14-1-1-从线程继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-1-从线程继承"}},[e._v("#")]),e._v(" 14.1.1 从线程继承")]),e._v(" "),t("p",[e._v("为创建一个线程，最简单的方法就是从"),t("code",[e._v("Thread")]),e._v("类继承。这个类包含了创建和运行线程所需的一切东西。"),t("code",[e._v("Thread")]),e._v("最重要的方法是"),t("code",[e._v("run()")]),e._v("。但为了使用"),t("code",[e._v("run()")]),e._v("，必须对其进行重载或者覆盖，使其能充分按自己的吩咐行事。因此，"),t("code",[e._v("run()")]),e._v("属于那些会与程序中的其他线程“并发”或“同时”执行的代码。")]),e._v(" "),t("p",[e._v("下面这个例子可创建任意数量的线程，并通过为每个线程分配一个独一无二的编号（由一个静态变量产生），从而对不同的线程进行跟踪。"),t("code",[e._v("Thread")]),e._v("的"),t("code",[e._v("run()")]),e._v("方法在这里得到了覆盖，每通过一次循环，计数就减1——计数为0时则完成循环（此时一旦返回run()，线程就中止运行）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: SimpleThread.java\n// Very simple Threading example\n\npublic class SimpleThread extends Thread {\n  private int countDown = 5;\n  private int threadNumber;\n  private static int threadCount = 0;\n  public SimpleThread() {\n    threadNumber = ++threadCount;\n    System.out.println("Making " + threadNumber);\n  }\n  public void run() {\n    while(true) {\n      System.out.println("Thread " +\n        threadNumber + "(" + countDown + ")");\n      if(--countDown == 0) return;\n    }\n  }\n  public static void main(String[] args) {\n    for(int i = 0; i < 5; i++)\n      new SimpleThread().start();\n    System.out.println("All Threads Started");\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("run()")]),e._v("方法几乎肯定含有某种形式的循环——它们会一直持续到线程不再需要为止。因此，我们必须规定特定的条件，以便中断并退出这个循环（或者在上述的例子中，简单地从"),t("code",[e._v("run()")]),e._v("返回即可）。"),t("code",[e._v("run()")]),e._v("通常采用一种无限循环的形式。也就是说，通过阻止外部发出对线程的"),t("code",[e._v("stop()")]),e._v("或者"),t("code",[e._v("destroy()")]),e._v("调用，它会永远运行下去（直到程序完成）。")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("main()")]),e._v("中，可看到创建并运行了大量线程。"),t("code",[e._v("Thread")]),e._v("包含了一个特殊的方法，叫作"),t("code",[e._v("start()")]),e._v("，它的作用是对线程进行特殊的初始化，然后调用"),t("code",[e._v("run()")]),e._v("。所以整个步骤包括：调用构造器来构建对象，然后用"),t("code",[e._v("start()")]),e._v("配置线程，再调用"),t("code",[e._v("run()")]),e._v("。如果不调用"),t("code",[e._v("start()")]),e._v("——如果适当的话，可在构造器那样做——线程便永远不会启动。")]),e._v(" "),t("p",[e._v("下面是该程序某一次运行的输出（注意每次运行都会不同）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Making 1\nMaking 2\nMaking 3\nMaking 4\nMaking 5\nThread 1(5)\nThread 1(4)\nThread 1(3)\nThread 1(2)\nThread 2(5)\nThread 2(4)\nThread 2(3)\nThread 2(2)\nThread 2(1)\nThread 1(1)\nAll Threads Started\nThread 3(5)\nThread 4(5)\nThread 4(4)\nThread 4(3)\nThread 4(2)\nThread 4(1)\nThread 5(5)\nThread 5(4)\nThread 5(3)\nThread 5(2)\nThread 5(1)\nThread 3(4)\nThread 3(3)\nThread 3(2)\nThread 3(1)\n")])])]),t("p",[e._v("可注意到这个例子中到处都调用了"),t("code",[e._v("sleep()")]),e._v("，然而输出结果指出每个线程都获得了属于自己的那一部分CPU执行时间。从中可以看出，尽管"),t("code",[e._v("sleep()")]),e._v("依赖一个线程的存在来执行，但却与允许或禁止线程无关。它只不过是另一个不同的方法而已。")]),e._v(" "),t("p",[e._v("亦可看出线程并不是按它们创建时的顺序运行的。事实上，CPU处理一个现有线程集的顺序是不确定的——除非我们亲自介入，并用"),t("code",[e._v("Thread")]),e._v("的"),t("code",[e._v("setPriority()")]),e._v("方法调整它们的优先级。")]),e._v(" "),t("p",[t("code",[e._v("main()")]),e._v("创建"),t("code",[e._v("Thread")]),e._v("对象时，它并未捕获任何一个对象的引用。普通对象对于垃圾收集来说是一种“公平竞赛”，但线程却并非如此。每个线程都会“注册”自己，所以某处实际存在着对它的一个引用。这样一来，垃圾收集器便只好对它“瞠目以对”了。")]),e._v(" "),t("h2",{attrs:{id:"_14-1-2-针对用户界面的多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-2-针对用户界面的多线程"}},[e._v("#")]),e._v(" 14.1.2 针对用户界面的多线程")]),e._v(" "),t("p",[e._v("现在，我们也许能用一个线程解决在"),t("code",[e._v("Counter1.java")]),e._v("中出现的问题。采用的一个技巧便是在一个线程的"),t("code",[e._v("run()")]),e._v("方法中放置“子任务”——亦即位于"),t("code",[e._v("go()")]),e._v("内的循环。一旦用户按下"),t("code",[e._v("Start")]),e._v("按钮，线程就会启动，但马上结束线程的创建。这样一来，尽管线程仍在运行，但程序的主要工作却能得以继续（等候并响应用户界面的事件）。下面是具体的代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Counter2.java\n// A responsive user interface with threads\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\nclass SeparateSubTask extends Thread {\n  private int count = 0;\n  private Counter2 c2;\n  private boolean runFlag = true;\n  public SeparateSubTask(Counter2 c2) {\n    this.c2 = c2;\n    start();\n  }\n  public void invertFlag() { runFlag = !runFlag;}\n  public void run() {\n    while (true) {\n     try {\n      sleep(100);\n     } catch (InterruptedException e){}\n     if(runFlag)\n       c2.t.setText(Integer.toString(count++));\n    }\n  }\n}\n\npublic class Counter2 extends Applet {\n  TextField t = new TextField(10);\n  private SeparateSubTask sp = null;\n  private Button\n    onOff = new Button("Toggle"),\n    start = new Button("Start");\n  public void init() {\n    add(t);\n    start.addActionListener(new StartL());\n    add(start);\n    onOff.addActionListener(new OnOffL());\n    add(onOff);\n  }\n  class StartL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(sp == null)\n        sp = new SeparateSubTask(Counter2.this);\n    }\n  }\n  class OnOffL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(sp != null)\n        sp.invertFlag();\n    }\n  }\n  public static void main(String[] args) {\n    Counter2 applet = new Counter2();\n    Frame aFrame = new Frame("Counter2");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("现在，"),t("code",[e._v("Counter2")]),e._v("变成了一个相当直接的程序，它的唯一任务就是设置并管理用户界面。但假若用户现在按下"),t("code",[e._v("Start")]),e._v("按钮，却不会真正调用一个方法。此时不是创建类的一个线程，而是创建"),t("code",[e._v("SeparateSubTask")]),e._v("，然后继续"),t("code",[e._v("Counter2")]),e._v("事件循环。注意此时会保存"),t("code",[e._v("SeparateSubTask")]),e._v("的引用，以便我们按下"),t("code",[e._v("onOff")]),e._v("按钮的时候，能正常地切换位于"),t("code",[e._v("SeparateSubTask")]),e._v("内部的"),t("code",[e._v("runFlag")]),e._v("（运行标志）。随后那个线程便可启动（当它看到标志的时候），然后将自己中止（亦可将"),t("code",[e._v("SeparateSubTask")]),e._v("设为一个内部类来达到这一目的）。")]),e._v(" "),t("p",[t("code",[e._v("SeparateSubTask")]),e._v("类是对"),t("code",[e._v("Thread")]),e._v("的一个简单扩展，它带有一个构造器（其中保存了"),t("code",[e._v("Counter2")]),e._v("引用，然后通过调用"),t("code",[e._v("start()")]),e._v("来运行线程）以及一个"),t("code",[e._v("run()")]),e._v("——本质上包含了"),t("code",[e._v("Counter1.java")]),e._v("的"),t("code",[e._v("go()")]),e._v("内的代码。由于"),t("code",[e._v("SeparateSubTask")]),e._v("知道自己容纳了指向一个"),t("code",[e._v("Counter2")]),e._v("的引用，所以能够在需要的时候介入，并访问"),t("code",[e._v("Counter2")]),e._v("的"),t("code",[e._v("TestField")]),e._v("（文本字段）。")]),e._v(" "),t("p",[e._v("按下"),t("code",[e._v("onOff")]),e._v("按钮，几乎立即能得到正确的响应。当然，这个响应其实并不是“立即”发生的，它毕竟和那种由“中断”驱动的系统不同。只有线程拥有CPU的执行时间，并注意到标记已发生改变，计数器才会停止。")]),e._v(" "),t("p",[e._v("(1) 用内部类改善代码")]),e._v(" "),t("p",[e._v("下面说说题外话，请大家注意一下"),t("code",[e._v("SeparateSubTask")]),e._v("和"),t("code",[e._v("Counter2")]),e._v("类之间发生的结合行为。"),t("code",[e._v("SeparateSubTask")]),e._v("同"),t("code",[e._v("Counter2")]),e._v("“亲密”地结合到了一起——它必须持有指向自己“父”"),t("code",[e._v("Counter2")]),e._v("对象的一个引用，以便自己能回调和操纵它。但两个类并不是真的合并为单独一个类（尽管在下一节中，我们会讲到Java确实提供了合并它们的方法），因为它们各自做的是不同的事情，而且是在不同的时间创建的。但不管怎样，它们依然紧密地结合到一起（更准确地说，应该叫“联合”），所以使程序代码多少显得有些笨拙。在这种情况下，一个内部类可以显著改善代码的“可读性”和执行效率：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Counter2i.java\n// Counter2 using an inner class for the thread\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class Counter2i extends Applet {\n  private class SeparateSubTask extends Thread {\n    int count = 0;\n    boolean runFlag = true;\n    SeparateSubTask() { start(); }\n    public void run() {\n      while (true) {\n       try {\n        sleep(100);\n       } catch (InterruptedException e){}\n       if(runFlag)\n         t.setText(Integer.toString(count++));\n      }\n    }\n  }\n  private SeparateSubTask sp = null;\n  private TextField t = new TextField(10);\n  private Button\n    onOff = new Button("Toggle"),\n    start = new Button("Start");\n  public void init() {\n    add(t);\n    start.addActionListener(new StartL());\n    add(start);\n    onOff.addActionListener(new OnOffL());\n    add(onOff);\n  }\n  class StartL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(sp == null)\n        sp = new SeparateSubTask();\n    }\n  }\n  class OnOffL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(sp != null)\n        sp.runFlag = !sp.runFlag; // invertFlag();\n    }\n  }\n  public static void main(String[] args) {\n    Counter2i applet = new Counter2i();\n    Frame aFrame = new Frame("Counter2i");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("这个"),t("code",[e._v("SeparateSubTask")]),e._v("名字不会与前例中的"),t("code",[e._v("SeparateSubTask")]),e._v("冲突——即使它们都在相同的目录里——因为它已作为一个内部类隐藏起来。大家亦可看到内部类被设为"),t("code",[e._v("private")]),e._v("（私有）属性，这意味着它的字段和方法都可获得默认的访问权限（"),t("code",[e._v("run()")]),e._v("除外，它必须设为"),t("code",[e._v("public")]),e._v("，因为它在基类中是公开的）。除"),t("code",[e._v("Counter2i")]),e._v("之外，其他任何方面都不可访问"),t("code",[e._v("private")]),e._v("内部类。而且由于两个类紧密结合在一起，所以很容易放宽它们之间的访问限制。在"),t("code",[e._v("SeparateSubTask")]),e._v("中，我们可看到"),t("code",[e._v("invertFlag()")]),e._v("方法已被删去，因为"),t("code",[e._v("Counter2i")]),e._v("现在可以直接访问"),t("code",[e._v("runFlag")]),e._v("。")]),e._v(" "),t("p",[e._v("此外，注意"),t("code",[e._v("SeparateSubTask")]),e._v("的构造器已得到了简化——它现在唯一的用外就是启动线程。"),t("code",[e._v("Counter2i")]),e._v("对象的引用仍象以前那样得以捕获，但不再是通过人工传递和引用外部对象来达到这一目的，此时的内部类机制可以自动照料它。在"),t("code",[e._v("run()")]),e._v("中，可看到对"),t("code",[e._v("t")]),e._v("的访问是直接进行的，似乎它是"),t("code",[e._v("SeparateSubTask")]),e._v("的一个字段。父类中的t字段现在可以变成"),t("code",[e._v("private")]),e._v("，因为"),t("code",[e._v("SeparateSubTask")]),e._v("能在未获任何特殊许可的前提下自由地访问它——而且无论如何都该尽可能地把字段变成“私有”属性，以防来自类外的某种力量不慎地改变它们。")]),e._v(" "),t("p",[e._v("无论在什么时候，只要注意到类相互之间结合得比较紧密，就可考虑利用内部类来改善代码的编写与维护。")]),e._v(" "),t("h2",{attrs:{id:"_14-1-3-用主类合并线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-3-用主类合并线程"}},[e._v("#")]),e._v(" 14.1.3 用主类合并线程")]),e._v(" "),t("p",[e._v("在上面的例子中，我们看到线程类（"),t("code",[e._v("Thread")]),e._v("）与程序的主类（"),t("code",[e._v("Main")]),e._v("）是分隔开的。这样做非常合理，而且易于理解。然而，还有另一种方式也是经常要用到的。尽管它不十分明确，但一般都要更简洁一些（这也解释了它为什么十分流行）。通过将主程序类变成一个线程，这种形式可将主程序类与线程类合并到一起。由于对一个GUI程序来说，主程序类必须从"),t("code",[e._v("Frame")]),e._v("或"),t("code",[e._v("Applet")]),e._v("继承，所以必须用一个接口加入额外的功能。这个接口叫作"),t("code",[e._v("Runnable")]),e._v("，其中包含了与"),t("code",[e._v("Thread")]),e._v("一致的基本方法。事实上，"),t("code",[e._v("Thread")]),e._v("也实现了"),t("code",[e._v("Runnable")]),e._v("，它只指出有一个"),t("code",[e._v("run()")]),e._v("方法。")]),e._v(" "),t("p",[e._v("对合并后的程序／线程来说，它的用法不是十分明确。当我们启动程序时，会创建一个"),t("code",[e._v("Runnable")]),e._v("（可运行的）对象，但不会自行启动线程。线程的启动必须明确进行。下面这个程序向我们演示了这一点，它再现了"),t("code",[e._v("Counter2")]),e._v("的功能：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Counter3.java\n// Using the Runnable interface to turn the\n// main class into a thread.\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\npublic class Counter3\n    extends Applet implements Runnable {\n  private int count = 0;\n  private boolean runFlag = true;\n  private Thread selfThread = null;\n  private Button\n    onOff = new Button("Toggle"),\n    start = new Button("Start");\n  private TextField t = new TextField(10);\n  public void init() {\n    add(t);\n    start.addActionListener(new StartL());\n    add(start);\n    onOff.addActionListener(new OnOffL());\n    add(onOff);\n  }\n  public void run() {\n    while (true) {\n      try {\n        selfThread.sleep(100);\n      } catch (InterruptedException e){}\n      if(runFlag)\n        t.setText(Integer.toString(count++));\n    }\n  }\n  class StartL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(selfThread == null) {\n        selfThread = new Thread(Counter3.this);\n        selfThread.start();\n      }\n    }\n  }\n  class OnOffL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      runFlag = !runFlag;\n    }\n  }\n  public static void main(String[] args) {\n    Counter3 applet = new Counter3();\n    Frame aFrame = new Frame("Counter3");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(300,200);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[e._v("现在"),t("code",[e._v("run()")]),e._v("位于类内，但它在"),t("code",[e._v("init()")]),e._v("结束以后仍处在“睡眠”状态。若按下启动按钮，线程便会用多少有些暧昧的表达方式创建（若线程尚不存在）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Thread(Counter3.this);\n")])])]),t("p",[e._v("若某样东西有一个"),t("code",[e._v("Runnable")]),e._v("接口，实际只是意味着它有一个"),t("code",[e._v("run()")]),e._v("方法，但不存在与之相关的任何特殊东西——它不具有任何天生的线程处理能力，这与那些从"),t("code",[e._v("Thread")]),e._v("继承的类是不同的。所以为了从一个"),t("code",[e._v("Runnable")]),e._v("对象产生线程，必须单独创建一个线程，并为其传递"),t("code",[e._v("Runnable")]),e._v("对象；可为其使用一个特殊的构造器，并令其采用一个"),t("code",[e._v("Runnable")]),e._v("作为自己的参数使用。随后便可为那个线程调用"),t("code",[e._v("start()")]),e._v("，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("selfThread.start();\n")])])]),t("p",[e._v("它的作用是执行常规初始化操作，然后调用"),t("code",[e._v("run()")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("Runnable")]),e._v("接口最大的一个优点是所有东西都从属于相同的类。若需访问什么东西，只需简单地访问它即可，不需要涉及一个独立的对象。但为这种便利也是要付出代价的——只可为那个特定的对象运行单独一个线程（尽管可创建那种类型的多个对象，或者在不同的类里创建其他对象）。")]),e._v(" "),t("p",[e._v("注意"),t("code",[e._v("Runnable")]),e._v("接口本身并不是造成这一限制的罪魁祸首。它是由于"),t("code",[e._v("Runnable")]),e._v("与我们的主类合并造成的，因为每个应用只能主类的一个对象。")]),e._v(" "),t("h2",{attrs:{id:"_14-1-4-制作多个线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-4-制作多个线程"}},[e._v("#")]),e._v(" 14.1.4 制作多个线程")]),e._v(" "),t("p",[e._v("现在考虑一下创建多个不同的线程的问题。我们不可用前面的例子来做到这一点，所以必须倒退回去，利用从"),t("code",[e._v("Thread")]),e._v("继承的多个独立类来封装"),t("code",[e._v("run()")]),e._v("。但这是一种更常规的方案，而且更易理解，所以尽管前例揭示了我们经常都能看到的编码样式，但并不推荐在大多数情况下都那样做，因为它只是稍微复杂一些，而且灵活性稍低一些。")]),e._v(" "),t("p",[e._v("下面这个例子用计数器和切换按钮再现了前面的编码样式。但这一次，一个特定计数器的所有信息（按钮和文本字段）都位于它自己的、从"),t("code",[e._v("Thread")]),e._v("继承的对象内。"),t("code",[e._v("Ticker")]),e._v("中的所有字段都具有"),t("code",[e._v("private")]),e._v("（私有）属性，这意味着"),t("code",[e._v("Ticker")]),e._v("的具体实现方案可根据实际情况任意修改，其中包括修改用于获取和显示信息的数据组件的数量及类型。创建好一个"),t("code",[e._v("Ticker")]),e._v("对象以后，构造器便请求一个AWT容器（"),t("code",[e._v("Container")]),e._v("）的引用——"),t("code",[e._v("Ticker")]),e._v("用自己的可视组件填充那个容器。采用这种方式，以后一旦改变了可视组件，使用"),t("code",[e._v("Ticker")]),e._v("的代码便不需要另行修改一道。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Counter4.java\n// If you separate your thread from the main\n// class, you can have as many threads as you\n// want.\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n\nclass Ticker extends Thread {\n  private Button b = new Button("Toggle");\n  private TextField t = new TextField(10);\n  private int count = 0;\n  private boolean runFlag = true;\n  public Ticker(Container c) {\n    b.addActionListener(new ToggleL());\n    Panel p = new Panel();\n    p.add(t);\n    p.add(b);\n    c.add(p);\n  }\n  class ToggleL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      runFlag = !runFlag;\n    }\n  }\n  public void run() {\n    while (true) {\n      if(runFlag)\n        t.setText(Integer.toString(count++));\n       try {\n        sleep(100);\n      } catch (InterruptedException e){}\n    }\n  }\n}\n\npublic class Counter4 extends Applet {\n  private Button start = new Button("Start");\n  private boolean started = false;\n  private Ticker[] s;\n  private boolean isApplet = true;\n  private int size;\n  public void init() {\n    // Get parameter "size" from Web page:\n    if(isApplet)\n      size =\n        Integer.parseInt(getParameter("size"));\n    s = new Ticker[size];\n    for(int i = 0; i < s.length; i++)\n      s[i] = new Ticker(this);\n    start.addActionListener(new StartL());\n    add(start);\n  }\n  class StartL implements ActionListener {\n    public void actionPerformed(ActionEvent e) {\n      if(!started) {\n        started = true;\n        for(int i = 0; i < s.length; i++)\n          s[i].start();\n      }\n    }\n  }\n  public static void main(String[] args) {\n    Counter4 applet = new Counter4();\n    // This isn\'t an applet, so set the flag and\n    // produce the parameter values from args:\n    applet.isApplet = false;\n    applet.size =\n      (args.length == 0 ? 5 :\n        Integer.parseInt(args[0]));\n    Frame aFrame = new Frame("Counter4");\n    aFrame.addWindowListener(\n      new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          System.exit(0);\n        }\n      });\n    aFrame.add(applet, BorderLayout.CENTER);\n    aFrame.setSize(200, applet.size * 50);\n    applet.init();\n    applet.start();\n    aFrame.setVisible(true);\n  }\n} ///:~\n')])])]),t("p",[t("code",[e._v("Ticker")]),e._v("不仅包括了自己的线程处理机制，也提供了控制与显示线程的工具。可按自己的意愿创建任意数量的线程，毋需明确地创建窗口化组件。")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("Counter4")]),e._v("中，有一个名为"),t("code",[e._v("s")]),e._v("的"),t("code",[e._v("Ticker")]),e._v("对象的数组。为获得最大的灵活性，这个数组的长度是用程序片参数接触Web页而初始化的。下面是网页中长度参数大致的样子，它们嵌于对程序片（applet）的描述内容中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<applet code=Counter4 width=600 height=600>\n<param name=size value="20">\n</applet>\n')])])]),t("p",[e._v("其中，"),t("code",[e._v("param")]),e._v("，"),t("code",[e._v("name")]),e._v("和"),t("code",[e._v("value")]),e._v("是所有Web页都适用的关键字。"),t("code",[e._v("name")]),e._v("是指程序中对参数的一种引用称谓，"),t("code",[e._v("value")]),e._v("可以是任何字符串（并不仅仅是解析成一个数字的东西）。")]),e._v(" "),t("p",[e._v("我们注意到对数组"),t("code",[e._v("s")]),e._v("长度的判断是在"),t("code",[e._v("init()")]),e._v("内部完成的，它没有作为"),t("code",[e._v("s")]),e._v("的内嵌定义的一部分提供。换言之，不可将下述代码作为类定义的一部分使用（应该位于任何方法的外部）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('inst size = Integer.parseInt(getParameter("Size"));\nTicker[] s = new Ticker[size]\n')])])]),t("p",[e._v("可把它编译出来，但会在运行期得到一个空指针异常。但若将"),t("code",[e._v("getParameter()")]),e._v("初始化移入"),t("code",[e._v("init()")]),e._v("，则可正常工作。程序片框架会进行必要的启动工作，以便在进入"),t("code",[e._v("init()")]),e._v("前收集好一些参数。")]),e._v(" "),t("p",[e._v("此外，上述代码被同时设置成一个程序片和一个应用（程序）。在它是应用程序的情况下，"),t("code",[e._v("size")]),e._v("参数可从命令行里提取出来（否则就提供一个默认的值）。")]),e._v(" "),t("p",[e._v("数组的长度建好以后，就可以创建新的"),t("code",[e._v("Ticker")]),e._v("对象；作为"),t("code",[e._v("Ticker")]),e._v("构造器的一部分，用于每个"),t("code",[e._v("Ticker")]),e._v("的按钮和文本字段就会加入程序片。")]),e._v(" "),t("p",[e._v("按下"),t("code",[e._v("Start")]),e._v("按钮后，会在整个"),t("code",[e._v("Ticker")]),e._v("数组里遍历，并为每个"),t("code",[e._v("Ticker")]),e._v("调用"),t("code",[e._v("start()")]),e._v("。记住，"),t("code",[e._v("start()")]),e._v("会进行必要的线程初始化工作，然后为那个线程调用"),t("code",[e._v("run()")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("ToggleL")]),e._v("监视器只是简单地切换"),t("code",[e._v("Ticker")]),e._v("中的标记，一旦对应线程以后需要修改这个标记，它会作出相应的反应。")]),e._v(" "),t("p",[e._v("这个例子的一个好处是它使我们能够方便地创建由单独子任务构成的大型集合，并以监视它们的行为。在这种情况下，我们会发现随着子任务数量的增多，机器显示出来的数字可能会出现更大的分歧，这是由于为线程提供服务的方式造成的。")]),e._v(" "),t("p",[e._v("亦可试着体验一下"),t("code",[e._v("sleep(100)")]),e._v("在"),t("code",[e._v("Ticker.run()")]),e._v("中的重要作用。若删除"),t("code",[e._v("sleep()")]),e._v("，那么在按下一个切换按钮前，情况仍然会进展良好。按下按钮以后，那个特定的线程就会出现一个失败的"),t("code",[e._v("runFlag")]),e._v("，而且"),t("code",[e._v("run()")]),e._v("会深深地陷入一个无限循环——很难在多任务处理期间中止退出。因此，程序对用户操作的反应灵敏度会大幅度降低。")]),e._v(" "),t("h2",{attrs:{id:"_14-1-5-daemon线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-5-daemon线程"}},[e._v("#")]),e._v(" 14.1.5 Daemon线程")]),e._v(" "),t("p",[e._v("“Daemon”线程的作用是在程序的运行期间于后台提供一种“常规”服务，但它并不属于程序的一个基本部分。因此，一旦所有非Daemon线程完成，程序也会中止运行。相反，假若有任何非Daemon线程仍在运行（比如还有一个正在运行"),t("code",[e._v("main()")]),e._v("的线程），则程序的运行不会中止。")]),e._v(" "),t("p",[e._v("通过调用"),t("code",[e._v("isDaemon()")]),e._v("，可调查一个线程是不是一个Daemon，而且能用"),t("code",[e._v("setDaemon()")]),e._v("打开或者关闭一个线程的Daemon状态。如果是一个Daemon线程，那么它创建的任何线程也会自动具备Daemon属性。")]),e._v(" "),t("p",[e._v("下面这个例子演示了Daemon线程的用法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Daemons.java\n// Daemonic behavior\nimport java.io.*;\n\nclass Daemon extends Thread {\n  private static final int SIZE = 10;\n  private Thread[] t = new Thread[SIZE];\n  public Daemon() {\n    setDaemon(true);\n    start();\n  }\n  public void run() {\n    for(int i = 0; i < SIZE; i++)\n      t[i] = new DaemonSpawn(i);\n    for(int i = 0; i < SIZE; i++)\n      System.out.println(\n        "t[" + i + "].isDaemon() = "\n        + t[i].isDaemon());\n    while(true)\n      yield();\n  }\n}\n\nclass DaemonSpawn extends Thread {\n  public DaemonSpawn(int i) {\n    System.out.println(\n      "DaemonSpawn " + i + " started");\n    start();\n  }\n  public void run() {\n    while(true)\n      yield();\n  }\n}\n\npublic class Daemons {\n  public static void main(String[] args) {\n    Thread d = new Daemon();\n    System.out.println(\n      "d.isDaemon() = " + d.isDaemon());\n    // Allow the daemon threads to finish\n    // their startup processes:\n    BufferedReader stdin =\n      new BufferedReader(\n        new InputStreamReader(System.in));\n    System.out.println("Waiting for CR");\n    try {\n      stdin.readLine();\n    } catch(IOException e) {}\n  }\n} ///:~\n')])])]),t("p",[e._v("Daemon线程可将自己的Daemon标记设置成“真”，然后产生一系列其他线程，而且认为它们也具有Daemon属性。随后，它进入一个无限循环，在其中调用"),t("code",[e._v("yield()")]),e._v("，放弃对其他进程的控制。在这个程序早期的一个版本中，无限循环会使"),t("code",[e._v("int")]),e._v("计数器自增，但会使整个程序都好象陷入停顿状态。换用"),t("code",[e._v("yield()")]),e._v("后，却可使程序充满“活力”，不会使人产生停滞或反应迟钝的感觉。")]),e._v(" "),t("p",[e._v("一旦"),t("code",[e._v("main()")]),e._v("完成自己的工作，便没有什么能阻止程序中断运行，因为这里运行的只有Daemon线程。所以能看到启动所有Daemon线程后显示出来的结果，"),t("code",[e._v("System.in")]),e._v("也进行了相应的设置，使程序中断前能等待一个回车。如果不进行这样的设置，就只能看到创建Daemon线程的一部分结果（试试将"),t("code",[e._v("readLine()")]),e._v("代码换成不同长度的"),t("code",[e._v("sleep()")]),e._v("调用，看看会有什么表现）。")])])}),[],!1,null,null,null);n.default=r.exports}}]);