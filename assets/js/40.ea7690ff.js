(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{438:function(t,a,e){"use strict";e.r(a);var s=e(56),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"第11章-运行期类型识别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第11章-运行期类型识别"}},[t._v("#")]),t._v(" 第11章 运行期类型识别")]),t._v(" "),e("p",[t._v("运行期类型识别（RTTI）的概念初看非常简单——手上只有基类型的一个引用时，利用它判断一个对象的正确类型。")]),t._v(" "),e("p",[t._v("然而，对RTTI的需要暴露出了面向对象设计许多有趣（而且经常是令人困惑的）的问题，并把程序的构造问题正式摆上了桌面。")]),t._v(" "),e("p",[t._v("本章将讨论如何利用Java在运行期间查找对象和类信息。这主要采取两种形式：一种是“传统”RTTI，它假定我们已在编译和运行期拥有所有类型；另一种是Java1.1特有的“反射”机制，利用它可在运行期独立查找类信息。首先讨论“传统”的RTTI，再讨论反射问题。")])])}),[],!1,null,null,null);a.default=n.exports}}]);