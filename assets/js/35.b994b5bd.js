(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{433:function(e,n,t){"use strict";t.r(n);var a=t(56),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_11-1-对rtti的需要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-对rtti的需要"}},[e._v("#")]),e._v(" 11.1 对RTTI的需要")]),e._v(" "),t("p",[e._v("请考虑下面这个熟悉的类结构例子，它利用了多态性。常规类型是"),t("code",[e._v("Shape")]),e._v("类，而特别派生出来的类型是"),t("code",[e._v("Circle")]),e._v("，"),t("code",[e._v("Square")]),e._v("和"),t("code",[e._v("Triangle")]),e._v("。")]),e._v(" "),t("p",[t("img",{attrs:{src:"11-1.gif",alt:""}})]),e._v(" "),t("p",[e._v("这是一个典型的类结构示意图，基类位于顶部，派生类向下延展。面向对象编程的基本目标是用大量代码控制基类型（这里是"),t("code",[e._v("Shape")]),e._v("）的引用，所以假如决定添加一个新类（比如"),t("code",[e._v("Rhomboid")]),e._v("，从"),t("code",[e._v("Shape")]),e._v("派生），从而对程序进行扩展，那么不会影响到原来的代码。在这个例子中，"),t("code",[e._v("Shape")]),e._v("接口中的动态绑定方法是"),t("code",[e._v("draw()")]),e._v("，所以客户程序员要做的是通过一个普通"),t("code",[e._v("Shape")]),e._v("引用调用"),t("code",[e._v("draw()")]),e._v("。"),t("code",[e._v("draw()")]),e._v("在所有派生类里都会被覆盖。而且由于它是一个动态绑定方法，所以即使通过一个普通的"),t("code",[e._v("Shape")]),e._v("引用调用它，也有表现出正确的行为。这正是多态性的作用。")]),e._v(" "),t("p",[e._v("所以，我们一般创建一个特定的对象（"),t("code",[e._v("Circle")]),e._v("，"),t("code",[e._v("Square")]),e._v("，或者"),t("code",[e._v("Triangle")]),e._v("），把它向上转换到一个"),t("code",[e._v("Shape")]),e._v("（忽略对象的特殊类型），以后便在程序的剩余部分使用匿名"),t("code",[e._v("Shape")]),e._v("引用。")]),e._v(" "),t("p",[e._v("作为对多态性和向上转换的一个简要回顾，可以象下面这样为上述例子编码（若执行这个程序时出现困难，请参考第3章3.1.2小节“赋值”）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: Shapes.java\npackage c11;\nimport java.util.*;\n\ninterface Shape {\n  void draw();\n}\n\nclass Circle implements Shape {\n  public void draw() {\n    System.out.println("Circle.draw()");\n  }\n}\n\nclass Square implements Shape {\n  public void draw() {\n    System.out.println("Square.draw()");\n  }\n}\n\nclass Triangle implements Shape {\n  public void draw() {\n    System.out.println("Triangle.draw()");\n  }\n}\n\npublic class Shapes {\n  public static void main(String[] args) {\n    Vector s = new Vector();\n    s.addElement(new Circle());\n    s.addElement(new Square());\n    s.addElement(new Triangle());\n    Enumeration e = s.elements();\n    while(e.hasMoreElements())\n      ((Shape)e.nextElement()).draw();\n  }\n} ///:~\n')])])]),t("p",[e._v("基类可编码成一个"),t("code",[e._v("interface")]),e._v("（接口）、一个"),t("code",[e._v("abstract")]),e._v("（抽象）类或者一个普通类。由于"),t("code",[e._v("Shape")]),e._v("没有真正的成员（亦即有定义的成员），而且并不在意我们创建了一个纯粹的"),t("code",[e._v("Shape")]),e._v("对象，所以最适合和最灵活的表达方式便是用一个接口。而且由于不必设置所有那些"),t("code",[e._v("abstract")]),e._v("关键字，所以整个代码也显得更为清爽。")]),e._v(" "),t("p",[e._v("每个派生类都覆盖了基类"),t("code",[e._v("draw")]),e._v("方法，所以具有不同的行为。在"),t("code",[e._v("main()")]),e._v("中创建了特定类型的"),t("code",[e._v("Shape")]),e._v("，然后将其添加到一个"),t("code",[e._v("Vector")]),e._v("。这里正是向上转换发生的地方，因为"),t("code",[e._v("Vector")]),e._v("只容纳了对象。由于Java中的所有东西（除基本数据类型外）都是对象，所以"),t("code",[e._v("Vector")]),e._v("也能容纳"),t("code",[e._v("Shape")]),e._v("对象。但在向上转换至"),t("code",[e._v("Object")]),e._v("的过程中，任何特殊的信息都会丢失，其中甚至包括对象是几何形状这一事实。对"),t("code",[e._v("Vector")]),e._v("来说，它们只是"),t("code",[e._v("Object")]),e._v("。")]),e._v(" "),t("p",[e._v("用"),t("code",[e._v("nextElement()")]),e._v("将一个元素从"),t("code",[e._v("Vector")]),e._v("提取出来的时候，情况变得稍微有些复杂。由于"),t("code",[e._v("Vector")]),e._v("只容纳"),t("code",[e._v("Object")]),e._v("，所以"),t("code",[e._v("nextElement()")]),e._v("会自然地产生一个"),t("code",[e._v("Object")]),e._v("引用。但我们知道它实际是个"),t("code",[e._v("Shape")]),e._v("引用，而且希望将"),t("code",[e._v("Shape")]),e._v("消息发给那个对象。所以需要用传统的"),t("code",[e._v("(Shape)")]),e._v("方式转换成一个"),t("code",[e._v("Shape")]),e._v("。这是RTTI最基本的形式，因为在Java中，所有转换都会在运行期间得到检查，以确保其正确性。那正是RTTI的意义所在：在运行期，对象的类型会得到识别。")]),e._v(" "),t("p",[e._v("在目前这种情况下，RTTI转换只实现了一部分："),t("code",[e._v("Object")]),e._v("转换成"),t("code",[e._v("Shape")]),e._v("，而不是转换成"),t("code",[e._v("Circle")]),e._v("，"),t("code",[e._v("Square")]),e._v("或者"),t("code",[e._v("Triangle")]),e._v("。那是由于我们目前能够肯定的唯一事实就是"),t("code",[e._v("Vector")]),e._v("里充斥着几何形状，而不知它们的具体类别。在编译期间，我们肯定的依据是我们自己的规则；而在编译期间，却是通过转换来肯定这一点。")]),e._v(" "),t("p",[e._v("现在的局面会由多态性控制，而且会为"),t("code",[e._v("Shape")]),e._v("调用适当的方法，以便判断引用到底是提供"),t("code",[e._v("Circle")]),e._v("，"),t("code",[e._v("Square")]),e._v("，还是提供给"),t("code",[e._v("Triangle")]),e._v("。而且在一般情况下，必须保证采用多态性方案。因为我们希望自己的代码尽可能少知道一些与对象的具体类型有关的情况，只将注意力放在某一类对象（这里是"),t("code",[e._v("Shape")]),e._v("）的常规信息上。只有这样，我们的代码才更易实现、理解以及修改。所以说多态性是面向对象程序设计的一个常规目标。")]),e._v(" "),t("p",[e._v("然而，若碰到一个特殊的程序设计问题，只有在知道常规引用的确切类型后，才能最容易地解决这个问题，这个时候又该怎么办呢？举个例子来说，我们有时候想让自己的用户将某一具体类型的几何形状（如三角形）全都变成紫色，以便突出显示它们，并快速找出这一类型的所有形状。此时便要用到RTTI技术，用它查询某个"),t("code",[e._v("Shape")]),e._v("引用引用的准确类型是什么。")]),e._v(" "),t("h2",{attrs:{id:"_11-1-1-class对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-1-class对象"}},[e._v("#")]),e._v(" 11.1.1 "),t("code",[e._v("Class")]),e._v("对象")]),e._v(" "),t("p",[e._v("为理解RTTI在Java里如何工作，首先必须了解类型信息在运行期是如何表示的。这时要用到一个名为“"),t("code",[e._v("Class")]),e._v("对象”的特殊形式的对象，其中包含了与类有关的信息（有时也把它叫作“元类”）。事实上，我们要用"),t("code",[e._v("Class")]),e._v("对象创建属于某个类的全部“常规”或“普通”对象。")]),e._v(" "),t("p",[e._v("对于作为程序一部分的每个类，它们都有一个"),t("code",[e._v("Class")]),e._v("对象。换言之，每次写一个新类时，同时也会创建一个"),t("code",[e._v("Class")]),e._v("对象（更恰当地说，是保存在一个完全同名的"),t("code",[e._v(".class")]),e._v("文件中）。在运行期，一旦我们想生成那个类的一个对象，用于执行程序的Java虚拟机（JVM）首先就会检查那个类型的"),t("code",[e._v("Class")]),e._v("对象是否已经载入。若尚未载入，JVM就会查找同名的"),t("code",[e._v(".class")]),e._v("文件，并将其载入。所以Java程序启动时并不是完全载入的，这一点与许多传统语言都不同。")]),e._v(" "),t("p",[e._v("一旦那个类型的"),t("code",[e._v("Class")]),e._v("对象进入内存，就用它创建那一类型的所有对象。")]),e._v(" "),t("p",[e._v("若这种说法多少让你产生了一点儿迷惑，或者并没有真正理解它，下面这个示范程序或许能提供进一步的帮助：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: SweetShop.java\n// Examination of the way the class loader works\n\nclass Candy {\n  static {\n    System.out.println("Loading Candy");\n  }\n}\n\nclass Gum {\n  static {\n    System.out.println("Loading Gum");\n  }\n}\n\nclass Cookie {\n  static {\n    System.out.println("Loading Cookie");\n  }\n}\n\npublic class SweetShop {\n  public static void main(String[] args) {\n    System.out.println("inside main");\n    new Candy();\n    System.out.println("After creating Candy");\n    try {\n      Class.forName("Gum");\n    } catch(ClassNotFoundException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\n      "After Class.forName(\\"Gum\\")");\n    new Cookie();\n    System.out.println("After creating Cookie");\n  }\n} ///:~\n')])])]),t("p",[e._v("对每个类来说（"),t("code",[e._v("Candy")]),e._v("，"),t("code",[e._v("Gum")]),e._v("和"),t("code",[e._v("Cookie")]),e._v("），它们都有一个"),t("code",[e._v("static")]),e._v("从句，用于在类首次载入时执行。相应的信息会打印出来，告诉我们载入是什么时候进行的。在"),t("code",[e._v("main()")]),e._v("中，对象的创建代码位于打印语句之间，以便侦测载入时间。\n特别有趣的一行是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Class.forName("Gum");\n')])])]),t("p",[e._v("该方法是"),t("code",[e._v("Class")]),e._v("（即全部"),t("code",[e._v("Class")]),e._v("所从属的）的一个"),t("code",[e._v("static")]),e._v("成员。而"),t("code",[e._v("Class")]),e._v("对象和其他任何对象都是类似的，所以能够获取和控制它的一个引用（装载模块就是干这件事的）。为获得"),t("code",[e._v("Class")]),e._v("的一个引用，一个办法是使用"),t("code",[e._v("forName()")]),e._v("。它的作用是取得包含了目标类文本名字的一个"),t("code",[e._v("String")]),e._v("（注意拼写和大小写）。最后返回的是一个"),t("code",[e._v("Class")]),e._v("引用。")]),e._v(" "),t("p",[e._v("该程序在某个JVM中的输出如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('inside main\nLoading Candy\nAfter creating Candy\nLoading Gum\nAfter Class.forName("Gum")\nLoading Cookie\nAfter creating Cookie\n')])])]),t("p",[e._v("可以看到，每个"),t("code",[e._v("Class")]),e._v("只有在它需要的时候才会载入，而"),t("code",[e._v("static")]),e._v("初始化工作是在类载入时执行的。")]),e._v(" "),t("p",[e._v("非常有趣的是，另一个JVM的输出变成了另一个样子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Loading Candy\nLoading Cookie\ninside main\nAfter creating Candy\nLoading Gum\nAfter Class.forName("Gum")\nAfter creating Cookie\n')])])]),t("p",[e._v("看来JVM通过检查"),t("code",[e._v("main()")]),e._v("中的代码，已经预测到了对"),t("code",[e._v("Candy")]),e._v("和"),t("code",[e._v("Cookie")]),e._v("的需要，但却看不到"),t("code",[e._v("Gum")]),e._v("，因为它是通过对"),t("code",[e._v("forName()")]),e._v("的一个调用创建的，而不是通过更典型的"),t("code",[e._v("new")]),e._v("调用。尽管这个JVM也达到了我们希望的效果，因为确实会在我们需要之前载入那些类，但却不能肯定这儿展示的行为百分之百正确。")]),e._v(" "),t("p",[e._v("(1) 类标记")]),e._v(" "),t("p",[e._v("在Java 1.1中，可以采用第二种方式来产生"),t("code",[e._v("Class")]),e._v("对象的引用：使用“类标记”。对上述程序来说，看起来就象下面这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Gum.class;\n")])])]),t("p",[e._v("这样做不仅更加简单，而且更安全，因为它会在编译期间得到检查。由于它取消了对方法调用的需要，所以执行的效率也会更高。")]),e._v(" "),t("p",[e._v("类标记不仅可以应用于普通类，也可以应用于接口、数组以及基本数据类型。除此以外，针对每种基本数据类型的包装器类，它还存在一个名为"),t("code",[e._v("TYPE")]),e._v("的标准字段。"),t("code",[e._v("TYPE")]),e._v("字段的作用是为相关的基本数据类型产生"),t("code",[e._v("Class")]),e._v("对象的一个引用，如下所示：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("……")]),e._v(" "),t("th",[e._v("等价于……")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("boolean.class")]),e._v(" "),t("td",[e._v("Boolean.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("char.class")]),e._v(" "),t("td",[e._v("Character.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("byte.class")]),e._v(" "),t("td",[e._v("Byte.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("short.class")]),e._v(" "),t("td",[e._v("Short.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("int.class")]),e._v(" "),t("td",[e._v("Integer.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("long.class")]),e._v(" "),t("td",[e._v("Long.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("float.class")]),e._v(" "),t("td",[e._v("Float.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("double.class")]),e._v(" "),t("td",[e._v("Double.TYPE")])]),e._v(" "),t("tr",[t("td",[e._v("void.class")]),e._v(" "),t("td",[e._v("Void.TYPE")])])])]),e._v(" "),t("h2",{attrs:{id:"_11-1-2-转换前的检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-2-转换前的检查"}},[e._v("#")]),e._v(" 11.1.2 转换前的检查")]),e._v(" "),t("p",[e._v("迄今为止，我们已知的RTTI形式包括：")]),e._v(" "),t("p",[e._v("(1) 经典转换，如"),t("code",[e._v("(Shape)")]),e._v("，它用RTTI确保转换的正确性，并在遇到一个失败的转换后产生一个"),t("code",[e._v("ClassCastException")]),e._v("异常。")]),e._v(" "),t("p",[e._v("(2) 代表对象类型的"),t("code",[e._v("Class")]),e._v("对象。可查询"),t("code",[e._v("Class")]),e._v("对象，获取有用的运行期资料。")]),e._v(" "),t("p",[e._v("在C++中，经典的"),t("code",[e._v("(Shape)")]),e._v("转换并不执行RTTI。它只是简单地告诉编译器将对象当作新类型处理。而Java要执行类型检查，这通常叫作“类型安全”的向下转换。之所以叫“向下转换”，是由于类分层结构的历史排列方式造成的。若将一个"),t("code",[e._v("Circle")]),e._v("（圆）转换到一个"),t("code",[e._v("Shape")]),e._v("（几何形状），就叫做向上转换，因为圆只是几何形状的一个子集。反之，若将"),t("code",[e._v("Shape")]),e._v("转换至"),t("code",[e._v("Circle")]),e._v("，就叫做向下转换。然而，尽管我们明确知道"),t("code",[e._v("Circle")]),e._v("也是一个"),t("code",[e._v("Shape")]),e._v("，所以编译器能够自动向上转换，但却不能保证一个"),t("code",[e._v("Shape")]),e._v("肯定是一个"),t("code",[e._v("Circle")]),e._v("。因此，编译器不允许自动向下转换，除非明确指定一次这样的转换。")]),e._v(" "),t("p",[e._v("RTTI在Java中存在三种形式。关键字"),t("code",[e._v("instanceof")]),e._v("告诉我们对象是不是一个特定类型的实例（"),t("code",[e._v("Instance")]),e._v("即“实例”）。它会返回一个布尔值，以便以问题的形式使用，就象下面这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if(x instanceof Dog)\n((Dog)x).bark();\n")])])]),t("p",[e._v("将"),t("code",[e._v("x")]),e._v("转换至一个"),t("code",[e._v("Dog")]),e._v("前，上面的"),t("code",[e._v("if")]),e._v("语句会检查对象"),t("code",[e._v("x")]),e._v("是否从属于"),t("code",[e._v("Dog")]),e._v("类。进行转换前，如果没有其他信息可以告诉自己对象的类型，那么"),t("code",[e._v("instanceof")]),e._v("的使用是非常重要的——否则会得到一个"),t("code",[e._v("ClassCastException")]),e._v("异常。")]),e._v(" "),t("p",[e._v("我们最一般的做法是查找一种类型（比如要变成紫色的三角形），但下面这个程序却演示了如何用"),t("code",[e._v("instanceof")]),e._v("标记出所有对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: PetCount.java\n// Using instanceof\npackage c11.petcount;\nimport java.util.*;\n\nclass Pet {}\nclass Dog extends Pet {}\nclass Pug extends Dog {}\nclass Cat extends Pet {}\nclass Rodent extends Pet {}\nclass Gerbil extends Rodent {}\nclass Hamster extends Rodent {}\n\nclass Counter { int i; }\n\npublic class PetCount {\n  static String[] typenames = {\n    "Pet", "Dog", "Pug", "Cat",\n    "Rodent", "Gerbil", "Hamster",\n  };\n  public static void main(String[] args) {\n    Vector pets = new Vector();\n    try {\n      Class[] petTypes = {\n        Class.forName("c11.petcount.Dog"),\n        Class.forName("c11.petcount.Pug"),\n        Class.forName("c11.petcount.Cat"),\n        Class.forName("c11.petcount.Rodent"),\n        Class.forName("c11.petcount.Gerbil"),\n        Class.forName("c11.petcount.Hamster"),\n      };\n      for(int i = 0; i < 15; i++)\n        pets.addElement(\n          petTypes[\n            (int)(Math.random()*petTypes.length)]\n            .newInstance());\n    } catch(InstantiationException e) {}\n      catch(IllegalAccessException e) {}\n      catch(ClassNotFoundException e) {}\n    Hashtable h = new Hashtable();\n    for(int i = 0; i < typenames.length; i++)\n      h.put(typenames[i], new Counter());\n    for(int i = 0; i < pets.size(); i++) {\n      Object o = pets.elementAt(i);\n      if(o instanceof Pet)\n        ((Counter)h.get("Pet")).i++;\n      if(o instanceof Dog)\n        ((Counter)h.get("Dog")).i++;\n      if(o instanceof Pug)\n        ((Counter)h.get("Pug")).i++;\n      if(o instanceof Cat)\n        ((Counter)h.get("Cat")).i++;\n      if(o instanceof Rodent)\n        ((Counter)h.get("Rodent")).i++;\n      if(o instanceof Gerbil)\n        ((Counter)h.get("Gerbil")).i++;\n      if(o instanceof Hamster)\n        ((Counter)h.get("Hamster")).i++;\n    }\n    for(int i = 0; i < pets.size(); i++)\n      System.out.println(\n        pets.elementAt(i).getClass().toString());\n    for(int i = 0; i < typenames.length; i++)\n      System.out.println(\n        typenames[i] + " quantity: " +\n        ((Counter)h.get(typenames[i])).i);\n  }\n} ///:~\n')])])]),t("p",[e._v("在Java 1.0中，对"),t("code",[e._v("instanceof")]),e._v("有一个比较小的限制：只可将其与一个已命名的类型比较，不能同"),t("code",[e._v("Class")]),e._v("对象作对比。在上述例子中，大家可能觉得将所有那些"),t("code",[e._v("instanceof")]),e._v("表达式写出来是件很麻烦的事情。实际情况正是这样。但在Java 1.0中，没有办法让这一工作自动进行——不能创建"),t("code",[e._v("Class")]),e._v("的一个"),t("code",[e._v("Vector")]),e._v("，再将其与之比较。大家最终会意识到，如编写了数量众多的"),t("code",[e._v("instanceof")]),e._v("表达式，整个设计都可能出现问题。")]),e._v(" "),t("p",[e._v("当然，这个例子只是一个构想——最好在每个类型里添加一个"),t("code",[e._v("static")]),e._v("数据成员，然后在构造器中令其自增，以便跟踪计数。编写程序时，大家可能想象自己拥有类的源码控制权，能够自由改动它。但由于实际情况并非总是这样，所以RTTI显得特别方便。")]),e._v(" "),t("p",[e._v("(1) 使用类标记")]),e._v(" "),t("p",[t("code",[e._v("PetCount.java")]),e._v("示例可用Java 1.1的类标记重写一遍。得到的结果显得更加明确易懂：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//: PetCount2.java\n// Using Java 1.1 class literals\npackage c11.petcount2;\nimport java.util.*;\n\nclass Pet {}\nclass Dog extends Pet {}\nclass Pug extends Dog {}\nclass Cat extends Pet {}\nclass Rodent extends Pet {}\nclass Gerbil extends Rodent {}\nclass Hamster extends Rodent {}\n\nclass Counter { int i; }\n\npublic class PetCount2 {\n  public static void main(String[] args) {\n    Vector pets = new Vector();\n    Class[] petTypes = {\n      // Class literals work in Java 1.1+ only:\n      Pet.class,\n      Dog.class,\n      Pug.class,\n      Cat.class,\n      Rodent.class,\n      Gerbil.class,\n      Hamster.class,\n    };\n    try {\n      for(int i = 0; i < 15; i++) {\n        // Offset by one to eliminate Pet.class:\n        int rnd = 1 + (int)(\n          Math.random() * (petTypes.length - 1));\n        pets.addElement(\n          petTypes[rnd].newInstance());\n      }\n    } catch(InstantiationException e) {}\n      catch(IllegalAccessException e) {}\n    Hashtable h = new Hashtable();\n    for(int i = 0; i < petTypes.length; i++)\n      h.put(petTypes[i].toString(),\n        new Counter());\n    for(int i = 0; i < pets.size(); i++) {\n      Object o = pets.elementAt(i);\n      if(o instanceof Pet)\n        ((Counter)h.get(\n          "class c11.petcount2.Pet")).i++;\n      if(o instanceof Dog)\n        ((Counter)h.get(\n          "class c11.petcount2.Dog")).i++;\n      if(o instanceof Pug)\n        ((Counter)h.get(\n          "class c11.petcount2.Pug")).i++;\n      if(o instanceof Cat)\n        ((Counter)h.get(\n          "class c11.petcount2.Cat")).i++;\n      if(o instanceof Rodent)\n        ((Counter)h.get(\n          "class c11.petcount2.Rodent")).i++;\n      if(o instanceof Gerbil)\n        ((Counter)h.get(\n          "class c11.petcount2.Gerbil")).i++;\n      if(o instanceof Hamster)\n        ((Counter)h.get(\n          "class c11.petcount2.Hamster")).i++;\n    }\n    for(int i = 0; i < pets.size(); i++)\n      System.out.println(\n        pets.elementAt(i).getClass().toString());\n    Enumeration keys = h.keys();\n    while(keys.hasMoreElements()) {\n      String nm = (String)keys.nextElement();\n      Counter cnt = (Counter)h.get(nm);\n      System.out.println(\n        nm.substring(nm.lastIndexOf(\'.\') + 1) +\n        " quantity: " + cnt.i);\n    }\n  }\n} ///:~\n')])])]),t("p",[e._v("在这里，"),t("code",[e._v("typenames")]),e._v("（类型名）数组已被删除，改为从"),t("code",[e._v("Class")]),e._v("对象里获取类型名称。注意为此而额外做的工作：例如，类名不是"),t("code",[e._v("Getbil")]),e._v("，而是"),t("code",[e._v("c11.petcount2.Getbil")]),e._v("，其中已包含了包的名字。也要注意系统是能够区分类和接口的。")]),e._v(" "),t("p",[e._v("也可以看到，"),t("code",[e._v("petTypes")]),e._v("的创建模块不需要用一个"),t("code",[e._v("try")]),e._v("块包围起来，因为它会在编译期得到检查，不会象"),t("code",[e._v("Class.forName()")]),e._v("那样“抛”出任何异常。")]),e._v(" "),t("p",[t("code",[e._v("Pet")]),e._v("动态创建好以后，可以看到随机数字已得到了限制，位于1和"),t("code",[e._v("petTypes.length")]),e._v("之间，而且不包括零。那是由于零代表的是"),t("code",[e._v("Pet.class")]),e._v("，而且一个普通的"),t("code",[e._v("Pet")]),e._v("对象可能不会有人感兴趣。然而，由于"),t("code",[e._v("Pet.class")]),e._v("是"),t("code",[e._v("petTypes")]),e._v("的一部分，所以所有"),t("code",[e._v("Pet")]),e._v("（宠物）都会算入计数中。")]),e._v(" "),t("p",[e._v("(2) 动态的"),t("code",[e._v("instanceof")])]),e._v(" "),t("p",[e._v("Java 1.1为"),t("code",[e._v("Class")]),e._v("类添加了"),t("code",[e._v("isInstance")]),e._v("方法。利用它可以动态调用"),t("code",[e._v("instanceof")]),e._v("运算符。而在Java 1.0中，只能静态地调用它（就象前面指出的那样）。因此，所有那些烦人的"),t("code",[e._v("instanceof")]),e._v("语句都可以从"),t("code",[e._v("PetCount")]),e._v("例子中删去了。如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//: PetCount3.java\n// Using Java 1.1 isInstance()\npackage c11.petcount3;\nimport java.util.*;\n\nclass Pet {}\nclass Dog extends Pet {}\nclass Pug extends Dog {}\nclass Cat extends Pet {}\nclass Rodent extends Pet {}\nclass Gerbil extends Rodent {}\nclass Hamster extends Rodent {}\n\nclass Counter { int i; }\n\npublic class PetCount3 {\n  public static void main(String[] args) {\n    Vector pets = new Vector();\n    Class[] petTypes = {\n      Pet.class,\n      Dog.class,\n      Pug.class,\n      Cat.class,\n      Rodent.class,\n      Gerbil.class,\n      Hamster.class,\n    };\n    try {\n      for(int i = 0; i < 15; i++) {\n        // Offset by one to eliminate Pet.class:\n        int rnd = 1 + (int)(\n          Math.random() * (petTypes.length - 1));\n        pets.addElement(\n          petTypes[rnd].newInstance());\n      }\n    } catch(InstantiationException e) {}\n      catch(IllegalAccessException e) {}\n    Hashtable h = new Hashtable();\n    for(int i = 0; i < petTypes.length; i++)\n      h.put(petTypes[i].toString(),\n        new Counter());\n    for(int i = 0; i < pets.size(); i++) {\n      Object o = pets.elementAt(i);\n      // Using isInstance to eliminate individual\n      // instanceof expressions:\n      for (int j = 0; j < petTypes.length; ++j)\n        if (petTypes[j].isInstance(o)) {\n          String key = petTypes[j].toString();\n          ((Counter)h.get(key)).i++;\n        }\n    }\n    for(int i = 0; i < pets.size(); i++)\n      System.out.println(\n        pets.elementAt(i).getClass().toString());\n    Enumeration keys = h.keys();\n    while(keys.hasMoreElements()) {\n      String nm = (String)keys.nextElement();\n      Counter cnt = (Counter)h.get(nm);\n      System.out.println(\n        nm.substring(nm.lastIndexOf('.') + 1) +\n        \" quantity: \" + cnt.i);\n    }\n  }\n} ///:~\n")])])]),t("p",[e._v("可以看到，Java 1.1的"),t("code",[e._v("isInstance()")]),e._v("方法已取消了对"),t("code",[e._v("instanceof")]),e._v("表达式的需要。此外，这也意味着一旦要求添加新类型宠物，只需简单地改变"),t("code",[e._v("petTypes")]),e._v("数组即可；毋需改动程序剩余的部分（但在使用"),t("code",[e._v("instanceof")]),e._v("时却是必需的）。")])])}),[],!1,null,null,null);n.default=s.exports}}]);