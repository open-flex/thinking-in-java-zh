(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{559:function(e,t,n){"use strict";n.r(t);var a=n(56),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_8-3-枚举器-迭代器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-枚举器-迭代器"}},[e._v("#")]),e._v(" 8.3 枚举器（迭代器）")]),e._v(" "),n("p",[e._v("在任何集合类中，必须通过某种方法在其中置入对象，再用另一种方法从中取得对象。毕竟，容纳各种各样的对象正是集合的首要任务。在"),n("code",[e._v("Vector")]),e._v("中，"),n("code",[e._v("addElement()")]),e._v("便是我们插入对象采用的方法，而"),n("code",[e._v("elementAt()")]),e._v("是提取对象的唯一方法。"),n("code",[e._v("Vector")]),e._v("非常灵活，我们可在任何时候选择任何东西，并可使用不同的索引选择多个元素。")]),e._v(" "),n("p",[e._v("若从更高的角度看这个问题，就会发现它的一个缺陷：需要事先知道集合的准确类型，否则无法使用。乍看来，这一点似乎没什么关系。但假若最开始决定使用"),n("code",[e._v("Vector")]),e._v("，后来在程序中又决定（考虑执行效率的原因）改变成一个"),n("code",[e._v("List")]),e._v("（属于Java1.2集合库的一部分），这时又该如何做呢？")]),e._v(" "),n("p",[e._v("可利用“迭代器”（"),n("code",[e._v("Iterator")]),e._v("）的概念达到这个目的。它可以是一个对象，作用是遍历一系列对象，并选择那个序列中的每个对象，同时不让客户程序员知道或关注那个序列的基础结构。此外，我们通常认为迭代器是一种“轻量级”对象；也就是说，创建它只需付出极少的代价。但也正是由于这个原因，我们常发现迭代器存在一些似乎很奇怪的限制。例如，有些迭代器只能朝一个方向移动。\nJava的"),n("code",[e._v("Enumeration")]),e._v("（枚举，注释②）便是具有这些限制的一个迭代器的例子。除下面这些外，不可再用它做其他任何事情：")]),e._v(" "),n("p",[e._v("(1) 用一个名为"),n("code",[e._v("elements()")]),e._v("的方法要求集合为我们提供一个"),n("code",[e._v("Enumeration")]),e._v("。我们首次调用它的"),n("code",[e._v("nextElement()")]),e._v("时，这个"),n("code",[e._v("Enumeration")]),e._v("会返回序列中的第一个元素。")]),e._v(" "),n("p",[e._v("(2) 用"),n("code",[e._v("nextElement()")]),e._v("获得下一个对象。")]),e._v(" "),n("p",[e._v("(3) 用"),n("code",[e._v("hasMoreElements()")]),e._v("检查序列中是否还有更多的对象。")]),e._v(" "),n("p",[e._v("②：“迭代器”这个词在C++和OOP的其他地方是经常出现的，所以很难确定为什么Java的开发者采用了这样一个奇怪的名字。Java 1.2的集合库修正了这个问题以及其他许多问题。")]),e._v(" "),n("p",[e._v("只可用"),n("code",[e._v("Enumeration")]),e._v("做这些事情，不能再有更多。它属于迭代器一种简单的实现方式，但功能依然十分强大。为体会它的运作过程，让我们复习一下本章早些时候提到的"),n("code",[e._v("CatsAndDogs.java")]),e._v("程序。在原始版本中，"),n("code",[e._v("elementAt()")]),e._v("方法用于选择每一个元素，但在下述修订版中，可看到使用了一个“枚举”：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: CatsAndDogs2.java\n// Simple collection with Enumeration\nimport java.util.*;\n\nclass Cat2 {\n  private int catNumber;\n  Cat2(int i) {\n    catNumber = i;\n  }\n  void print() {\n    System.out.println("Cat number " +catNumber);\n  }\n}\n\nclass Dog2 {\n  private int dogNumber;\n  Dog2(int i) {\n    dogNumber = i;\n  }\n  void print() {\n    System.out.println("Dog number " +dogNumber);\n  }\n}\n\npublic class CatsAndDogs2 {\n  public static void main(String[] args) {\n    Vector cats = new Vector();\n    for(int i = 0; i < 7; i++)\n      cats.addElement(new Cat2(i));\n    // Not a problem to add a dog to cats:\n    cats.addElement(new Dog2(7));\n    Enumeration e = cats.elements();\n    while(e.hasMoreElements())\n      ((Cat2)e.nextElement()).print();\n    // Dog is detected only at run-time\n  }\n} ///:~\n')])])]),n("p",[e._v("我们看到唯一的改变就是最后几行。不再是：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("for(int i = 0; i < cats.size(); i++)\n((Cat)cats.elementAt(i)).print();\n")])])]),n("p",[e._v("而是用一个"),n("code",[e._v("Enumeration")]),e._v("遍历整个序列：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("while(e.hasMoreElements())\n((Cat2)e.nextElement()).print();\n")])])]),n("p",[e._v("使用"),n("code",[e._v("Enumeration")]),e._v("，我们不必关心集合中的元素数量。所有工作均由"),n("code",[e._v("hasMoreElements()")]),e._v("和"),n("code",[e._v("nextElement()")]),e._v("自动照管了。")]),e._v(" "),n("p",[e._v("下面再看看另一个例子，让我们创建一个常规用途的打印方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//: HamsterMaze.java\n// Using an Enumeration\nimport java.util.*;\n\nclass Hamster {\n  private int hamsterNumber;\n  Hamster(int i) {\n    hamsterNumber = i;\n  }\n  public String toString() {\n    return "This is Hamster #" + hamsterNumber;\n  }\n}\n\nclass Printer {\n  static void printAll(Enumeration e) {\n    while(e.hasMoreElements())\n      System.out.println(\n        e.nextElement().toString());\n  }\n}\n\npublic class HamsterMaze {\n  public static void main(String[] args) {\n    Vector v = new Vector();\n    for(int i = 0; i < 3; i++)\n      v.addElement(new Hamster(i));\n    Printer.printAll(v.elements());\n  }\n} ///:~\n')])])]),n("p",[e._v("仔细研究一下打印方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("static void printAll(Enumeration e) {\n  while(e.hasMoreElements())\n    System.out.println(\n      e.nextElement().toString());\n}\n")])])]),n("p",[e._v("注意其中没有与序列类型有关的信息。我们拥有的全部东西便是"),n("code",[e._v("Enumeration")]),e._v("。为了解有关序列的情况，一个"),n("code",[e._v("Enumeration")]),e._v("便足够了：可取得下一个对象，亦可知道是否已抵达了末尾。取得一系列对象，然后在其中遍历，从而执行一个特定的操作——这是一个颇有价值的编程概念，本书许多地方都会沿用这一思路。")]),e._v(" "),n("p",[e._v("这个看似特殊的例子甚至可以更为通用，因为它使用了常规的"),n("code",[e._v("toString()")]),e._v("方法（之所以称为常规，是由于它属于"),n("code",[e._v("Object")]),e._v("类的一部分）。下面是调用打印的另一个方法（尽管在效率上可能会差一些）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('System.out.println("" + e.nextElement());\n')])])]),n("p",[e._v("它采用了封装到Java内部的“自动转换成字符串”技术。一旦编译器碰到一个字符串，后面跟随一个"),n("code",[e._v("+")]),e._v("，就会希望后面又跟随一个字符串，并自动调用"),n("code",[e._v("toString()")]),e._v("。在Java 1.1中，第一个字符串是不必要的；所有对象都会转换成字符串。亦可对此执行一次转换，获得与调用"),n("code",[e._v("toString()")]),e._v("同样的效果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("System.out.println((String)e.nextElement())\n")])])]),n("p",[e._v("但我们想做的事情通常并不仅仅是调用"),n("code",[e._v("Object")]),e._v("方法，所以会再度面临类型转换的问题。对于自己感兴趣的类型，必须假定自己已获得了一个"),n("code",[e._v("Enumeration")]),e._v("，然后将结果对象转换成为那种类型（若操作错误，会得到运行期异常）。")])])}),[],!1,null,null,null);t.default=s.exports}}]);