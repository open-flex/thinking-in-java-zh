(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{456:function(e,n,a){"use strict";a.r(n);var t=a(56),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_13-19-swing入门-注释7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-swing入门-注释7"}},[e._v("#")]),e._v(" 13.19 Swing入门（注释⑦）")]),e._v(" "),a("p",[e._v("通过这一章的学习，当我们的工作方法在AWT中发生了巨大的改变后（如果可以回忆起很久以前，当Java第一次面世时SUN公司曾声明Java是一种“稳定，牢固”的编程语言），可能一直有Java还不十分的成熟的感觉。的确，现在Java拥有一个不错的事件模型以及一个优秀的组件复用设计——JavaBeans。但GUI组件看起来还相当的原始，笨拙以及相当的抽象。")]),e._v(" "),a("p",[e._v("⑦：写作本节时，Swing库显然已被Sun“固定”下来了，所以只要你下载并安装了Swing库，就应该能正确地编译和运行这里的代码，不会出现任何问题（应该能编译Sun配套提供的演示程序，以检测安装是否正确）。若遇到任何麻烦，请访问"),a("code",[e._v("http://www.BruceEckel.com")]),e._v("，了解最近的更新情况。")]),e._v(" "),a("p",[e._v("而这就是Swing将要占领的领域。Swing库在Java 1.1之后面世，因此我们可以自然而然地假设它是Java 1.2的一部分。可是，它是设计为作为一个补充在Java 1.1版中工作的。这样，我们就不必为了享用好的UI组件库而等待我们的平台去支持Java 1.2版了。如果Swing库不是我们的用户的Java 1.1版所支持的一部分，并且产生一些意外，那他就可能真正的需要去下载Swing库了。")]),e._v(" "),a("p",[e._v("Swing包含所有我们缺乏的组件，在整个本章余下的部分中：我们期望领会现代化的UI，来自按钮的任何事件包括到树状和网格结构中的图片。它是一个大库，但在某些方面它为任务被设计得相应的复杂——如果任何事都是简单的，我们不必编写更多的代码但同样设法运行我们的代码逐渐地变得更加的复杂。这意味着一个容易的入口，如果我们需要它我们得到它的强大力量。")]),e._v(" "),a("p",[e._v("Swing相当的深奥，这一节不会去试图让读者理解，但会介绍它的能力和Swing简单地使我们着手使用库。请注意我们有意识的使用这一切变得简单。如果我们需要运行更多的，这时Swing能或许能给我们所想要的，如果我们愿意深入地研究，可以从SUN公司的在线文档中获取更多的资料。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-1-swing有哪些优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-1-swing有哪些优点"}},[e._v("#")]),e._v(" 13.19.1 Swing有哪些优点")]),e._v(" "),a("p",[e._v("当我们开始使用Swing库时，会注意到它在技术上向前迈出了巨大的一步。Swing组件是Bean，因此他们可以支持Bean的任何开发环境中使用。Swing提供了一个完全的UI组件集合。因为速度的关系，所有的组件都很小巧的（没有“重量级”组件被使用），Swing为了轻便在Java中整个被编写。")]),e._v(" "),a("p",[e._v("最重要的是我们会希望Swing被称为“正交使用”；一旦我们采用了这种关于库的普遍的办法我们就可以在任何地方应用它们。这主要是因为Bean的命名规则，大多数的时候在我编写这些程序例子时我可以猜到方法名并且第一次就将它拼写正确而无需查找任何事物。这无疑是优秀库设计的品质证明。另外，我们可以广泛地插入组件到其它的组件中并且事件会正常地工作。")]),e._v(" "),a("p",[e._v("键盘操作是自动被支持的——我们可以使用Swing应用程序而不需要鼠标，但我们不得不做一些额外的编程工作（老的AWT中需要一些可怕的代码以支持键盘操作）。滚动被毫不费力地支持——我们简单地将我们的组件到一个"),a("code",[e._v("JScrollPane")]),e._v("中，同样我们再增加它到我们的窗体中即可。其它的特征，例如工具提示条只需要一行单独的代码就可执行。")]),e._v(" "),a("p",[e._v("Swing同样支持一些被称为“可插入外观和效果”的事物，这就是说UI的外观可以在不同的平台和不同的操作系统上被动态地改变以符合用户的期望。它甚至可以创造我们自己的外观和效果。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-2-方便的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-2-方便的转换"}},[e._v("#")]),e._v(" 13.19.2 方便的转换")]),e._v(" "),a("p",[e._v("如果我们长期艰苦不懈地利用Java 1.1版构建我们的UI，我们并不需要扔掉它改变到Swing阵营中来。幸运的是，库被设计得允许容易地修改——在很多情况下我们可以简单地放一个"),a("code",[e._v("J")]),e._v("到我们老AWT组件的每个类名前面即可。下面这个例子拥有我们所熟悉的特色：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: JButtonDemo.java\n// Looks like Java 1.1 but with J\'s added\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\nimport javax.swing.*;\n\npublic class JButtonDemo extends Applet {\n  JButton\n    b1 = new JButton("JButton 1"),\n    b2 = new JButton("JButton 2");\n  JTextField t = new JTextField(20);\n  public void init() {\n    ActionListener al = new ActionListener() {\n      public void actionPerformed(ActionEvent e){\n        String name =\n          ((JButton)e.getSource()).getText();\n        t.setText(name + " Pressed");\n      }\n    };\n    b1.addActionListener(al);\n    add(b1);\n    b2.addActionListener(al);\n    add(b2);\n    add(t);\n  }\n  public static void main(String args[]) {\n    JButtonDemo applet = new JButtonDemo();\n    JFrame frame = new JFrame("TextAreaNew");\n    frame.addWindowListener(new WindowAdapter() {\n      public void windowClosing(WindowEvent e){\n        System.exit(0);\n      }\n    });\n    frame.getContentPane().add(\n      applet, BorderLayout.CENTER);\n    frame.setSize(300,100);\n    applet.init();\n    applet.start();\n    frame.setVisible(true);\n  }\n} ///:~\n')])])]),a("p",[e._v("这是一个新的输入语句，但此外任何事物除了增加了一些"),a("code",[e._v("J")]),e._v("外，看起都像这Java 1.1版的AWT。同样，我们不恰当的用"),a("code",[e._v("add()")]),e._v("方法增加到Swing "),a("code",[e._v("JFrame")]),e._v("中，除此之外我们必须像上面看到的一样先准备一些“content pane”。我们可以容易地得到Swing一个简单的改变所带来的好处。")]),e._v(" "),a("p",[e._v("因为程序中的封装语句，我们不得不调用像下面所写的一样调用这个程序：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("java c13.swing.JbuttonDemo\n")])])]),a("p",[e._v("在这一节里出现的所有的程序都将需要一个相同的窗体来运行它们。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-3-显示框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-3-显示框架"}},[e._v("#")]),e._v(" 13.19.3 显示框架")]),e._v(" "),a("p",[e._v("尽管程序片和应用程序都可以变得很重要，但如果在任何地方都使用它们就会变得混乱和毫无用处。这一节余下部分取代它们的是一个Swing程序例子的显示框架：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Show.java\n// Tool for displaying Swing demos\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class Show {\n  public static void\n  inFrame(JPanel jp, int width, int height) {\n    String title = jp.getClass().toString();\n    // Remove the word "class":\n    if(title.indexOf("class") != -1)\n      title = title.substring(6);\n    JFrame frame = new JFrame(title);\n    frame.addWindowListener(new WindowAdapter() {\n      public void windowClosing(WindowEvent e){\n        System.exit(0);\n      }\n    });\n    frame.getContentPane().add(\n      jp, BorderLayout.CENTER);\n    frame.setSize(width, height);\n    frame.setVisible(true);\n  }\n} ///:~\n')])])]),a("p",[e._v("那些想显示它们自己的类将从"),a("code",[e._v("JPanel")]),e._v("处继承并且随后为它们自己增加一些可视化的组件。最后，它们创建一个包含下面这一行程序的"),a("code",[e._v("main()")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Show.inFrame(new MyClass(), 500, 300);\n")])])]),a("p",[e._v("最后的两个参数是显示的宽度和高度。")]),e._v(" "),a("p",[e._v("注意"),a("code",[e._v("JFrame")]),e._v("的标题是用RTTI产生的。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-4-工具提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-4-工具提示"}},[e._v("#")]),e._v(" 13.19.4 工具提示")]),e._v(" "),a("p",[e._v("几乎所有我们利用来创建我们用户接口的来自于"),a("code",[e._v("JComponent")]),e._v("的类都包含一个称为"),a("code",[e._v("setToolTipText(string)")]),e._v("的方法。因此，几乎任何我们所需要表示的（对于一个对象"),a("code",[e._v("jc")]),e._v("来说就是一些来自"),a("code",[e._v("JComponent")]),e._v("的类）都可以安放在窗体中：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('jc.setToolTipText("My tip");\n')])])]),a("p",[e._v("并且当鼠标停在"),a("code",[e._v("JComponent")]),e._v("上一个超过预先设置的一个时间，一个包含我们的文字的小框就会从鼠标下弹出。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-5-边框"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-5-边框"}},[e._v("#")]),e._v(" 13.19.5 边框")]),e._v(" "),a("p",[a("code",[e._v("JComponent")]),e._v("同样包括一个称为"),a("code",[e._v("setBorder()")]),e._v("的方法，该方法允许我们安放一些各种各样有趣的边框到一些可见的组件上。下面的程序例子利用一个创建"),a("code",[e._v("JPanel")]),e._v("并安放边框到每个例子中的被称为"),a("code",[e._v("showBorder()")]),e._v("的方法，示范了一些有用的不同的边框。同样，它也使用RTTI来找我们使用的边框名（剔除所有的路径信息），然后将边框名放到面板中间的"),a("code",[e._v("JLable")]),e._v("里：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//: Borders.java\n// Different Swing borders\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\n\npublic class Borders extends JPanel {\n  static JPanel showBorder(Border b) {\n    JPanel jp = new JPanel();\n    jp.setLayout(new BorderLayout());\n    String nm = b.getClass().toString();\n    nm = nm.substring(nm.lastIndexOf('.') + 1);\n    jp.add(new JLabel(nm, JLabel.CENTER),\n      BorderLayout.CENTER);\n    jp.setBorder(b);\n    return jp;\n  }\n  public Borders() {\n    setLayout(new GridLayout(2,4));\n    add(showBorder(new TitledBorder(\"Title\")));\n    add(showBorder(new EtchedBorder()));\n    add(showBorder(new LineBorder(Color.blue)));\n    add(showBorder(\n      new MatteBorder(5,5,30,30,Color.green)));\n    add(showBorder(\n      new BevelBorder(BevelBorder.RAISED)));\n    add(showBorder(\n      new SoftBevelBorder(BevelBorder.LOWERED)));\n    add(showBorder(new CompoundBorder(\n      new EtchedBorder(),\n      new LineBorder(Color.red))));\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Borders(), 500, 300);\n  }\n} ///:~\n")])])]),a("p",[e._v("这一节中大多数程序例子都使用"),a("code",[e._v("TitledBorder")]),e._v("，但我们可以注意到其余的边框也同样易于使用。能创建我们自己的边框并安放它们到按钮、标签等等内——任何来自"),a("code",[e._v("JComponent")]),e._v("的东西。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-6-按钮"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-6-按钮"}},[e._v("#")]),e._v(" 13.19.6 按钮")]),e._v(" "),a("p",[e._v("Swing增加了一些不同类型的按钮，并且它同样可以修改选择组件的结构：所有的按钮、复选框、单选钮，甚至从"),a("code",[e._v("AbstractButton")]),e._v("处继承的菜单项（这是因为菜单项一般被包含在其中，它可能会被改进命名为"),a("code",[e._v("AbstractChooser")]),e._v("或者相同的什么名字）。我们会注意使用菜单项的简便，下面的例子展示了不同类型的可用的按钮：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Buttons.java\n// Various Swing buttons\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.plaf.basic.*;\nimport javax.swing.border.*;\n\npublic class Buttons extends JPanel {\n  JButton jb = new JButton("JButton");\n  BasicArrowButton\n    up = new BasicArrowButton(\n      BasicArrowButton.NORTH),\n    down = new BasicArrowButton(\n      BasicArrowButton.SOUTH),\n    right = new BasicArrowButton(\n      BasicArrowButton.EAST),\n    left = new BasicArrowButton(\n      BasicArrowButton.WEST);\n  public Buttons() {\n    add(jb);\n    add(new JToggleButton("JToggleButton"));\n    add(new JCheckBox("JCheckBox"));\n    add(new JRadioButton("JRadioButton"));\n    JPanel jp = new JPanel();\n    jp.setBorder(new TitledBorder("Directions"));\n    jp.add(up);\n    jp.add(down);\n    jp.add(left);\n    jp.add(right);\n    add(jp);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Buttons(), 300, 200);\n  }\n} ///:~\n')])])]),a("p",[a("code",[e._v("JButton")]),e._v("看起来像AWT按钮，但它没有更多可运行的功能（像我们后面将看到的如加入图像等）。在"),a("code",[e._v("com.sun.java.swing.basic")]),e._v("里，有一个更合适的"),a("code",[e._v("BasicArrowButton")]),e._v("按钮，但怎样测试它呢？有两种类型的“指针”恰好请求箭头按钮使用："),a("code",[e._v("Spinner")]),e._v("修改一个中断值，并且"),a("code",[e._v("StringSpinner")]),e._v("通过一个字符串数组来移动（当它到达数组底部时，甚至会自动地封装）。"),a("code",[e._v("ActionListeners")]),e._v("附着在箭头按钮上展示它使用的这些相关指针：因为它们是Bean，我们将期待利用方法名，正好捕捉并设置它们的值。")]),e._v(" "),a("p",[e._v("当我们运行这个程序例子时，我们会发现触发按钮保持它最新状态，开或时关。但复选框和单选钮每一个动作都相同，选中或没选中（它们从"),a("code",[e._v("JToggleButton")]),e._v("处继承）。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-7-按钮组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-7-按钮组"}},[e._v("#")]),e._v(" 13.19.7 按钮组")]),e._v(" "),a("p",[e._v("如果我们想单选钮保持“异或”状态，我们必须增加它们到一个按钮组中，这几乎同老AWT中的方法相同但更加的灵活。在下面将要证明的程序例子是，一些"),a("code",[e._v("AbstruactButton")]),e._v("能被增加到一个"),a("code",[e._v("ButtonGroup")]),e._v("中。")]),e._v(" "),a("p",[e._v("为避免重复一些代码，这个程序利用映射来生不同类型的按钮组。这会在"),a("code",[e._v("makeBPanel")]),e._v("中看到，"),a("code",[e._v("makeBPanel")]),e._v("创建了一个按钮组和一个"),a("code",[e._v("JPanel")]),e._v("，并且为数组中的每个"),a("code",[e._v("String")]),e._v("就是"),a("code",[e._v("makeBPanel")]),e._v("的第二个参数增加一个类对象，由它的第一个参数进行声明：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: ButtonGroups.java\n// Uses reflection to create groups of different\n// types of AbstractButton.\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport java.lang.reflect.*;\n\npublic class ButtonGroups extends JPanel {\n  static String[] ids = {\n    "June", "Ward", "Beaver",\n    "Wally", "Eddie", "Lumpy",\n  };\n  static JPanel\n  makeBPanel(Class bClass, String[] ids) {\n    ButtonGroup bg = new ButtonGroup();\n    JPanel jp = new JPanel();\n    String title = bClass.getName();\n    title = title.substring(\n      title.lastIndexOf(\'.\') + 1);\n    jp.setBorder(new TitledBorder(title));\n    for(int i = 0; i < ids.length; i++) {\n      AbstractButton ab = new JButton("failed");\n      try {\n        // Get the dynamic constructor method\n        // that takes a String argument:\n        Constructor ctor = bClass.getConstructor(\n          new Class[] { String.class });\n        // Create a new object:\n        ab = (AbstractButton)ctor.newInstance(\n          new Object[]{ids[i]});\n      } catch(Exception ex) {\n        System.out.println("can\'t create " +\n          bClass);\n      }\n      bg.add(ab);\n      jp.add(ab);\n    }\n    return jp;\n  }\n  public ButtonGroups() {\n    add(makeBPanel(JButton.class, ids));\n    add(makeBPanel(JToggleButton.class, ids));\n    add(makeBPanel(JCheckBox.class, ids));\n    add(makeBPanel(JRadioButton.class, ids));\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new ButtonGroups(), 500, 300);\n  }\n} ///:~\n')])])]),a("p",[e._v("边框标题由类名剔除了所有的路径信息而来。"),a("code",[e._v("AbstractButton")]),e._v("初始化为一个"),a("code",[e._v("JButton")]),e._v("，"),a("code",[e._v("JButtonr")]),e._v("的标签发生“失效”，因此如果我们忽略这个异常信息，我们会在屏幕上一直看到这个问题。"),a("code",[e._v("getConstructor()")]),e._v("方法产生了一个通过"),a("code",[e._v("getConstructor()")]),e._v("方法安放参数数组类型到类数组的构造器对象，然后所有我们要做的就是调用"),a("code",[e._v("newInstance()")]),e._v("，通过它一个数组对象包含我们当前的参数——在这种例子中，就是"),a("code",[e._v("ids")]),e._v("数组中的字符串。")]),e._v(" "),a("p",[e._v("这样增加了一些更复杂的内容到这个简单的程序中。为了使“异或”行为拥有按钮，我们创建一个按钮组并增加每个按钮到我们所需的组中。当我们运行这个程序时，我们会注意到所有的按钮除了"),a("code",[e._v("JButton")]),e._v("都会向我们展示“异或”行为。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-8-图标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-8-图标"}},[e._v("#")]),e._v(" 13.19.8 图标")]),e._v(" "),a("p",[e._v("我们可在一个"),a("code",[e._v("JLable")]),e._v("或从"),a("code",[e._v("AbstractButton")]),e._v("处继承的任何事物中使用一个图标（包括"),a("code",[e._v("JButton")]),e._v("，"),a("code",[e._v("JCheckbox")]),e._v("，"),a("code",[e._v("JradioButton")]),e._v("及不同类型的"),a("code",[e._v("JMenuItem")]),e._v(")。利用"),a("code",[e._v("JLables")]),e._v("的图标十分的简单容易（我们会在随后的一个程序例子中看到）。下面的程序例子探索了我们可以利用按钮的图标和它们的派生物的其它所有方法。")]),e._v(" "),a("p",[e._v("我们可以使用任何我们需要的GIF文件，但在这个例子中使用的这个GIF文件是这本书编码发行的一部分，可以在"),a("code",[e._v("www.BruceEckel.com")]),e._v("处下载来使用。为了打开一个文件和随之带来的图像，简单地创建一个图标并分配它文件名。从那时起，我们可以在程序中使用这个产生的图标。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Faces.java\n// Icon behavior in JButtons\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class Faces extends JPanel {\n  static Icon[] faces = {\n    new ImageIcon("face0.gif"),\n    new ImageIcon("face1.gif"),\n    new ImageIcon("face2.gif"),\n    new ImageIcon("face3.gif"),\n    new ImageIcon("face4.gif"),\n  };\n  JButton\n    jb = new JButton("JButton", faces[3]),\n    jb2 = new JButton("Disable");\n  boolean mad = false;\n  public Faces() {\n    jb.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e){\n        if(mad) {\n          jb.setIcon(faces[3]);\n          mad = false;\n        } else {\n          jb.setIcon(faces[0]);\n          mad = true;\n        }\n        jb.setVerticalAlignment(JButton.TOP);\n        jb.setHorizontalAlignment(JButton.LEFT);\n      }\n    });\n    jb.setRolloverEnabled(true);\n    jb.setRolloverIcon(faces[1]);\n    jb.setPressedIcon(faces[2]);\n    jb.setDisabledIcon(faces[4]);\n    jb.setToolTipText("Yow!");\n    add(jb);\n    jb2.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e){\n        if(jb.isEnabled()) {\n          jb.setEnabled(false);\n          jb2.setText("Enable");\n        } else {\n          jb.setEnabled(true);\n          jb2.setText("Disable");\n        }\n      }\n    });\n    add(jb2);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Faces(), 300, 200);\n  }\n} ///:~\n')])])]),a("p",[e._v("一个图标可以在许多的构造器中使用，但我们可以使用"),a("code",[e._v("setIcon()")]),e._v("方法增加或更换图标。这个例子同样展示了当事件发生在"),a("code",[e._v("JButton")]),e._v("（或者一些"),a("code",[e._v("AbstractButton")]),e._v("）上时，为什么它可以设置各种各样的显示图标：当"),a("code",[e._v("JButton")]),e._v("被按下时，当它被失效时，或者“滚过”时（鼠标从它上面移动过但并不击它）。我们会注意到那给了按钮一种动画的感觉。\n注意工具提示条也同样增加到按钮中。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-9-菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-9-菜单"}},[e._v("#")]),e._v(" 13.19.9 菜单")]),e._v(" "),a("p",[e._v("菜单在Swing中做了重要的改进并且更加的灵活——例如，我们可以在几乎程序中任何地方使用他们，包括在面板和程序片中。语法同它们在老的AWT中是一样的，并且这样使出现在老AWT的在新的Swing也出现了：我们必须为我们的菜单艰难地编写代码，并且有一些不再作为资源支持菜单（其它事件中的一些将使它们更易转换成其它的编程语言）。另外，菜单代码相当的冗长，有时还有一些混乱。下面的方法是放置所有的关于每个菜单的信息到对象的二维数组里（这种方法可以放置我们想处理的任何事物到数组里），这种方法在解决这个问题方面领先了一步。这个二维数组被菜单所创建，因此它首先表示出菜单名，并在剩余的列中表示菜单项和它们的特性。我们会注意到数组列不必保持一致——只要我们的代码知道将发生的一切事件，每一列都可以完全不同。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Menus.java\n// A menu-building system; also demonstrates\n// icons in labels and menu items.\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class Menus extends JPanel {\n  static final Boolean\n    bT = new Boolean(true),\n    bF = new Boolean(false);\n  // Dummy class to create type identifiers:\n  static class MType { MType(int i) {} };\n  static final MType\n    mi = new MType(1), // Normal menu item\n    cb = new MType(2), // Checkbox menu item\n    rb = new MType(3); // Radio button menu item\n  JTextField t = new JTextField(10);\n  JLabel l = new JLabel("Icon Selected",\n    Faces.faces[0], JLabel.CENTER);\n  ActionListener a1 = new ActionListener() {\n    public void actionPerformed(ActionEvent e) {\n      t.setText(\n        ((JMenuItem)e.getSource()).getText());\n    }\n  };\n  ActionListener a2 = new ActionListener() {\n    public void actionPerformed(ActionEvent e) {\n      JMenuItem mi = (JMenuItem)e.getSource();\n      l.setText(mi.getText());\n      l.setIcon(mi.getIcon());\n    }\n  };\n  // Store menu data as "resources":\n  public Object[][] fileMenu = {\n    // Menu name and accelerator:\n    { "File", new Character(\'F\') },\n    // Name type accel listener enabled\n    { "New", mi, new Character(\'N\'), a1, bT },\n    { "Open", mi, new Character(\'O\'), a1, bT },\n    { "Save", mi, new Character(\'S\'), a1, bF },\n    { "Save As", mi, new Character(\'A\'), a1, bF},\n    { null }, // Separator\n    { "Exit", mi, new Character(\'x\'), a1, bT },\n  };\n  public Object[][] editMenu = {\n    // Menu name:\n    { "Edit", new Character(\'E\') },\n    // Name type accel listener enabled\n    { "Cut", mi, new Character(\'t\'), a1, bT },\n    { "Copy", mi, new Character(\'C\'), a1, bT },\n    { "Paste", mi, new Character(\'P\'), a1, bT },\n    { null }, // Separator\n    { "Select All", mi,new Character(\'l\'),a1,bT},\n  };\n  public Object[][] helpMenu = {\n    // Menu name:\n    { "Help", new Character(\'H\') },\n    // Name type accel listener enabled\n    { "Index", mi, new Character(\'I\'), a1, bT },\n    { "Using help", mi,new Character(\'U\'),a1,bT},\n    { null }, // Separator\n    { "About", mi, new Character(\'t\'), a1, bT },\n  };\n  public Object[][] optionMenu = {\n    // Menu name:\n    { "Options", new Character(\'O\') },\n    // Name type accel listener enabled\n    { "Option 1", cb, new Character(\'1\'), a1,bT},\n    { "Option 2", cb, new Character(\'2\'), a1,bT},\n  };\n  public Object[][] faceMenu = {\n    // Menu name:\n    { "Faces", new Character(\'a\') },\n    // Optinal last element is icon\n    { "Face 0", rb, new Character(\'0\'), a2, bT,\n      Faces.faces[0] },\n    { "Face 1", rb, new Character(\'1\'), a2, bT,\n      Faces.faces[1] },\n    { "Face 2", rb, new Character(\'2\'), a2, bT,\n      Faces.faces[2] },\n    { "Face 3", rb, new Character(\'3\'), a2, bT,\n      Faces.faces[3] },\n    { "Face 4", rb, new Character(\'4\'), a2, bT,\n      Faces.faces[4] },\n  };\n  public Object[] menuBar = {\n    fileMenu, editMenu, faceMenu,\n    optionMenu, helpMenu,\n  };\n  static public JMenuBar\n  createMenuBar(Object[] menuBarData) {\n    JMenuBar menuBar = new JMenuBar();\n    for(int i = 0; i < menuBarData.length; i++)\n      menuBar.add(\n        createMenu((Object[][])menuBarData[i]));\n    return menuBar;\n  }\n  static ButtonGroup bgroup;\n  static public JMenu\n  createMenu(Object[][] menuData) {\n    JMenu menu = new JMenu();\n    menu.setText((String)menuData[0][0]);\n    menu.setMnemonic(\n      ((Character)menuData[0][1]).charValue());\n    // Create redundantly, in case there are\n    // any radio buttons:\n    bgroup = new ButtonGroup();\n    for(int i = 1; i < menuData.length; i++) {\n      if(menuData[i][0] == null)\n        menu.add(new JSeparator());\n      else\n        menu.add(createMenuItem(menuData[i]));\n    }\n    return menu;\n  }\n  static public JMenuItem\n  createMenuItem(Object[] data) {\n    JMenuItem m = null;\n    MType type = (MType)data[1];\n    if(type == mi)\n      m = new JMenuItem();\n    else if(type == cb)\n      m = new JCheckBoxMenuItem();\n    else if(type == rb) {\n      m = new JRadioButtonMenuItem();\n      bgroup.add(m);\n    }\n    m.setText((String)data[0]);\n    m.setMnemonic(\n      ((Character)data[2]).charValue());\n    m.addActionListener(\n      (ActionListener)data[3]);\n    m.setEnabled(\n      ((Boolean)data[4]).booleanValue());\n    if(data.length == 6)\n      m.setIcon((Icon)data[5]);\n    return m;\n  }\n  Menus() {\n    setLayout(new BorderLayout());\n    add(createMenuBar(menuBar),\n      BorderLayout.NORTH);\n    JPanel p = new JPanel();\n    p.setLayout(new BorderLayout());\n    p.add(t, BorderLayout.NORTH);\n    p.add(l, BorderLayout.CENTER);\n    add(p, BorderLayout.CENTER);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Menus(), 300, 200);\n  }\n} ///:~\n')])])]),a("p",[e._v("这个程序的目的是允许程序设计者简单地创建表格来描述每个菜单，而不是输入代码行来建立菜单。每个菜单都产生一个菜单，表格中的第一列包含菜单名和键盘快捷键。其余的列包含每个菜单项的数据：字符串存在在菜单项中的位置，菜单的类型，它的快捷键，当菜单项被选中时被激活的动作接收器及菜单是否被激活等信息。如果列开始处是空的，它将被作为一个分隔符来处理。")]),e._v(" "),a("p",[e._v("为了预防浪费和冗长的多个"),a("code",[e._v("Boolean")]),e._v("创建的对象和类型标志，以下的这些在类开始时就作为"),a("code",[e._v("static final")]),e._v("被创建："),a("code",[e._v("bT")]),e._v("和"),a("code",[e._v("bF")]),e._v("描述"),a("code",[e._v("Booleans")]),e._v("和哑类"),a("code",[e._v("MType")]),e._v("的不同对象描述标准的菜单项（"),a("code",[e._v("mi")]),e._v("），复选框菜单项（"),a("code",[e._v("cb")]),e._v("），和单选钮菜单项（"),a("code",[e._v("rb")]),e._v("）。请记住一组"),a("code",[e._v("Object")]),e._v("可以拥有单一的"),a("code",[e._v("Object")]),e._v("引用，并且不再是原来的值。")]),e._v(" "),a("p",[e._v("这个程序例子同样展示了"),a("code",[e._v("JLables")]),e._v("和"),a("code",[e._v("JMenuItems")]),e._v("（和它们的派生事物）如何处理图标的。一个图标经由它的构造器置放进"),a("code",[e._v("JLable")]),e._v("中并当对应的菜单项被选中时被改变。")]),e._v(" "),a("p",[e._v("菜单条数组控制处理所有在文件菜单清单中列出的，我们想显示在菜单条上的文件菜单。我们通过这个数组去使用"),a("code",[e._v("createMenuBar()")]),e._v("，将数组分类成单独的菜单数据数组，再通过每个单独的数组去创建菜单。这种方法依次使用菜单数据的每一行并以该数据创建"),a("code",[e._v("JMenu")]),e._v("，然后为菜单数据中剩下的每一行调用"),a("code",[e._v("createMenuItem()")]),e._v("方法。最后，"),a("code",[e._v("createMenuItem()")]),e._v("方法分析菜单数据的每一行并且判断菜单类型和它的属性，再适当地创建菜单项。终于，像我们在菜单构造器中看到的一样，从表示c"),a("code",[e._v("reateMenuBar(menuBar)")]),e._v("的表格中创建菜单，而所有的事物都是采用递归方法处理的。")]),e._v(" "),a("p",[e._v("这个程序不能建立串联的菜单，但我们拥有足够的知识，如果我们需要的话，随时都能增加多级菜单进去。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-10-弹出式菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-10-弹出式菜单"}},[e._v("#")]),e._v(" 13.19.10 弹出式菜单")]),e._v(" "),a("p",[a("code",[e._v("JPopupMenu")]),e._v("的执行看起来有一些别扭：我们必须调用"),a("code",[e._v("enableEvents()方")]),e._v("法并选择鼠标事件代替利用事件接收器。它可能增加一个鼠标接收器但"),a("code",[e._v("MouseEvent")]),e._v("从"),a("code",[e._v("isPopupTrigger()")]),e._v("处不会返回真值——它不知道将激活一个弹出菜单。另外，当我们尝试接收器方法时，它的行为令人不可思议，这或许是鼠标单击活动引起的。在下面的程序例子里一些事件产生了这种弹出行为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Popup.java\n// Creating popup menus with Swing\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class Popup extends JPanel {\n  JPopupMenu popup = new JPopupMenu();\n  JTextField t = new JTextField(10);\n  public Popup() {\n    add(t);\n    ActionListener al = new ActionListener() {\n      public void actionPerformed(ActionEvent e){\n        t.setText(\n          ((JMenuItem)e.getSource()).getText());\n      }\n    };\n    JMenuItem m = new JMenuItem("Hither");\n    m.addActionListener(al);\n    popup.add(m);\n    m = new JMenuItem("Yon");\n    m.addActionListener(al);\n    popup.add(m);\n    m = new JMenuItem("Afar");\n    m.addActionListener(al);\n    popup.add(m);\n    popup.addSeparator();\n    m = new JMenuItem("Stay Here");\n    m.addActionListener(al);\n    popup.add(m);\n    PopupListener pl = new PopupListener();\n    addMouseListener(pl);\n    t.addMouseListener(pl);\n  }\n  class PopupListener extends MouseAdapter {\n    public void mousePressed(MouseEvent e) {\n      maybeShowPopup(e);\n    }\n    public void mouseReleased(MouseEvent e) {\n      maybeShowPopup(e);\n    }\n    private void maybeShowPopup(MouseEvent e) {\n      if(e.isPopupTrigger()) {\n        popup.show(\n          e.getComponent(), e.getX(), e.getY());\n      }\n    }\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Popup(),200,150);\n  }\n} ///:~\n')])])]),a("p",[e._v("相同的"),a("code",[e._v("ActionListener")]),e._v("被加入每个"),a("code",[e._v("JMenuItem")]),e._v("中，使其能从菜单标签中取出文字，并将文字插入"),a("code",[e._v("JTextField")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-11-列表框和组合框"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-11-列表框和组合框"}},[e._v("#")]),e._v(" 13.19.11 列表框和组合框")]),e._v(" "),a("p",[e._v("列表框和组合框在Swing中工作就像它们在老的AWT中工作一样，但如果我们需要它，它们同样被增加功能。另外，它也更加的方便易用。例如，"),a("code",[e._v("JList")]),e._v("中有一个显示"),a("code",[e._v("String")]),e._v("数组的构造器（奇怪的是同样的功能在"),a("code",[e._v("JComboBox")]),e._v("中无效！）。下面的例子显示了它们基本的用法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//: ListCombo.java\n// List boxes & Combo boxes\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class ListCombo extends JPanel {\n  public ListCombo() {\n    setLayout(new GridLayout(2,1));\n    JList list = new JList(ButtonGroups.ids);\n    add(new JScrollPane(list));\n    JComboBox combo = new JComboBox();\n    for(int i = 0; i < 100; i++)\n      combo.addItem(Integer.toString(i));\n    add(combo);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new ListCombo(),200,200);\n  }\n} ///:~\n")])])]),a("p",[e._v("最开始的时候，似乎有点儿古怪的一种情况是"),a("code",[e._v("JLists")]),e._v("居然不能自动提供滚动特性——即使那也许正是我们一直所期望的。增加对滚动的支持变得十分容易，就像上面示范的一样——简单地将"),a("code",[e._v("JList")]),e._v("封装到"),a("code",[e._v("JScrollPane")]),e._v("即可，所有的细节都自动地为我们照料到了。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-12-滑杆和进度指示条"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-12-滑杆和进度指示条"}},[e._v("#")]),e._v(" 13.19.12 滑杆和进度指示条")]),e._v(" "),a("p",[e._v("滑杆用户能用一个滑块的来回移动来输入数据，在很多情况下显得很直观（如声音控制）。进程条从“空”到“满”显示相关数据的状态，因此用户得到了一个状态的透视。我最喜爱的有关这的程序例子简单地将滑动块同进程条挂接起来，所以当我们移动滑动块时，进程条也相应的改变：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Progress.java\n// Using progress bars and sliders\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.event.*;\nimport javax.swing.border.*;\n\npublic class Progress extends JPanel {\n  JProgressBar pb = new JProgressBar();\n  JSlider sb =\n    new JSlider(JSlider.HORIZONTAL, 0, 100, 60);\n  public Progress() {\n    setLayout(new GridLayout(2,1));\n    add(pb);\n    sb.setValue(0);\n    sb.setPaintTicks(true);\n    sb.setMajorTickSpacing(20);\n    sb.setMinorTickSpacing(5);\n    sb.setBorder(new TitledBorder("Slide Me"));\n    pb.setModel(sb.getModel()); // Share model\n    add(sb);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Progress(),200,150);\n  }\n} ///:~\n')])])]),a("p",[a("code",[e._v("JProgressBar")]),e._v("十分简单，但"),a("code",[e._v("JSlider")]),e._v("却有许多选项，例如方法、大或小的记号标签。注意增加一个带标题的边框是多么的容易。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-13-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-13-树"}},[e._v("#")]),e._v(" 13.19.13 树")]),e._v(" "),a("p",[e._v("使用一个"),a("code",[e._v("JTree")]),e._v("可以简单地像下面这样表示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('add(new JTree(\nnew Object[] {"this", "that", "other"}));\n')])])]),a("p",[e._v("这个程序显示了一个原始的树状物。树状物的API是非常巨大的，可是——当然是在Swing中的巨大。它表明我们可以做有关树状物的任何事，但更复杂的任务可能需要不少的研究和试验。幸运的是，在库中提供了一个妥协：“默认的”树状物组件，通常那是我们所需要的。因此大多数的时间我们可以利用这些组件，并且只在特殊的情况下我们需要更深入的研究和理解。")]),e._v(" "),a("p",[e._v("下面的例子使用了“默认”的树状物组件在一个程序片中显示一个树状物。当我们按下按钮时，一个新的子树就被增加到当前选中的结点下（如果没有结点被选中，就用根结节）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Trees.java\n// Simple Swing tree example. Trees can be made\n// vastly more complex than this.\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.tree.*;\n\n// Takes an array of Strings and makes the first\n// element a node and the rest leaves:\nclass Branch {\n  DefaultMutableTreeNode r;\n  public Branch(String[] data) {\n    r = new DefaultMutableTreeNode(data[0]);\n    for(int i = 1; i < data.length; i++)\n      r.add(new DefaultMutableTreeNode(data[i]));\n  }\n  public DefaultMutableTreeNode node() {\n    return r;\n  }\n}  \n\npublic class Trees extends JPanel {\n  String[][] data = {\n    { "Colors", "Red", "Blue", "Green" },\n    { "Flavors", "Tart", "Sweet", "Bland" },\n    { "Length", "Short", "Medium", "Long" },\n    { "Volume", "High", "Medium", "Low" },\n    { "Temperature", "High", "Medium", "Low" },\n    { "Intensity", "High", "Medium", "Low" },\n  };\n  static int i = 0;\n  DefaultMutableTreeNode root, child, chosen;\n  JTree tree;\n  DefaultTreeModel model;\n  public Trees() {\n    setLayout(new BorderLayout());\n    root = new DefaultMutableTreeNode("root");\n    tree = new JTree(root);\n    // Add it and make it take care of scrolling:\n    add(new JScrollPane(tree),\n      BorderLayout.CENTER);\n    // Capture the tree\'s model:\n    model =(DefaultTreeModel)tree.getModel();\n    JButton test = new JButton("Press me");\n    test.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e){\n        if(i < data.length) {\n          child = new Branch(data[i++]).node();\n          // What\'s the last one you clicked?\n          chosen = (DefaultMutableTreeNode)\n            tree.getLastSelectedPathComponent();\n          if(chosen == null) chosen = root;\n          // The model will create the\n          // appropriate event. In response, the\n          // tree will update itself:\n          model.insertNodeInto(child, chosen, 0);\n          // This puts the new node on the\n          // currently chosen node.\n        }\n      }\n    });\n    // Change the button\'s colors:\n    test.setBackground(Color.blue);\n    test.setForeground(Color.white);\n    JPanel p = new JPanel();\n    p.add(test);\n    add(p, BorderLayout.SOUTH);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Trees(),200,500);\n  }\n} ///:~\n')])])]),a("p",[e._v("最重要的类就是分支，它是一个工具，用来获取一个字符串数组并为第一个字符串建立一个"),a("code",[e._v("DefaultMutableTreeNode")]),e._v("作为根，其余在数组中的字符串作为叶。然后"),a("code",[e._v("node()")]),e._v("方法被调用以产生“分支”的根。树状物类包括一个来自被制造的分支的二维字符串数组，以及用来统计数组的一个静态中断"),a("code",[e._v("i")]),e._v("。"),a("code",[e._v("DefaultMutableTreeNode")]),e._v("对象控制这个结节，但在屏幕上表示的是被"),a("code",[e._v("JTree")]),e._v("和它的相关（"),a("code",[e._v("DefaultTreeModel")]),e._v("）模式所控制。注意当"),a("code",[e._v("JTree")]),e._v("被增加到程序片时，它被封装到"),a("code",[e._v("JScrollPane")]),e._v("中——这就是它全部提供的自动滚动。")]),e._v(" "),a("p",[a("code",[e._v("JTree")]),e._v("通过它自己的模型来控制。当我们修改这个模型时，模型产生一个事件，导致"),a("code",[e._v("JTree")]),e._v("对可以看见的树状物完成任何必要的升级。在"),a("code",[e._v("init()")]),e._v("中，模型由调用"),a("code",[e._v("getModel()")]),e._v("方法所捕捉。当按钮被按下时，一个新的分支被创建了。然后，当前选择的组件被找到（如果没有选择就是根）并且模型的"),a("code",[e._v("insertNodeInto()")]),e._v("方法做所有的改变树状物和导致它升级的工作。")]),e._v(" "),a("p",[e._v("大多数的时候，就像上面的例子一样，程序将给我们在树状物中所需要的一切。不过，树状物拥有力量去做我们能够想像到的任何事——在上面的例子中我们到处都可看到“"),a("code",[e._v("default")]),e._v("（默认）”字样，我们可以取代我们自己的类来获取不同的动作。但请注意：几乎所有这些类都有一个具大的接口，因此我们可以花一些时间努力去理解这些错综复杂的树状物。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-14-表格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-14-表格"}},[e._v("#")]),e._v(" 13.19.14 表格")]),e._v(" "),a("p",[e._v("和树状物一样，表格在Swing相当的庞大和强大。它们最初有意被设计成以Java数据库连结（JDBC，在15章有介绍）为媒介的“网格”数据库接口，并且因此它们拥有的巨大的灵活性，使我们不再感到复杂。无疑，这是足以成为成熟的电子数据表的基础条件而且可能为整本书提供很好的根据。但是，如果我们理解这个的基础条件，它同样可能创建相关的简单的"),a("code",[e._v("Jtable")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("JTable")]),e._v("控制数据的显示方式，但"),a("code",[e._v("TableModel")]),e._v("控制它自己的数据。因此在我们创建"),a("code",[e._v("JTable")]),e._v("前，应先创建一个"),a("code",[e._v("TableModel")]),e._v("。我们可以全部地执行"),a("code",[e._v("TableModel")]),e._v("接口，但它通常从"),a("code",[e._v("helper")]),e._v("类的"),a("code",[e._v("AbstractTableModel")]),e._v("处简单地继承：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Table.java\n// Simple demonstration of JTable\npackage c13.swing;\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.table.*;\nimport javax.swing.event.*;\n\n// The TableModel controls all the data:\nclass DataModel extends AbstractTableModel {\n  Object[][] data = {\n    {"one", "two", "three", "four"},\n    {"five", "six", "seven", "eight"},\n    {"nine", "ten", "eleven", "twelve"},\n  };\n  // Prints data when table changes:\n  class TML implements TableModelListener {\n    public void tableChanged(TableModelEvent e) {\n      for(int i = 0; i < data.length; i++) {\n        for(int j = 0; j < data[0].length; j++)\n          System.out.print(data[i][j] + " ");\n        System.out.println();\n      }\n    }\n  }\n  DataModel() {\n    addTableModelListener(new TML());\n  }\n  public int getColumnCount() {\n    return data[0].length;\n  }\n  public int getRowCount() {\n    return data.length;\n  }\n  public Object getValueAt(int row, int col) {\n    return data[row][col];\n  }\n  public void\n  setValueAt(Object val, int row, int col) {\n    data[row][col] = val;\n    // Indicate the change has happened:\n    fireTableDataChanged();\n  }\n  public boolean\n  isCellEditable(int row, int col) {\n    return true;\n  }\n};       \n\npublic class Table extends JPanel {\n  public Table() {\n    setLayout(new BorderLayout());\n    JTable table = new JTable(new DataModel());\n    JScrollPane scrollpane =\n      JTable.createScrollPaneForTable(table);\n    add(scrollpane, BorderLayout.CENTER);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Table(),200,200);\n  }\n} ///:~\n')])])]),a("p",[a("code",[e._v("DateModel")]),e._v("包括一组数据，但我们同样能从其它的地方得到数据，例如从数据库中。构造器增加了一个"),a("code",[e._v("TableModelListener")]),e._v("用来在每次表格被改变后打印数组。剩下的方法都遵循Bean的命名规则，并且当"),a("code",[e._v("JTable")]),e._v("需要在"),a("code",[e._v("DateModel")]),e._v("中显示信息时调用。"),a("code",[e._v("AbstractTableModel")]),e._v("提供了默认的"),a("code",[e._v("setValueAt()")]),e._v("和"),a("code",[e._v("isCellEditable()")]),e._v("方法以防止修改这些数据，因此如果我们想修改这些数据，就必须重载这些方法。")]),e._v(" "),a("p",[e._v("一旦我们拥有一个"),a("code",[e._v("TableModel")]),e._v("，我们只需要将它分配给"),a("code",[e._v("JTable")]),e._v("构造器即可。所有有关显示，编辑和更新的详细资料将为我们处理。注意这个程序例子同样将"),a("code",[e._v("JTable")]),e._v("放置在"),a("code",[e._v("JScrollPane")]),e._v("中，这是因为"),a("code",[e._v("JScrollPane")]),e._v("需要一个特殊的"),a("code",[e._v("JTable")]),e._v("方法。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-15-卡片式对话框"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-15-卡片式对话框"}},[e._v("#")]),e._v(" 13.19.15 卡片式对话框")]),e._v(" "),a("p",[e._v("在本章的前部，向我们介绍了老式的"),a("code",[e._v("CardLayout")]),e._v("，并且注意到我们怎样去管理我们所有的卡片开关。有趣的是，有人现在认为这是一种不错的设计。幸运的是，Swing用"),a("code",[e._v("JTabbedPane")]),e._v("对它进行了修补，由"),a("code",[e._v("JTabbedPane")]),e._v("来处理这些卡片，开关和其它的任何事物。对比"),a("code",[e._v("CardLayout")]),e._v("和"),a("code",[e._v("JTabbedPane")]),e._v("，我们会发现惊人的差异。")]),e._v(" "),a("p",[e._v("下面的程序例子十分的有趣，因为它利用了前面例子的设计。它们都是做为"),a("code",[e._v("JPanel")]),e._v("的派生物来构建的，因此这个程序将安放前面的每个例子到它自己在"),a("code",[e._v("JTabbedPane")]),e._v("的窗格中。我们会看到利用RTTI制造的程序十分的小巧精致：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//: Tabbed.java\n// Using tabbed panes\npackage c13.swing;\nimport java.awt.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\n\npublic class Tabbed extends JPanel {\n  static Object[][] q = {\n    { "Felix", Borders.class },\n    { "The Professor", Buttons.class },\n    { "Rock Bottom", ButtonGroups.class },\n    { "Theodore", Faces.class },\n    { "Simon", Menus.class },\n    { "Alvin", Popup.class },\n    { "Tom", ListCombo.class },\n    { "Jerry", Progress.class },\n    { "Bugs", Trees.class },\n    { "Daffy", Table.class },\n  };\n  static JPanel makePanel(Class c) {\n    String title = c.getName();\n    title = title.substring(\n      title.lastIndexOf(\'.\') + 1);\n    JPanel sp = null;\n    try {\n      sp = (JPanel)c.newInstance();\n    } catch(Exception e) {\n      System.out.println(e);\n    }\n    sp.setBorder(new TitledBorder(title));\n    return sp;\n  }\n  public Tabbed() {\n    setLayout(new BorderLayout());\n    JTabbedPane tabbed = new JTabbedPane();\n    for(int i = 0; i < q.length; i++)\n      tabbed.addTab((String)q[i][0],\n        makePanel((Class)q[i][1]));\n    add(tabbed, BorderLayout.CENTER);\n    tabbed.setSelectedIndex(q.length/2);\n  }\n  public static void main(String args[]) {\n    Show.inFrame(new Tabbed(),460,350);\n  }\n} ///:~\n')])])]),a("p",[e._v("再者，我们可以注意到使用的数组构造式样：第一个元素是被置放在卡片上的"),a("code",[e._v("String")]),e._v("，第二个元素是将被显示在对应窗格上"),a("code",[e._v("JPanel")]),e._v("类。在"),a("code",[e._v("Tabbed()")]),e._v("构造器里，我们可以看到两个重要的"),a("code",[e._v("JTabbedPane")]),e._v("方法被使用："),a("code",[e._v("addTab()")]),e._v("插入一个新的窗格，"),a("code",[e._v("setSelectedIndex()")]),e._v("选择一个窗格并从它开始。（一个在中间被选中的窗格证明我们不必从第一个窗格开始）。")]),e._v(" "),a("p",[e._v("当我们调用"),a("code",[e._v("addTab()")]),e._v("方法时，我们为它提供卡片的"),a("code",[e._v("String")]),e._v("和一些组件（也就是说，一个AWT组件，而不是一个来自AWT的"),a("code",[e._v("JComponent")]),e._v("）。这个组件会被显示在窗格中。一旦我们这样做了，自然而然的就不需要更多管理了——"),a("code",[e._v("JTabbedPane")]),e._v("会为我们处理其它的任何事。")]),e._v(" "),a("p",[a("code",[e._v("makePanel()")]),e._v("方法获取我们想创建的类"),a("code",[e._v("Class")]),e._v("对象和用"),a("code",[e._v("newInstance()")]),e._v("去创建并转换为"),a("code",[e._v("JPanel")]),e._v("（当然，假定那些类是必须从"),a("code",[e._v("JPanel")]),e._v("继承才能增加的类，除非在这一节中为程序例子的结构所使用）。它增加了一个包括类名并返回结果的"),a("code",[e._v("TitledBorder")]),e._v("，以作为一个"),a("code",[e._v("JPanel")]),e._v("在"),a("code",[e._v("addTab()")]),e._v("被使用。")]),e._v(" "),a("p",[e._v("当我们运行程序时，我们会发现如果卡片太多，填满了一行，"),a("code",[e._v("JTabbedPane")]),e._v("自动地将它们堆积起来。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-16-swing消息框"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-16-swing消息框"}},[e._v("#")]),e._v(" 13.19.16 Swing消息框")]),e._v(" "),a("p",[e._v("开窗的环境通常包含一个标准的信息框集，允许我们很快传递消息给用户或者从用户那里捕捉消息。在Swing里，这些信息窗被包含在"),a("code",[e._v("JOptionPane")]),e._v("里的。我们有一些不同的可能实现的事件（有一些十分复杂），但有一点，我们必须尽可能的利用"),a("code",[e._v("static JOptionPane.showMessageDialog()")]),e._v("和"),a("code",[e._v("JOptionPane.showConfirmDialog()")]),e._v("方法，调用消息对话框和确认对话框。")]),e._v(" "),a("h2",{attrs:{id:"_13-19-17-swing更多的知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-19-17-swing更多的知识"}},[e._v("#")]),e._v(" 13.19.17 Swing更多的知识")]),e._v(" "),a("p",[e._v("这一节意味着唯一向我们介绍的是Swing的强大力量和我们的着手处，因此我们能注意到通过库，我们会感觉到我们的方法何等的简单。到目前为止，我们已看到的可能足够满足我们UI设计需要的一部分。不过，这里有许多有关Swing额外的情况——它有意成为一全功能的UI设计工具箱。如果我们没有发现我们所需要的，请到SUN公司的在线文件中去查找，并搜索WEB。这个方法几乎可以完成我们能想到的任何事。")]),e._v(" "),a("p",[e._v("本节中没有涉及的一些要点：")]),e._v(" "),a("ul",[a("li",[e._v("更多特殊的组件，例如"),a("code",[e._v("JColorChooser")]),e._v(","),a("code",[e._v("JFileChooser")]),e._v(","),a("code",[e._v("JPasswordField")]),e._v(","),a("code",[e._v("JHTMLPane")]),e._v("（完成简单的HTML格式化和显示）以及"),a("code",[e._v("JTextPane")]),e._v("（一个支持格式化，字处理和图像的文字编辑器）。它们都非常易用。")]),e._v(" "),a("li",[e._v("Swing的新的事件类型。在一些方法中，它们看起来像异常：类型非常的重要，名字可以被用来表示除了它们自己之外的任何事物。")]),e._v(" "),a("li",[e._v("新的布局管理：Springs & Struts以及"),a("code",[e._v("BoxLayout")])]),e._v(" "),a("li",[e._v("分裂控制：一个间隔物式的分裂条，允许我们动态地处理其它组件的位置。")]),e._v(" "),a("li",[a("code",[e._v("JLayeredPane")]),e._v("和"),a("code",[e._v("JInternalFrame")]),e._v("被一起用来在当前帧中创建子帧，以产生多文件接口（MDI）应用程序。")]),e._v(" "),a("li",[e._v("可插入的外观和效果，因此我们可以编写单个的程序可以像期望的那样动态地适合不同的平台和操作系统。")]),e._v(" "),a("li",[e._v("自定义光标。")]),e._v(" "),a("li",[a("code",[e._v("JToolbar")]),e._v(" API提供的可拖动的浮动工具条。")]),e._v(" "),a("li",[e._v("双缓存和为平整屏幕重新画线的自动重画批次。")]),e._v(" "),a("li",[e._v("内建“取消”支持。")]),e._v(" "),a("li",[e._v("拖放支持。")])])])}),[],!1,null,null,null);n.default=o.exports}}]);